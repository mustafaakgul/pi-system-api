# -*- coding: utf-8 -*-
"""
Created on Thu Jan 24 15:29:29 2019

@author: selinyesilselve
"""


#importing libraries
import pandas as pd
import numpy
import matplotlib.pyplot as plt
from pandas import read_csv
import math
from keras.models import Sequential
from keras.layers import Dense
from keras.layers import LSTM
from sklearn.preprocessing import MinMaxScaler
from sklearn.metrics import mean_squared_error


# convert an array of values into a dataset matrix
def create_dataset(dataset, look_back=1):
	dataX, dataY = [], []
	for i in range(len(dataset)-look_back-1):
		a = dataset[i:(i+look_back), 0]
		dataX.append(a)
		dataY.append(dataset[i + look_back, 0])
	return numpy.array(dataX), numpy.array(dataY)






Okuma_Zamani = read_csv('Time Series.csv', usecols=[0], engine='python', skipfooter=3,sep=';')

Okuma_Zamanii = read_csv('Time Series.csv', engine='python', skipfooter=3,sep=';')
values = read_csv('Time Series.csv', usecols=[4], engine='python', skipfooter=3,sep=';')
colname = values.columns[0]
 



# convert values' commas to dots
translated_dataset = []
for index,row in values.iterrows():
    a = row[colname].replace(',','.')
    index = float(a)
    translated_dataset.append(index)



#load the dataset
values = pd.DataFrame(data = {'Value': translated_dataset})


#set the date times as index of the values in one dataframe 
dataset_indexed = pd.concat([Okuma_Zamani,values],axis = 1)
dataset_indexed['Okuma Zamani'] = pd.to_datetime(dataset_indexed['Okuma Zamani'])

#final dataframe that sorted by date times
dataset_indexed = dataset_indexed.set_index(['Okuma Zamani']).sort_index()


#taking the values into array which is 2D  
dataset = dataset_indexed.values
dataset = dataset.astype('float32')




# normalize the dataset
scaler = MinMaxScaler(feature_range=(0, 1))
dataset = scaler.fit_transform(dataset)



# split into train and test sets
train_size = int(len(dataset) * 0.69)
test_size = len(dataset) - train_size
train, test = dataset[0:train_size,:], dataset[train_size:len(dataset),:]


# reshape into X=t and Y=t+1
look_back = 1
trainX, trainY = create_dataset(train, look_back)
testX, testY = create_dataset(test, look_back)



# reshape input to be [samples, time steps, features]
trainX = numpy.reshape(trainX, (trainX.shape[0], 1, trainX.shape[1]))
testX = numpy.reshape(testX, (testX.shape[0], 1, testX.shape[1]))


# create and fit the LSTM network
model = Sequential()
model.add(LSTM(8, input_shape=(1, look_back)))
model.add(Dense(1))
model.compile(loss='mean_squared_error', optimizer='adam')
model.fit(trainX, trainY, epochs=100, batch_size=1, verbose=2)


# make predictions
trainPredict = model.predict(trainX)
testPredict = model.predict(testX)


# invert predictions
trainPredict = scaler.inverse_transform(trainPredict)
trainY = scaler.inverse_transform([trainY])
testPredict = scaler.inverse_transform(testPredict)
testY = scaler.inverse_transform([testY])


# calculate     
trainScore = math.sqrt(mean_squared_error(trainY[0], trainPredict[:,0]))
print('Train Score: %.2f RMSE' % (trainScore))
testScore = math.sqrt(mean_squared_error(testY[0], testPredict[:,0]))
print('Test Score: %.2f RMSE' % (testScore))


# shift train predictions for plotting
trainPredictPlot = numpy.empty_like(dataset)
trainPredictPlot[:, :] = numpy.nan
trainPredictPlot[look_back:len(trainPredict)+look_back, :] = trainPredict


# shift test predictions for plotting
testPredictPlot = numpy.empty_like(dataset)
testPredictPlot[:, :] = numpy.nan
testPredictPlot[len(trainPredict)+(look_back*2)+1:len(dataset)-1, :] = testPredict


# plot baseline and predictions
plt.plot(scaler.inverse_transform(dataset),color= "blue")
plt.plot(trainPredictPlot,color="orange")
plt.plot(testPredictPlot,color="red")
plt.show()