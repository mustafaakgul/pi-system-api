(function() {
var $s="GET PUT Via any for get put ref uri url via Date POST blog body file icon idea jive json like name poll post read self size sort tags task type uuid verb Group Place actor after array count email event field glyph group image index likes minor month osapi owner phone photo place props query rsvps score share since slide space stage state tasks title toURI users value video voted voter votes width DELETE Entity Number Object Person String Update action anchor answer author avatar banner before broken column config delete emails entity fields filter height hidden images inline invite locale member object origin params parent period person photos places plugin plural points repost silent source static status stream street string target unlike update userId voteUp Boolean Content Integer Project Summary actions authors bgColor bgImage comment content country creator demotes destroy dueDate endDate example exclude extprop filters getBlog hasBody helpful history iconCss iconUrl invitee inviter invites manager members mention message options outcome placeID private project promote reports restore revoker rootURI section sortKey statics streams subject summary tagName unknown updated updater variant version viewers welcome abridged activity archived authorID carousel category collapse comments contents doUpload document editable entities extprops favorite filename followed function getLikes getTasks getVotes hexColor ideaVote invitees isCreate jsMethod language latitude likeable linkText location markRead messages outcomes pageSize parentID personId placeURI postedBy promotes property provider question required resolved resource rootType sentDate subTasks timeZone typeCode versions voteDown MediaLink addonUUID addresses approvers binaryURL completed contentID directive editingBy entryType eventType federated followers following forUserTz fromQuest generator getImages getPlaces groupType installed likeCount longitude mediaLink permalink published rawOffset resources reviewers shareable startDate undefined unhelpful viewCount viewstyle voteCount voteDates Attendance JSONObject OnBehalfOf OpenSocial abuseCount activeOnly attachment attendance authorship bgPosition branchedTo categories checkpoint childCount colleagues createTask definition dependency discussion entityType entryState externalID externalId filterable followerId getDemotes getHistory getInvites getManager getMembers getReplies getReports getStatics getStreams glyphColor ideasCount inboxEntry isRelative markUnread newUpdates nextPoints objectType onBehalfOf openSocial pageNumber parentTask placeTopic properties replyCount revokeDate rootAuthor sendEmails setSubject startIndex staticType subjectURI targetLink typeActual urlAllowed userBadges visibility ContentBean ContentBody OutcomeType achievement actionEntry attachments bgLinkColor checkpoints commentable contentBody contentType countryName createReply databaseKey description displayName eventAccess eventTypeID followingIn generalNote getActivity getComments getContents getExtProps getNextPage getOutcomes getPromotes getVersions groupTypeV2 interaction invitations inviteUsers itemsAmount locationURL markHelpful memberCount mentionName newsEnabled noAttendees outcomeType parentPlace placeTopics privateprop publication publishDate rootIconCss sectionType sharedPlace solutionKey streamEntry thumbnailId uninstalled unpublished PublishError abbreviation announcement associatable associations availability branchedFrom calendarDate collapseSkip commentCount contentTypes contentVideo createAvatar createMember createStatic createStream creationDate data-wrapper defaultValue displayOrder earnedQuests editDisabled entrySubtype expertBadges expiredQuery externalURLs getFollowers getFollowing helpfulCount hierarchical implicitOnly includeBlogs includeCount initialLogin interactions jiveProperty lastActivity lastDataPush lastRegister maxAttendees minorVersion noteRequired objectValues oldestUnread outcomeTypes participants phoneNumbers previewImage privateprops profileImage publishError sameQuestion sectionEntry stageDefault stageEnabled subscription thumbnailURL thumbnailUrl tileInstance yesAttendees ContentBanner JiveExtension X-Jive-Run-As announcements collaboration commentRating confirmUnmark contentBanner contentImages contentVideos correctAnswer createComment createInvites createMembers createOutcome destroyAvatar eventAccessID eventCategory favoriteCount followerCount getCategories getColleagues highlightBody highlightTags jiveExtension markUnhelpful markedHelpful messageTarget nameTextColor nextLevelName optionsImages outcomeCounts parentContent parentVisible projectStatus publishedTime receiveEmails resourceLinks sameQuestions securityGroup sharedContent subscriptions unmarkHelpful versionNumber votingEnabled ActivityEntity ActivityObject PersonActivity TileDefinition activityObject addParticipant administrators autoCategorize beingProcessed canMarkHelpful contentVersion createCategory createExtProps deleteExtProps deleteMentions displayCountry displayVariant excludeReplies expirationDate favoriteObject featuredGuests followingCount getAttachments getCheckpoints getFollowingIn getNoAttendees includeContext langLocaleCode maybeAttendees notifyOnRevoke parseIdFromURI personActivity placeIdFromURI profilePrivacy promotedResult requestMessage rootExternalID searchRankings sectionEntries setCheckpoints tileDefinition unhelpfulCount updateLastRead backgroundColor displayLanguage extendedAuthors featuredContent foregroundColor getAssociations getInteractions getOutcomeTypes getPreviousPage getPrivateProps getYesAttendees hasVotedHelpful markedUnhelpful mentionedObject osapi.jive.core pollOptionImage previousUpdates restrictReplies subscribersType unmarkUnhelpful answeredQuestion authorshipPolicy canMarkUnHelpful confirmExclusion externalStreamID getAnnouncements getContentImages getMarkedHelpful getSameQuestions highlightSubject idea-type-plugin lastActivityDate lastActivityPost markSameQuestion mentionedContent minServerVersion modificationDate outcomeTypeNames restrictComments sectionEntryType unHelpfulEnabled EventCategoryType answeredQuestions childOutcomeTypes collaborationType communityAudience createInteraction directReportCount event-type-plugin eventCategoryType extStreamActivity externalPublished getAdministrators getMaybeAttendees getProfilePrivacy hasVotedUnHelpful sameQuestionCount spansMultipleDays suggestedMissions updatedOnBehalfOf administratorCount confirmContentEdit createAnnouncement createAssociations eventCalendarCount externalTargetLink getFeaturedContent getMarkedUnhelpful predecessorOutcome unmarkSameQuestion updatePrivateProps ExtStreamDefinition alternativeGrouping collaborationSource destroyAssociations extStreamDefinition removeCorrectAnswer responseInterceptor createAdministrators descriptionTextColor displayNameLocalized getAnsweredQuestions getChildOutcomeTypes localizedDisplayName parentContentVisible subjectURITargetType supportCenterSection answeredQuestionCount getUnansweredInvitees publishedCalendarDate successorOutcomeTypes extendedAuthorsEnabled externalStreamInstance getContentExternalURLs unmarkAnsweredQuestion includeChildrenOutcomes subjectURITargetSummary osapi.jive.corev3.dms.get osapi.jive.corev3.version canDeletePlaceRelationship contentPlaceRelationshipID osapi.jive.corev3.urls.get inheritsAppliedEntitlements osapi.jive.corev3.blogs.get osapi.jive.corev3.ideas.get osapi.jive.corev3.parseDate osapi.jive.corev3.polls.get osapi.jive.corev3.posts.get osapi.jive.corev3.tasks.get osapi.jive.corev3.Collection osapi.jive.corev3.dms.create osapi.jive.corev3.events.get osapi.jive.corev3.extensions osapi.jive.corev3.formatDate osapi.jive.corev3.groups.get osapi.jive.corev3.people.get osapi.jive.corev3.places.get osapi.jive.corev3.shares.get osapi.jive.corev3.slides.get osapi.jive.corev3.spaces.get osapi.jive.corev3.actions.get osapi.jive.corev3.dms.subject osapi.jive.corev3.invites.get osapi.jive.corev3.members.get osapi.jive.corev3.places.Blog osapi.jive.corev3.plugins.get osapi.jive.corev3.statics.get visibleToExternalContributors osapi.jive.corev3.admin.Plugin osapi.jive.corev3.blogs.create osapi.jive.corev3.comments.get osapi.jive.corev3.contents.get osapi.jive.corev3.ideas.create osapi.jive.corev3.mentions.get osapi.jive.corev3.messages.get osapi.jive.corev3.outcomes.get osapi.jive.corev3.places.Group osapi.jive.corev3.places.Space osapi.jive.corev3.polls.create osapi.jive.corev3.posts.create osapi.jive.corev3.projects.get osapi.jive.corev3.sections.get osapi.jive.corev3.tasks.create osapi.jive.corev3.carousels.get osapi.jive.corev3.contents.File osapi.jive.corev3.contents.Idea osapi.jive.corev3.contents.Poll osapi.jive.corev3.contents.Post osapi.jive.corev3.contents.Task osapi.jive.corev3.contents.Vote osapi.jive.corev3.documents.get osapi.jive.corev3.events.create osapi.jive.corev3.favorites.get osapi.jive.corev3.groups.create osapi.jive.corev3.people.Person osapi.jive.corev3.people.create osapi.jive.corev3.people.getAll osapi.jive.corev3.people.search osapi.jive.corev3.places.Invite osapi.jive.corev3.places.Member osapi.jive.corev3.places.Static osapi.jive.corev3.places.create osapi.jive.corev3.places.search osapi.jive.corev3.shares.create osapi.jive.corev3.slides.create osapi.jive.corev3.spaces.create osapi.jive.corev3.AbstractObject osapi.jive.corev3.activities.get osapi.jive.corev3.contents.Event osapi.jive.corev3.contents.Image osapi.jive.corev3.contents.Photo osapi.jive.corev3.contents.Slide osapi.jive.corev3.contents.Stage osapi.jive.corev3.contents.Video osapi.jive.corev3.invites.create osapi.jive.corev3.members.create osapi.jive.corev3.metadata.Field osapi.jive.corev3.places.Project osapi.jive.corev3.statics.create osapi.jive.corev3.attachments.get osapi.jive.corev3.contents.Update osapi.jive.corev3.contents.create osapi.jive.corev3.contents.search osapi.jive.corev3.discussions.get osapi.jive.corev3.metadata.Locale osapi.jive.corev3.metadata.Object osapi.jive.corev3.people.getOwner osapi.jive.corev3.places.Carousel osapi.jive.corev3.places.Category osapi.jive.corev3.projects.create osapi.jive.corev3.sections.create osapi.jive.corev3.sections.delete osapi.jive.corev3.sections.update osapi.jive.corev3.achievements.get osapi.jive.corev3.admin.PlaceTopic osapi.jive.corev3.carousels.create osapi.jive.corev3.contents.Comment osapi.jive.corev3.contents.Message osapi.jive.corev3.contents.Outcome osapi.jive.corev3.documents.create osapi.jive.corev3.favorites.create osapi.jive.corev3.ideas.stages.get osapi.jive.corev3.inbox.InboxEntry osapi.jive.corev3.inboxEntries.get osapi.jive.corev3.interactions.get osapi.jive.corev3.people.getViewer osapi.jive.corev3.publications.get osapi.jive.corev3.search.byExtProp osapi.jive.corev3.sections.Section osapi.jive.corev3.actions.getCounts osapi.jive.corev3.activities.Stream osapi.jive.corev3.activities.create osapi.jive.corev3.announcements.get osapi.jive.corev3.contents.Document osapi.jive.corev3.contents.Favorite osapi.jive.corev3.extprops.ExtProps osapi.jive.corev3.ideas.getEditable osapi.jive.corev3.metadata.Property osapi.jive.corev3.metadata.Resource osapi.jive.corev3.metadata.TimeZone osapi.jive.corev3.places.CheckPoint osapi.jive.corev3.polls.getEditable osapi.jive.corev3.posts.getEditable osapi.jive.corev3.streamEntries.get osapi.jive.corev3.tasks.getEditable e3d1a2d0-ae43-4750-9303-041ef5b16b7b osapi.jive.corev3.admin.JiveProperty osapi.jive.corev3.collaborations.get osapi.jive.corev3.communications.get osapi.jive.corev3.discussions.create osapi.jive.corev3.events.getEditable osapi.jive.corev3.jiveProperties.get osapi.jive.corev3.people.Achievement osapi.jive.corev3.people.getMetadata osapi.jive.corev3.sectionEntries.get osapi.jive.corev3.securityGroups.get osapi.jive.corev3.systemExtProps.get osapi.jive.corev3.tiles.TileInstance osapi.jive.corev3.activities.Activity osapi.jive.corev3.activities.getCount osapi.jive.corev3.admin.SecurityGroup osapi.jive.corev3.contents.Attachment osapi.jive.corev3.contents.Discussion osapi.jive.corev3.interactions.create osapi.jive.corev3.people.ProfileImage osapi.jive.corev3.people.getResources osapi.jive.corev3.places.getRootSpace osapi.jive.corev3.publications.create osapi.jive.corev3.publications.delete osapi.jive.corev3.publications.update osapi.jive.corev3.search.byExtPropKey osapi.jive.corev3.announcements.create osapi.jive.corev3.communications.Share osapi.jive.corev3.contents.ExternalURL osapi.jive.corev3.contents.OutcomeType osapi.jive.corev3.contents.getEditable osapi.jive.corev3.inboxEntries.allRead osapi.jive.corev3.admin.placeTopics.get osapi.jive.corev3.collaborations.create osapi.jive.corev3.communications.Action osapi.jive.corev3.contents.Announcement osapi.jive.corev3.documents.getEditable osapi.jive.corev3.favorites.getEditable osapi.jive.corev3.jiveProperties.create osapi.jive.corev3.sectionEntries.create osapi.jive.corev3.sectionEntries.delete osapi.jive.corev3.sectionEntries.update osapi.jive.corev3.sections.SectionEntry osapi.jive.corev3.securityGroups.create osapi.jive.corev3.systemExtProps.create osapi.jive.corev3.systemExtProps.delete osapi.jive.corev3.tiles.getTileInstance osapi.jive.corev3.achievements.challenge osapi.jive.corev3.achievements.userPanel osapi.jive.corev3.activities.Publication osapi.jive.corev3.activities.StreamEntry osapi.jive.corev3.communications.Mention osapi.jive.corev3.inboxEntries.getCounts osapi.jive.corev3.people.getPrivateProps osapi.jive.corev3.contents.ContentVersion osapi.jive.corev3.discussions.getEditable osapi.jive.corev3.eventCalendarCounts.get osapi.jive.corev3.extStreamActivities.get osapi.jive.corev3.metadata.getObjectTypes osapi.jive.corev3.people.savePrivateProps osapi.jive.corev3.admin.placeTopics.create osapi.jive.corev3.admin.placeTopics.delete osapi.jive.corev3.admin.placeTopics.getAll osapi.jive.corev3.admin.placeTopics.update osapi.jive.corev3.people.expertise.endorse osapi.jive.corev3.people.getTrendingPeople osapi.jive.corev3.places.getTrendingPlaces osapi.jive.corev3.publications.subscribers osapi.jive.corev3.eventCategoryTypes.create osapi.jive.corev3.eventCategoryTypes.delete osapi.jive.corev3.eventCategoryTypes.update osapi.jive.corev3.members.getMembersByGroup osapi.jive.corev3.metadata.getFieldMetadata osapi.jive.corev3.people.getSupportedFields osapi.jive.corev3.privateprops.PrivateProps osapi.jive.corev3.securityGroups.getMembers osapi.jive.corev3.collaborations.getExternal osapi.jive.corev3.communications.interaction osapi.jive.corev3.contents.EventCategoryType osapi.jive.corev3.contents.getPopularContent osapi.jive.corev3.extStreamActivities.create osapi.jive.corev3.metadata.getObjectMetadata osapi.jive.corev3.people.expertise.unendorse osapi.jive.corev3.people.getFilterableFields osapi.jive.corev3.places.getStorageContainer osapi.jive.corev3.playbox.pages.getUserLevel osapi.jive.corev3.contents.EventCalendarCount osapi.jive.corev3.contents.getTrendingContent osapi.jive.corev3.people.getRecommendedPeople osapi.jive.corev3.places.getRecommendedPlaces osapi.jive.corev3.solutions.supportcenter.get osapi.jive.corev3.achievements.getGlobalLevels osapi.jive.corev3.activities.getFrequentPeople osapi.jive.corev3.communications.Collaboration osapi.jive.corev3.communications.DirectMessage osapi.jive.corev3.contents.getUserEntitlements osapi.jive.corev3.metadata.getPropertyMetadata osapi.jive.corev3.people.expertise.getEndorsed osapi.jive.corev3.people.getByEntityDescriptor osapi.jive.corev3.people.getTermsAndConditions osapi.jive.corev3.places.getByEntityDescriptor osapi.jive.corev3.playbox.pages.awardUserBadge osapi.jive.corev3.playbox.pages.getProfilePage osapi.jive.corev3.achievements.getHandoutBadges osapi.jive.corev3.achievements.userPanel.quests osapi.jive.corev3.metadata.getAllObjectMetadata osapi.jive.corev3.achievements.rewardsPageBadges osapi.jive.corev3.collaborations.addParticipants osapi.jive.corev3.collaborations.getParticipants osapi.jive.corev3.contents.getByEntityDescriptor osapi.jive.corev3.contents.getRecommendedContent osapi.jive.corev3.playbox.pages.sendPbQuestEvent osapi.jive.corev3.solutions.supportcenter.create osapi.jive.corev3.solutions.supportcenter.delete osapi.jive.corev3.solutions.supportcenter.update osapi.jive.corev3.achievements.getStreamEntryIcon osapi.jive.corev3.achievements.userPanel.missions osapi.jive.corev3.contents.ExternalStreamActivity osapi.jive.corev3.extStreamActivities.getEditable osapi.jive.corev3.metadata.getAllPropertyMetadata osapi.jive.corev3.metadata.getAllTimeZoneMetadata osapi.jive.corev3.metadata.getFieldMetadataValues osapi.jive.corev3.people.acceptTermsAndConditions osapi.jive.corev3.people.expertise.getWhoEndorsed osapi.jive.corev3.people.expertise.unendorseQuery osapi.jive.corev3.playbox.pages.getReputationPage osapi.jive.corev3.solutions.supportcenter.Section osapi.jive.corev3.solutions.supportcenter.publish osapi.jive.corev3.metadata.getObjectMetadataValues osapi.jive.corev3.people.expertise.getTopExpertise osapi.jive.corev3.places.getPlacesRelatedToContent osapi.jive.corev3.achievements.getAvailableMissions osapi.jive.corev3.achievements.getUserHandoutBadges osapi.jive.corev3.achievements.saveLeaderboardImage osapi.jive.corev3.collaborations.removeParticipants osapi.jive.corev3.extstreams.ExternalStreamInstance osapi.jive.corev3.achievements.getMissionLeaderboard osapi.jive.corev3.solutions.supportcenter.blocks.get osapi.jive.corev3.solutions.supportcenter.categories osapi.jive.corev3.achievements.userPanel.expertBadges osapi.jive.corev3.metadata.getAvailableLocaleMetadata osapi.jive.corev3.metadata.getSupportedLocaleMetadata osapi.jive.corev3.people.expertise.deleteExpertiseTag osapi.jive.corev3.playbox.pages.getOverallLeaderboard osapi.jive.corev3.solutions.supportcenter.banners.get osapi.jive.corev3.achievements.getUserBadgeLeaderboard osapi.jive.corev3.extstreams.getExternalStreamInstance osapi.jive.corev3.people.expertise.approveExpertiseTag osapi.jive.corev3.people.expertise.deleteExpertiseTag2 osapi.jive.corev3.people.expertise.getUsersByExpertise osapi.jive.corev3.people.expertise.getWhoEndorsedQuery osapi.jive.corev3.solutions.supportcenter.channels.get osapi.jive.corev3.places.getPlacesRelatedToContentCount osapi.jive.corev3.contents.events.eventCategoryTypes.get osapi.jive.corev3.achievements.getUserBadgesStreamActivity osapi.jive.corev3.achievements.modals.quests.getQuestModal osapi.jive.corev3.people.expertise.getPendingExpertiseTags osapi.jive.corev3.people.expertise.getUsersByExpertiseQuery osapi.jive.corev3.achievements.getConnectedUserHandoutBadges osapi.jive.corev3.achievements.getHandoutBadgesAndPointsData osapi.jive.corev3.interactions.getInteractionsByCollaboration osapi.jive.corev3.achievements.modals.missions.getMissionModal osapi.jive.corev3.achievements.modals.missions.getStrategyModal osapi.jive.corev3.collaborations.getInteractionsByCollaboration osapi.jive.corev3.collaborations.getInteractionsWithOptionalContext".split(' ');
/**
 * Detect if we have already been included, and abort if so.
 */
window.jive_js = window.jive_js || {};

if (window.jive_js[$s[762]] === true) {
    return; // abort the scoping function, we've already been run
}

window.jive_js[$s[762]] = true; // mark as run.
/**
 * The window object, shorter and always available by scope.
 * @type {window}
 */
var $w = window; // the window

/**
 * A convenient way to reference the undefined value.
 * @type {Undefined}
 */
var $u = void(0); // undefined

/**
 * Resolves global objects by name, creating intermediate objects as necessary.
 * If a factory function is specified and that function returns undefined, the
 * leaf node is not added and undefined is returned.
 * @param n {String} The path of the global object, using "." to separated members
 * @param f {Function} an optional factory function to create the leaf element if necessary
 * @return {Object} the object as found or created
 */
function $r(n, f) { // resolve name
    var o = $w;
    var z = n.split(".");
    for (var i = 0, l = z.length, p = z[i]; i < l; p = z[++i]) {
        if (o.hasOwnProperty ? o.hasOwnProperty(p) : typeof o[p] !== $s[269]) {
            o = o[p];
        }
        else if (f && i == (l - 1)) {
            var v = f();
            if (typeof v !== $s[269]) {
                o[p] = v;
            }
            o = o[p];
        }
        else {
            o = o[p] = {};
        }
    }
    return o;
}

/**
 * A shim for older browsers that do not support the ECMAScript 5 toISOString()
 * function on Date
 */
if (!Date.prototype.toISOString) {
    Date.prototype.toISOString = function () {
        function pad(n) {
            return n < 10 ? '0' + n : n
        }
        return this.getUTCFullYear() + '-'
            + pad(this.getUTCMonth() + 1) + '-'
            + pad(this.getUTCDate()) + 'T'
            + pad(this.getUTCHours()) + ':'
            + pad(this.getUTCMinutes()) + ':'
            + pad(this.getUTCSeconds()) + 'Z';
    };
}

/**
 * Adds a function to be called by the Core v3 JS mechanism after all inline
 * code has been executed. This function may be called during the execution of
 * a load handler. Later invocation will execute the function immediately.
 * @param handlerFunction A function to be invoked after inline code has
 *     executed.
 */
var registerOnLoadHandler = (function() {
    var loadHandlers = [];
    var closed = false;
    return function(handlerFunction) {
        if (closed) {
            if (typeof handlerFunction === $s[202]) {
                handlerFunction();
            }
        }
        if (handlerFunction === registerOnLoadHandler) {
            while (loadHandlers.length) {
                var f = loadHandlers.shift();
                if (typeof f === $s[202]) {
                    f();
                }
            }
            closed = true;
        } else {
            loadHandlers.push(handlerFunction);
        }
    };
})();

/**
 * Extends an object by adding properties from subsequent passed elements.
 * Properties of passed objects take precedence in the order passed. If three
 * objects are passed, and all contain the property "foo", the value of the
 * third object will be used.
 * @param o {Object} The object to extend
 * @param e1 {Object} an object to copy properties from
 * @param e2 {Object} another object to copy properties from
 * @return {Object} The first object passed, with new properties set
 */
function $e(o, e1, e2) { // extend object
    var a = arguments;
    for (var i = 1; i < a.length; i++) {
        var e = a[i];
        if (typeof e === $s[103]) {
            for (var k in e) {
                if (e.hasOwnProperty(k)) {
                    o[k] = e[k];
                }
            }
        }
    }
    return o;
}

/**
 * Tests the passed object to see if it has any defined properties. If the empty
 * object {} is passed, or if the passed value is not an object, false is
 * returned.
 * @param o {Object} the object to test
 * @return {Boolean} true if the passed object contains at least one property.
 */
function isObjectWithProperties(o) {
    if (typeof o !== $s[103]) {
        return false;
    }
    for (var k in o) {
        if (o.hasOwnProperty(k)) {
            return true;
        }
    }
    return false;
}

/**
 * Removes properties from obj that are defined in filter, and returns a new
 * object containing only those properties.
 * @param obj {Object} The source object, form which properties may be removed.
 * @param filter {Object} An object, used to identify which properties of obj
 *     should be moved to the returned object. This object is typically build
 *     using quickLookupFromArray().
 * @return {Object} A new object containing only the properties removed form
 *     the source object.
 */

function partitionObject(obj, filter) {
    var o = {};
    for (var k in obj) {
        if (obj.hasOwnProperty(k) && obj[k] != null) {
            if (filter[k] === true) {
                o[k] = obj[k];
                delete obj[k];
            }
        }
    }
    return o;
}

/**
 * Converts an array of strings into a map of string to boolean. This can make
 * repeated testing of values in the array faster.
 * @param array {Array} An array of strings to convert into a map.
 * @return {Object} A map where the keys are the values in the passed array,
 *     and the values are boolean true.
 */
function quickLookupFromArray(array) {
    var o = {};
    for (var i = 0; i < array.length; i++) {
        o[array[i]] = true;
    }
    return o;
}

/**
 * wrapper for Array.prototype.indexOf functionality for cross browser compatibility
 * @param array - array of items to be searched for
 * @param item - the item to be search for
 */
function arrayIndexOf(array, item) {
    if (array == null) return -1;
    var i, l;
    var nativeIndexOf = Array.prototype.indexOf;
    if (nativeIndexOf && array.indexOf === nativeIndexOf) return array.indexOf(item);
    for (i = 0, l = array.length; i < l; i++) if (array[i] === item) return i;
    return -1;
}

/**
 * An object that holds core-api extensions and customizations. Default values
 * defined in the core api are on the function prototype, overridden values are
 * on the object itself.
 */
var Ext = function(){}; // the constructor
var ext = new Ext(); // the instance

// now, absorb existing extensions that are defined...
$e(ext, $r($s[649]));
// ...and replace the global extensions object with the real one.
osapi.jive.corev3.extensions = ext;

/**
 * Default extensions are implemented here.
 */
$e(Ext.prototype, {
    /**
     * A function to run another function when the mechanism is ready. This
     * call may run the passed function in the current execution context, or
     * run it later. It is expected that if "we are not yet ready" that passed
     * functions are queued and run in the order requested once "we are ready".
     * @param fn The function to execute.
     * @default Runs the passed function immediately.
     */
    runWhenReady: function(fn) {
        return fn();
    }
});

/**
 * Utility function that processes parameter overrides for instance methods and
 * resolves values relative to a local instance then applies them to a target
 * object.
 * @param local The local object used to resolve value references.
 * @param target The target object to have overridden values applied to.
 * @param overrides The map of overridden keys and values.
 */
function applyOverrides(local, target, overrides) {
    overrides = overrides || {};
    target = target || {};
    var sets = [];
    var dels = [];
    for (var key in overrides) {
        if (overrides.hasOwnProperty(key)) {
            var value = overrides[key];
            var l = value;
            var deleteKey = false;
            if (/^@(this|self)\b/.test(value)) {
                l = value.charAt(1) == "t" ? local : target;
                value = value.split(".");
                for (var v = 1; l != null && v < value.length; v++) {
                    l = l[value[v]];
                }
            }
            else if (/^@(true|false)$/.test(value)) {
                l = value.charAt(1) == 't';
            }
            else if ("@delete" == value) {
                deleteKey = true;
            }
            if (l == null) continue;
            key = key.split(".");
            var t = target;
            for (var k = 0; k < key.length; k++) {
                if (k + 1 == key.length) {
                    op(t, key[k], l, deleteKey);
                }
                else {
                    t = t[key[k]] || {};
                }
            }
        }
    }
    function op(obj,key,val,del) {
        if (del) {
            dels.push(function() {
                delete obj[key];
            });
        } else {
            sets.push(function() {
                obj[key] = val;
            });
        }
    }
    var ops = sets.concat(dels);
    for (var i = 0, j = ops.length; i < j; i++) {
        ops[i]();
    }
    return target;
}

/**
 * Expose the core api version information.
 */
$r($s[635], function() {
    var ver = {"version":3,"revision":15};
    var versionString = ver.version + "." + ver.revision;
    versionString.major = ver.version;
    versionString.minor = ver.revision;
    return versionString;
});

$r($s[642], function() {
    var testDateStr = "2012-07-19T06:59:59.000+0000";
    var d = new Date(testDateStr);
    if (isValidDate(d)) {
        return parseDateDefaultOrNull;
    }
    else {
        return jiveParseDate;
    }
});

$r($s[650], function() {
    return formatJiveDate;
});

//****************Parsing the dates returned from Jive***********************

var dateRegex=/(\d\d\d\d)-(\d?\d)-(\d?\d)T(\d?\d):(\d\d):(\d\d)\.(\d\d\d)\+0000/;

function jiveParseDate(dateString) {

    //First try to match the strict date format from Jive
    var match = dateRegex.exec(dateString);
    if (!match) {
        //If they are using this on some date other than the strict jive format, fallback on default date formatting
        return parseDateDefaultOrNull(dateString);
    }
    var year = parseInt(match[1]);
    var month = parseInt(match[2]) - 1; //javascript expects a month between 0 and 11
    var day = parseInt(match[3]);
    var hour = parseInt(match[4]);
    var min = parseInt(match[5]);
    var s = parseInt(match[6]);
    var ms = parseInt(match[7]);

    var d2 = new Date();
    d2.setUTCFullYear(year, month, day);
    d2.setUTCHours(hour, min, s, ms);

    return d2;
}

function parseDateDefaultOrNull(dateString) {
    var d = new Date(dateString);
    if (isValidDate(d)) {
        return d;
    }
    return null;
}


function isValidDate(dateObj) {
    if (!dateObj) {
        return false;
    }
    if (!(dateObj instanceof Date)){
        return false;
    }
    if (isNaN(dateObj.getTime())){
        return false;
    }
    return true;
}

//*************Formatting dates to be sent to Jive*********************

function formatJiveDate(date) {

    if (Date.prototype.toISOString) {
        return date.toISOString().replace(/Z$/, "+0000");
    }

    function pad(number) {
        var r = String(number);
        if ( r.length === 1 ) {
            r = '0' + r;
        }
        return r;
    }

    return date.getUTCFullYear()
        + '-' + pad( date.getUTCMonth() + 1 )
        + '-' + pad( date.getUTCDate() )
        + 'T' + pad( date.getUTCHours() )
        + ':' + pad( date.getUTCMinutes() )
        + ':' + pad( date.getUTCSeconds() )
        + '.' + String( (date.getUTCMilliseconds()/1000).toFixed(3) ).slice( 2, 5 )
        + '+0000';
}
var apiDef = null;

if (jive && jive.global && jive.global.galaEnabled) {
    $r("osapi.jive.corev3._exportForGala", function() {
        return function() {
            apiPostProcessor();
            return apiDef;
        }
    });
    var apiPostProcessor = function() {
        apiPostProcessor = function(){}; // this method can only be run once

        Object.keys(typeRegistry).forEach(function(key) {
            if (typeRegistry.hasOwnProperty(key)) {
                typeRegistry[key].ctor.type = key;
            }
        });

        apiDef.classes.forEach(function(classDef) {
            var ctor = $r(classDef.name);
            classDef.fields = ctor && ctor.fields || [];
            classDef.type = ctor && ctor.type;
        });

        apiDef.globals.baseURL = baseURL;
        apiDef.globals.version = {
            "version": osapi.jive.corev3.version.major,
            "revision": osapi.jive.corev3.version.minor
        };
        var slash = baseURL.indexOf('/', 8);
        apiDef.globals.jiveContext = slash > 0 ? baseURL.substr(slash) : "";
    };
}
/**
 * The base jiveURL, injected by the template mechanism
 * @type {String}
 */
var baseURL = "https://pisquare.osisoft.com" + "/api/core/v3"; // value replaced when template is rendered

/**
 * Converts the passed object into a proper URL encoded property string.
 * @param params {Object} a map of name value pairs to build a query string
 *     from.
 * @param baseURL {String} (optional) the url to append this query string to.
 * @return {String} The query string, starting with "?", or "" if the object
 *     passed contained no properties.
 */
function buildQueryParams(params, baseURL) {
    if (params) {
        var q = [];
        for (var n in params) {
            if (params.hasOwnProperty(n)) {
                if (params[n] != null) {
                    if (params[n] instanceof Array) {
                        for (var a = params[n], i = 0; i < a.length; i++) {
                            if (a[i] != null) {
                                q.push([encodeURIComponent(n), encodeURIComponent(a[i])].join("="));
                            }
                        }
                    } else {
                        q.push([encodeURIComponent(n), encodeURIComponent(params[n])].join("="));
                    }
                } else {
                    q.push(encodeURIComponent(n));
                }
            }
        }
        if (baseURL && /\?/.test(baseURL)) {
            return q.length == 0 ? baseURL : baseURL + "&" + q.join("&");
        } else if (baseURL) {
            return q.length == 0 ? baseURL : baseURL + "?" + q.join("&");
        }
        return q.length == 0 ? "" : "?" + q.join("&");
    } else {
        return "";
    }
}

/**
 * Builds a function that will take an object containing potential query
 * parameters and provide a URL encoded query string containing only the
 * parameters permitted.
 * @param params {Object|Array} An object with keys for parameter names that are
 *     permitted in the formatted query string, or an array of strings.
 * @param hasFilter {Boolean} A flag indicating that remaining parameters
 *     should be treated as filter parameters.
 * @return {Function} A function that builds a query string, only containing
 *     acceptable parameters.
 */
function buildQueryParamFormatter(params, hasFilter) {
    if (params instanceof Array) {
        params = quickLookupFromArray(params);
    }
    if (hasFilter = Boolean(hasFilter && params.filter)) {
        delete params.filter;
    }
    return function(a, url) {
        var p = partitionObject(a,params);
        if (hasFilter && isObjectWithProperties(a)) {
            var filter = [];
            for (var k in a) {
                if (a.hasOwnProperty(k) && a[k] != null) {
                    var v = a[k] instanceof Array ? a[k].join(',') : String(a[k]);
                    if (v.indexOf('(') != -1 && v.indexOf(')') != -1) {
                        filter.push(v);
                    } else {
                        filter.push(k + "(" + v + ")");
                    }
                }
            }
            if (filter.length) {
                p.filter = filter;
            }
        }
        return buildQueryParams(p, url);
    }
}

/**
 * Utility to trim the Jive URL from an href, making it a relative URL. This
 * function will prepend a "/" if one is not present.
 * @param ref {String} the url to trim
 * @return {String} the trimmed url
 */
function trimRef(ref) {
    var url = ext.jiveUrl ? ext.jiveUrl + "/api/core/v3" : baseURL;
    ref = ref.indexOf(url) == 0 ? ref.substring(url.length) : ref;
    if (/^https?:\/\//i.test(ref)) {
        return ref;
    }
    ref = ref.charAt(0) != "/" ? "/" + ref : ref;
    return ref;
}

/**
 * Parses a CXF path to find path parameter tokens in the string. If this
 * method is passed "/people/{personId}/following/{followerId}", it will return
 * [$s[221],$s[299]].
 * @param ep {String} the CXF path to parse
 * @return {Array} An array of strings, containing the tokens found in the
 *     passed path.
 */
function parseEndpointParams(ep) {
    var a = [], m = null;
    var re = /\{(\w+)\}/g;
    while (m = re.exec(ep)) {
        a.push(m[1]);
    }
    return a;
}

/**
 * Replaces path parameter tokens in a CXF path string
 * @param endpoint {String} A CXF path, possibly containing parameter tokens to
 *     be replaced.
 * @param p {Object} A map of values to replace in the passed endpoint string
 * @return {String} The path string, with parameter tokens replaced.
 */
function buildEndpoint(endpoint, p) {
    for (var k in p) {
        if (p.hasOwnProperty(k) && p[k] != null) {
            endpoint = endpoint.replace(new RegExp("\\{" + k + "\\}", "g"), encodeURIComponent(String(p[k])));
        }
    }
    return endpoint;
}

$e(Ext.prototype, {
    parseIdFromURI: function (options, args) {
        var re = new RegExp(options.endpoint.replace(/\{\w+}/g, '(\\d+)'));
        return idFromURI(options.endpoint, re, args, $s[8]);
    },
    placeIdFromURI: function (options, args) {
        return idFromURI('/places/{placeID}', /\/places\/(\d+)/, args, $s[222]);
    },
    contentIdFromURI: function (options, args) {
        return idFromURI('/contents/{contentID}', /\/contents\/(\d+)/, args, $s[8]);
    }
});

function idFromURI (expected, re, args, uriField) {
    if (args && args.id) {
        var out = $e({}, args);
        out[uriField] = args.id;
        delete args.id;
        return out;
    }
    else if (args && args[uriField]) {
        var result = re.exec(args[uriField]);
        if (result) {
            var out = $e({}, args);
            out[uriField] = result[1];
            return out;
        } else {
            throw "Passed URI does not match \"" + expected + "\": " + args.uri;
        }
    }
}
/**
 * Defines a class, with an optional super class.
 * @param className {String} The fully qualified class name to be created
 * @param superClass {Function} Optional constructor function of the new type's
 *     super class.
 * @param proto {Object} a prototype object, whose properties are added to
 *     every instance of this object that is created.
 * @param extraMethods {Array} an array of objects, defining methods to extend
 */
function defineClass(className, superClass, proto, extraMethods) { // define class
    if (apiDef) {
        apiDef.classes.push({
            name: className,
            super: superClass && superClass.className,
            proto: proto,
            extraMethods: extraMethods
        });
    }
    $r(className, function() {
        var c = function() { // constructor
            if (!(this instanceof c)) {
                var newObj = defineClass.chain(c.prototype);
                c.apply(newObj, arguments);
                return newObj;
            }
            if (superClass) superClass.apply(this,arguments);
            if (proto) {
                $e(this, proto);
            }
        };
        c.className = className;
        if (typeof superClass === $s[202]) {
            c.prototype = defineClass.chain(superClass.prototype);
        }
        c.prototype.toString = function() {
            return "function " + className + "() { [generated code] }";
        };
        c.prototype.constructor = c;
        if (extraMethods && extraMethods.length) {
            for (var i = 0, l = extraMethods.length; i < l; i++) {
                var fn = ext.getExtraMethod({
                    name: extraMethods[i].name,
                    params: extraMethods[i].params || {},
                    className: className,
                    ctor: c
                });
                if (typeof fn === $s[202]) {
                    c.prototype[extraMethods[i].name] = fn;
                }
            }
        }
        return c;
    });
}

/**
 * Utility function to create a prototype replacement to extend a type hierarchy
 * @param $prototype {Object} The prototype of the super class constructor
 * @return {Object} a new prototype object to replace the sub class
 *     constructor's prototype with.
 */
defineClass.chain = (function () {
    var p = function (){};
    return function ($prototype) {
        p.prototype = $prototype;
        return new p();
    };
}());

/**
 * Returns the class name of the argument or undefined if
 * it's not a valid JavaScript object.
 * @param obj {Object} The object to derive the class name string from.
 * @return {String} the type of the passed object.
 */
function getObjectClass(obj) {
    if (obj && obj.constructor && obj.constructor.toString) {
        var arr = obj.constructor.toString().match(/function\s*([a-z$_][a-z0-9$_]*(\.[a-z$_][a-z0-9$_]*)*)/i);
        if (arr && arr.length == 2) {
            return arr[1];
        }
        return $s[178];
    }
    return typeof obj;
}

/**
 * Defines a property on an object. This call supports getter functions on
 * object prototypes and values <b>only</b>.
 *
 * The newly added property <i>may or may not</i> be enumerable, depending on
 * the capabilities of the underlying JavaScript engine.
 * @param object The object to add a property to.
 * @param name The name of the property to add.
 * @param config.get {Function} The getter function to apply.
 * @param config.value {*} The value to set.
 */
function defineProperty(object, name, config) {
    if (defineProperty.useDynamic) {
        // use the native language mechanism
        Object.defineProperty(object, name, config);
    } else if (object.constructor &&
               object.constructor.prototype == object &&
               typeof config.get === $s[202]) {
        // this is a getter on a constructor prototype
        var getters = object.constructor._dynamicGetters || [];
        if (getters.length == 0) {
            object.constructor._dynamicGetters = getters;
        }
        getters.push($e({name: name, fn: config.get}, config));
    } else if (typeof object === $s[103] && config.hasOwnProperty($s[68])) {
        // this is simply setting a value on an object
        object[name] = config.value;
    } else {
        throw "unsupported use of defineProperty(object,'" + name + "'," + JSON.stringify(config) + ")";
    }
}

/**
 * Indicates if this javascript engine supports Object.defineProperty
 * @type {Boolean}
 */
defineProperty.useDynamic = (function() {
    var supportsDefineProperty = typeof Object.defineProperty === 'function';

    // IE8 supports Object.defineProperty, but with a different API.
    var div = document.createElement('div');
    div.innerHTML = '<!--[if IE 8]><i></i><![endif]--><!--[if IE 9]><i></i><![endif]-->';
    if (div.getElementsByTagName('i').length > 0) {
        supportsDefineProperty = false;
    }

    return supportsDefineProperty;
})();


    /**
     * Builds a member function extension for a class
     * @param options.name {String}
     * @param options.params {Object} A map
     * @param options.className {String} The fully qualified name of the class.
     * @param options.ctor {Function} The constructor function for the class.
     */

    Ext.prototype.getExtraMethod = function(options) {

        var name = options.name;
        if (options.params && options.params[$s[4]]) {
            name += "_for" + options.params[$s[4]];
        }
        return ext.extraMethods[name] || null;
    };

function defineFieldMetadata(name, type, entityType, editable, required, array){
    var ret =  {
        "name": name,
        "type": type,
        "editable": !!editable,
        "required": !!required,
        "array": !!array
    };
    if(entityType){
        ret[$s[294]] = entityType;
    }
    return ret;
}
/**
 * Partitions override params for application to body and options arguments of
 * static methods.
 * @param ov {Object} The sum of all parameter overrides, to be partitioned.
 * @param ep {Object} A quick lookup for all values that are in the path.
 * @param qp {Object} A quick lookup for all values that are in passed options.
 * @param hasBody {Boolean} true if there really is a body, false otherwise.
 * @return An object with two properties, args & body, which contain override
 *     params for the args and body parameters.
 */
function buildOverrides(ov, ep, qp, hasBody) {
    if (hasBody) {
        return { args: partitionObject(ov, $e({}, ep, qp)), body: ov };
    } else {
        return { args: ov, body: {} };
    }
}

/**
 * Defines a static method that is implicitly tied to a REST endpoint. The method always returns a Request object.
 * @param options.name {String} defines where in the global namespace this method should go
 * @param options.httpMethod {String} one of: $s[0], $s[1], POST", or $s[74]
 * @param options.endpoint {String} defines the REST endpoint for this service
 * @param options.endpointParams {Array} (optional) args to replace in the endpoint path
 * @param options.ext {String} (optional) Specifies the core api extension in which this rest endpoint is defined
 * @param options.version {String} (optional) Specifies the version of the core api extension in which this rest endpoint is defined
 * @param options.queryParams {Array} (optional) args to pass in the query string
 * @param options.overrideParams {Object} (optional) args that are always set, overriding those explicitly specified
 * @param options.paramType {String} (optional) ensures the passed param implements this type
 * @param options.optionsInterceptor {String} (optional) an extension function to pre-process passed data
 */
function defineStatic(options) {
    if (!(options.name && options.httpMethod && options.endpoint)) {
        return;
    }
    if (apiDef) {
        apiDef.statics.push(options);
    }
    options.endpointParams = options.endpointParams || parseEndpointParams(options.endpoint);
    var ep = quickLookupFromArray(options.endpointParams);
    var qp = quickLookupFromArray(options.queryParams || []);
    var qpf = buildQueryParamFormatter(options.queryParams || [], /^(GET)$/.test(options.httpMethod));
    var oi = options.optionsInterceptor && ext[options.optionsInterceptor];
    var hasBody = /^(PUT|POST)$/.test(options.httpMethod);
    var ov = buildOverrides(options.overrideParams, ep, qp, hasBody);

    var paramType;
    var f = $r(options.name, function() {
        return function(arg1, arg2) {
            var body = hasBody ? arg1 : void(0);
            var a = $e({}, hasBody ? arg2 : arg1);
            var o = hasBody ? arg1 : $u;
            for (var i = 0; i < f.overload.length; i++) {
                if (f.overload[i].optionsInterceptor) {
                    var a_ = f.overload[i].optionsInterceptor(a);
                    a = typeof(a_) == $s[269] ? a : a_;
                }
                if (f.overload[i].test(a, body)) {
                    var fn = f.overload[i].handle;
                    return hasBody ? fn(o,a) : fn(a);
                }
            }
            throw "Could not find a suitable signature for the passed arguments:\n\t" + f.overload.join("\n\t");
        };
    });
    f.overload = f.overload || [];
    f.overload.push({
        handle: function (arg1, arg2) {
            var a = applyOverrides(null, hasBody ? arg2 : arg1, ov.args);
            var o = {
                v: options.version ? "v" + options.version : "v3",
                href: qpf(a, buildEndpoint(options.endpoint, partitionObject(a,ep)))
            };
            if (options.ext) {
                o.ext = options.ext;
            }
            if (hasBody) {
                o.body = applyOverrides(null, arg1, ov.body);
            }
            return httpExecute(options.httpMethod, o);
        },
        test: function(arg, body) {
            for (var i = 0; i < options.endpointParams.length; i++) {
                if (options.overrideParams && options.overrideParams.hasOwnProperty(options.endpointParams[i])) {
                    continue; // override params don't count
                }
                if ((!arg.hasOwnProperty(options.endpointParams[i])) ||
                    arg[options.endpointParams[i]] == null) {
                    return false;
                }
            }
            return typeof this.validateParam === $s[202] ? this.validateParam(body) : true;
        },
        validateParam: options.validate ? function(param) {
            if (typeof paramType === $s[269]) {
                paramType = options.paramType ? $r(options.paramType, function(){ return $u; }) || null : null;
            }
            if (paramType) {
                if (!(param instanceof paramType)) {
                    return false;
                }
            }
            return true;
        } : null,
        name: (function() {
            var args = [];
            if (hasBody) {
                args.push("obj");
            }
            if (options.endpointParams.length) {
                args.push('{"' + options.endpointParams.join('":*, "') + '":*}');
            }
            return "(" + args.join(", ") + ")";
        })(),
        sort: options.endpointParams.length,
        optionsInterceptor: oi ? function(args) { return oi(options, args); } : $u,
        toString: function () {
            return this.name;
        }
    });
    f.overload.sort(function(l,r) {
        return (l = l.sort) < (r = r.sort) ? 1 : (l > r ? -1 : 0);
    });
}
// base constructor for all core types
defineClass($s[703]);

// base constructor for all collections of core types
defineClass($s[646]);

/**
 * Extension for the Collection that adds the previousPage() convenience method
 * when a previous page exists.
 */
defineProperty(osapi.jive.corev3.Collection.prototype, $s[360], {
    get: function() {
        var l = this.links;
        var fn = $u; // undefined
        if (l && l.next) {
            fn = function() {
                return httpExecute($s[5], l.next);
            }
        }
        defineProperty(this, $s[360], { value: fn });
        return fn;
    }
});

/**
 * Extension for the Collection that adds the previousPage() convenience method
 * when a previous page exists.
 */
defineProperty(osapi.jive.corev3.Collection.prototype, $s[545], {
    get: function() {
        var l = this.links;
        var fn = $u; // undefined
        if (l && l.previous) {
            fn = function() {
                return httpExecute($s[5], l.previous);
            }
        }
        defineProperty(this, $s[545], { value: fn });
        return fn;
    }
});

/**
 * The registry object that will contain meta data about all known core API
 * types.
 * @type {Object}
 */
var typeRegistry = {};
function ExtraMethods() {}
ext.extraMethods =$e(new ExtraMethods(), ext.extraMethods);

$e(ExtraMethods.prototype, {
    toURI: function () {
        return this.resources && this.resources.self && this.resources.self.ref;
    },
    toURI_forActivityEntity: function () {
        if (typeof this.url === $s[121]) {
            var match = /streamentry\/(\d+)$/.exec(this.url);
            return match && match[1] ? "/streamEntries/" + match[1] : $u;
        }
    }
});

/**
 * Defines an instance method on an existing object prototype.
 * @param options.className {String} name of the constructor, as defined in the global namespace
 * @param options.methodName {String} name of the instance method
 * @param options.httpMethod {String} one of: $s[0], $s[1], POST", or $s[74]
 * @param options.resourceName {String} defines the REST endpoint for this service
 * @param options.hasBody {Boolean} (optional) set to false to prevent sending a body on PUT/POST operations
 * @param options.queryParams {Array} (optional) args to replace in the endpoint path
 * @param options.paramOverrides {Object} (optional) Values that are always overridden in the body
 * @param options.optionsInterceptor {String} (optional) an extension function to pre-process passed data
 */
function defineInstanceMethod(options) {
    if (apiDef) {
        apiDef.methods.push(options);
    }
    var ctor = $r(options.className);
    var err = null;
    if (typeof ctor === $s[202] && /^(GET|PUT|POST|DELETE)$/.test(options.httpMethod)) {
        defineProperty(ctor.prototype, options.methodName, {
            get: function() {
                var r = this.resources;
                var fn = $u; // undefined
                var qp = buildQueryParamFormatter(options.queryParams || [], /^(GET)$/.test(options.httpMethod));
                var oi = options.optionsInterceptor && ext[options.optionsInterceptor];
                var intercept = oi ? function(args) { return oi(options, args); }
                                   : function(args) { return args; };
                var self = this;
                r = r && r[options.resourceName];
                if (r && arrayIndexOf(r.allowed, options.httpMethod) >= 0) {
                    switch (options.httpMethod) {
                        case "GET":
                            fn = function(params) {
                                return httpExecute($s[5], r.ref, intercept(params), qp, null);
                            };
                            break;
                        case "PUT":
                            if (options.hasBody === false) {
                                fn = function (params) {
                                    return httpExecute($s[6], r.ref, intercept(params), qp, null);
                                };
                            }
                            else {
                                fn = function (params) {
                                    var body = options.paramOverrides
                                               ? applyOverrides(self, $e({}, self), options.paramOverrides)
                                               : self;
                                    return httpExecute($s[6], r.ref, intercept(params), qp, body);
                                };
                            }
                            break;
                        case "POST":
                            if (options.hasBody === false) {
                                fn = function (params) {
                                    return httpExecute($s[23], r.ref, intercept(params), qp, null);
                                };
                            }
                            else {
                                fn = function (data, params) {
                                    var body = options.paramOverrides
                                               ? applyOverrides(self, data, options.paramOverrides)
                                               : data;
                                    return httpExecute($s[23], r.ref, intercept(params), qp, body);
                                };
                            }
                            break;
                        case "DELETE":
                            fn = function() {
                                return httpExecute($s[91], r.ref, null, null, null);
                            };
                            break;
                    }
                }
                if (fn) {
                    defineProperty(this, options.methodName, {
                        configurable: true,
                        value:fn
                    });
                }
                return fn;
            }
        });
    }
    else if (typeof ctor === $s[202]) {
        err = "Unsupported http method: " + options.httpMethod;
    }
    else {
        err = "Unable to find a constructor named " + options.className;
    }
    if (err) {
        window.setTimeout(function(){
            throw err;
        }, 1);
    }
}
/**
 * This routine overlays Shindig's OSAPI methods to provide support for custom
 * Jive extensions that pre-process response data from the Core API before
 * being passed to user supplied callback functions.
 */
function interceptShindigOsapi() {

    var osapi = $r($s[49]);
    var $newBatch = osapi.newBatch;

    osapi.newBatch = function() {
        var batch = $newBatch.apply(this, arguments);
        osapi.jive.corev3._extendOsapiBatchRequestWithResponseInterceptorSupport(batch);
        return batch;
    };

    function defer(fn) {
        return function () {
            var self = this;
            var args = arguments;
            ext.runWhenReady(function () {
                return fn.apply(self, args);
            });
        }
    }

    function intercept(interceptor, response) {
        if (interceptor.renderSilent === true) {
            return response;
        }
        return interceptor(response) || response;
    }

    osapi.jive = osapi.jive || {};
    osapi.jive.corev3 = osapi.jive.corev3 || {};
    $e(osapi.jive.corev3, {
        _extendOsapiRequestWithResponseInterceptor : function(request, responseInterceptor) {
            request._jive = request._jive || {};
            if (!request._jive.hasOwnProperty($s[614])) {
                if (request.execute._intercepted !== true) {
                    var $execute = request.execute;
                    request.execute = defer(function (callback) {
                        var di = this._jive.responseInterceptor;
                        if (di && di instanceof Function) {
                            var callbackIntercept = function (response) {
                                var args = Array.prototype.slice.call(arguments);
                                args[0] = intercept(di, response) || response;
                                return callback.apply(this, args);
                            };
                            var args = Array.prototype.slice.call(arguments);
                            args[0] = callbackIntercept;
                            return $execute.apply(this, args);
                        }
                        else {
                            return $execute.apply(this, arguments);
                        }
                    });
                    request.executeAs = function (personURI, callback) {
                        this.rpc.runAs = "uri " + personURI;
                        return this.execute(callback);
                    };
                    request.execute._intercepted = true;
                }
            }
            request._jive.responseInterceptor = responseInterceptor;
        },

        _buildRequestWithStaticResponse : function(response) {
            return {
                _jive: {
                    staticResponse:response
                },
                execute: function(callback) {
                    callback(response);
                }
            };
        },

        _buildRequestWithStaticErrorResponse : function(message) {
            return this._buildRequestWithStaticResponse(osapi.jive.core._createErrorResponse({
                message: message
            }));
        },

        _extendOsapiBatchRequestWithResponseInterceptorSupport : function(request) {
            if (request.add._intercepted !== true) {
                var $add = request.add;
                request.add = function(key, request) {
                    this._jive = this._jive || {requestCount:0};
                    this._jive.allRequests = this._jive.allRequests || [];
                    var di = request._jive && request._jive.responseInterceptor;
                    if (di && di instanceof Function) {
                        this._jive.diContainer = this._jive.diContainer || [];
                        var diContainer = this._jive.diContainer;
                        diContainer.push({ key: key, responseInterceptor: di, request: request });
                    }
                    var sr = request._jive && request._jive.staticResponse;
                    if (sr) {
                        this._jive = this._jive || {};
                        this._jive.srContainer = this._jive.srContainer || {};
                        var srContainer = this._jive.srContainer;
                        srContainer[key] = sr;
                    } else {
                        this._jive.requestCount++;
                        this._jive.allRequests.push(request);
                        return $add.apply(this, arguments);
                    }
                };
                request.add._intercepted = true;
            }

            if (request.execute._intercepted !== true) {
                var $execute = request.execute;
                request.execute = defer( function (callback) {
                    if (this._jive && this._jive.diContainer && this._jive.diContainer.length) {
                        var diContainer = this._jive.diContainer;
                        var srContainer = this._jive.srContainer || {};
                        var callbackIntercept = function (response) {
                            var restore = [];
                            for (var i = 0, l = diContainer.length; i < l; ++i) {
                                var key = diContainer[i].key;
                                if (response.hasOwnProperty(key) && response[key]) {
                                    var content = response[key];
                                    if (content) {
                                        var di = diContainer[i].responseInterceptor;
                                        var req = diContainer[i].request;
                                        content = intercept(di, content) || content;
                                        // hide the interceptor on the request to
                                        // prevent it from being called twice
                                        req._jive.responseInterceptor.renderSilent = true;
                                        restore.push(req._jive.responseInterceptor);
                                        response[key] = content;
                                    }
                                }
                            }
                            for (var k in srContainer) {
                                if (srContainer.hasOwnProperty(k)) {
                                    response[k] = srContainer[k];
                                }
                            }
                            var args = Array.prototype.slice.call(arguments);
                            args[0] = response;
                            try {
                                var result = callback.apply(this, args);
                                restoreSilence();
                            }
                            catch (e) {
                                restoreSilence(); // because IE is dumb
                                throw e;
                            }
                            function restoreSilence() {
                                for (i = 0, l = restore.length; i < l; ++i) {
                                    // restore the interceptor on the request so that it
                                    // may be used again
                                    delete restore[i].renderSilent;
                                }
                            }

                            return result;
                        };
                        var args = Array.prototype.slice.call(arguments);
                        args[0] = callbackIntercept;
                        return $execute.apply(this, args);
                    }
                    else if (this._jive && this._jive.srContainer) {
                        // pure static response
                        callback(this._jive.srContainer)
                    }
                    else {
                        $execute.apply(this, arguments)
                    }
                });
                request.executeAs = function (personURI, callback) {
                    var requests = (this._jive && this._jive.allRequests) || [];
                    var i, l = requests.length;
                    for (i = 0; i < l; i++) {
                        var req = requests[i];
                        if (!/^jive\.core\.(get|put|post|delete)$/.test(req.method)) {
                            throw "executeAs() supports batch requests which contain only core API requests: '" + req.method + "' is unsupported";
                        }
                    }
                    var runAs = "uri " + personURI;
                    for (i = 0; i < l; i++) {
                        requests[i].rpc.runAs = runAs;
                    }
                    return this.execute(callback);
                };
                request.execute._intercepted = true;
            }
        }

    });

    function interceptJiveCoreRestCall(propertyName) {
        var fn = osapi.jive.core[propertyName];
        if (typeof fn === $s[202] && fn._intercepted !== true) {
            osapi.jive.core[propertyName] = function () {
                var req = fn.apply(osapi.jive.core, arguments);
                if (req) {
                    osapi.jive.corev3._extendOsapiRequestWithResponseInterceptor(req,
                        function() {
                            return osapi.jive.corev3._interceptData.apply(this, arguments);
                        });
                }
                return req;
            };
            osapi.jive.core[propertyName]._intercepted = true;
        }
    }

    initIntercept = function() {
        if (osapi.jive.core) {
            interceptJiveCoreRestCall($s[5]);
            interceptJiveCoreRestCall($s[6]);
            interceptJiveCoreRestCall($s[23]);
            interceptJiveCoreRestCall($s[91]);
        }
        if (typeof opensocial === $s[103] && opensocial.data && opensocial.data.getDataContext && opensocial.data.getDataContext._intercepted !== true) {
            var $dataContext = opensocial.data.getDataContext;
            opensocial.data.getDataContext = function() {
                var ctx = $dataContext.apply(this, arguments);
                if ( ctx.getDataSet._intercepted !== true ) {
                    $getDataSet = ctx.getDataSet;
                    ctx.getDataSet = function() {
                        return interceptData($getDataSet.apply(this, arguments));
                    };
                    ctx.getDataSet._intercepted = true;
                }
                return ctx;
            };
            opensocial.data.getDataContext._intercepted = true;
        }
    };

    registerOnLoadHandler(initIntercept);

}
/**
 * This function defines an osapi-like extension to communicate with Jive's
 * REST services using jQuery to perform the ajax operations.
 */
function createJQueryRestAdapter (){
    // use jQuery to contact the Jive server

    var ajaxPath = ""; // value replaced when template is rendered
    var osapi = $r($s[49]);

    var dataFilter = function(data, type) {
        return (type === 'json' && data) ? jQuery.trim(data.replace(/^throw [^;]*;/, '')) : data;
    };

    /**
     * @param options.method {String} one of $s[0], $s[1], $s[12] or $s[74]
     * @param options.endpoint {String} the short REST path, e.g.: "users/1234?"
     * @param options.queryParams {Object} map of query params to their values
     * @param options.body {String} body content to send with PUT or POST
     * @constructor
     */
    osapi.Request = function(options) {
        this.options = {
            method: options.method,
            endpoint: options.endpoint,
            ext: options.ext,
            v: options.v
        };
        if (isObjectWithProperties(options.queryParams)) {
            this.options.queryParams = options.queryParams
        }
        if (options.body != null) {
            this.options.body = options.body
        }
    };
    osapi.Request.prototype.execute = function(callback) {
        executeImpl.call(this, null, callback);
    };
    osapi.Request.prototype.executeAs = function(personURI, callback) {
        executeImpl.call(this, "uri " + personURI, callback);
    };
    function executeImpl(runAs, callback) {
        callback = callback || function(){};
        var endpoint = this.options.endpoint + buildQueryParams(this.options.queryParams);
        if (endpoint.charAt(0) == '/') {
            endpoint = endpoint.substring(1);
        }
        var path = this.options.ext
                   ? "ext/" + this.options.ext + "/" + (this.options.version || this.options.v)
                   : "v3";
        var url = [ajaxPath, "api/core", path, endpoint].join("/");
        jQuery.ajax({
            url: url,
            type: this.options.method,
            contentType: this.options.body == null ? $u : "application/json; charset=utf-8",
            data: this.options.body == null ? $u : this.options.body,
            dataType: $s[19],
            dataFilter: dataFilter,
            beforeSend: function(req) {
                if (runAs != null) {
                    req.setRequestHeader($s[451], runAs);
                }
            },
            success: function(data, textStatus, jqXHR) {
                if(data === null) {
                    data = { status : jqXHR.status };
                }
                callback(interceptData(data));
            },
            error: function(xhr) {
                callback(buildErr(500, xhr.status, "An error occurred while contacting the server"));
            }
        });
    }

    /**
     * Object that may contain several Request objects to be executed in a
     * single REST call.
     * @constructor
     */
    osapi.BatchRequest = function() {
        this._requests = [];
    };
    osapi.BatchRequest.prototype.add = function(key, request) {
        if (this._requests == null) {
            throw "BatchRequest is no longer valid";
        }
        this._requests.push({
            key: key,
            request: request.options
        });
    };
    osapi.BatchRequest.prototype.execute = function(callback) {
        executeBatchImpl.call(this, null, callback);
    };
    osapi.BatchRequest.prototype.executeAs = function(personURI, callback) {
        executeBatchImpl.call(this, "uri " + personURI, callback);
    };
    function executeBatchImpl(runAs, callback) {
        if (this._requests == null) {
            throw "BatchRequest is no longer valid";
        }
        var req = this._requests;
        this._requests = null;
        callback = callback || function(){};
        if (req.length == 0) {
            callback({});
            return;
        }
        var url = [ajaxPath, "api/core/v3/executeBatch"].join("/");
        jQuery.ajax({
            url: url,
            type: $s[12],
            contentType: "application/json; charset=utf-8",
            data: JSON.stringify(req),
            dataType: $s[19],
            dataFilter: dataFilter,
            beforeSend: function(req) {
                if (runAs != null) {
                    req.setRequestHeader($s[451], runAs);
                }
            },
            success: function(res) {
                var data = {}, i;
                for (i = 0; i < res.length; i++) {
                    if (res[i].data) {
                        data[res[i].id] = interceptData(res[i].data);
                    } else if (res[i].error) {
                        data[res[i].id] = buildErr(res[i].error.code || 500, res[i].status || 500, res[i].error.message);
                    }
                }
                for (i = 0; i < req.length; i++) {
                    if (!(data.hasOwnProperty(req[i].id) && data[req[i].id])) {
                        data[req[i].id] = buildErr(500, 500, "No data was returned from the server");
                    }
                }
                callback(data);
            },
            error: function(xhr) {
                var res = {};
                try {
                    res = JSON.parse(xhr.responseText) || {};
                } catch (e) {  }
                var data = {};
                var err = buildErr(res.code || 500, xhr.status, res.message || "An error occurred while contacting the server");
                for (var i = 0; i < req.length; i++) {
                    data[req[i].key] = err;
                }
                callback(data);
            }
        });
    }

    /**
     * Creates a new, empty BatchRequest
     * @return {osapi.BatchRequest}
     */
    osapi.newBatch = function() {
        return new osapi.BatchRequest();
    };

    function buildErr(code, status, msg) {
        return {
            error: {
                code: code,
                status: status,
                message: msg
            }
        };
    }

    function buildRequest(method, hasBody, options) {
        var o = {
            method: method,
            endpoint: options.href,
            queryParams: options.params
        };
        if (hasBody) {
            o.body = options.body == null ? "" : JSON.stringify(options.body);
        }
        if (options.ext) {
            o.ext = options.ext;
            o.v = options.v;
        }
        return new osapi.Request(o);
    }

    $r($s[551], function() { return {
        "get": function(options) {
            return buildRequest($s[0], false, options);
        },
        "post": function(options) {
            return buildRequest($s[12], true, options);
        },
        "put": function(options) {
            return buildRequest($s[1], true, options);
        },
        "delete": function(options) {
            return buildRequest($s[74], false, options);
        }
    }});

    osapi.jive.core[$s[5]]._intercepted = true;
    osapi.jive.core[$s[6]]._intercepted = true;
    osapi.jive.core[$s[23]]._intercepted = true;
    osapi.jive.core[$s[91]]._intercepted = true;

    initIntercept = bootstrapRest;
}
/**
 * Get the nested fields for the object that would be created by the passed
 * constructor.
 * @param ctor The constructor function.
 */
function getNestedFields(ctor) {
    var nestedFields = ctor.nestedFields;
    if (!nestedFields) {
        nestedFields = [];
        if (ctor.fields) {
            for (var i = 0; i < ctor.fields.length; i++) {
                if (ctor.fields[i].entityType) {
                    nestedFields.push(ctor.fields[i]);
                }
            }
        }
        ctor.nestedFields = nestedFields;
    }
    return nestedFields;
}

/**
 * Guesses the type of the passed plain object using defined properties
 * @param obj The object to guess the type of.
 * @return {String} A string identifying the most likely entity type.
 */
function duckType(obj) {
    if (typeof obj.content === $s[103] &&
        typeof obj.resources === $s[269] &&
        typeof obj.list === $s[269] &&
        typeof obj.provider === $s[269] &&
        duckType(obj.content) !== $s[178]) {
        return $s[406];
    }
    if (typeof obj.actor === $s[103] &&
        typeof obj.provider === $s[103] &&
        typeof obj.verb === $s[121]) {
        return $s[186];
    }
    if (typeof obj.resources === $s[103]) {
        if (typeof obj.type === $s[121]) {
            return obj.type;
        }
        return $s[93];
    }
    if (typeof obj.list === $s[103] &&
        obj.list instanceof Array) {
        return $s[197];
    }
    return $s[178];
}

/**
 * Utility to intercept returned data and apply the correct types to it.
 * @param data {Object} the data to intercept and decorate with the proper type
 *     hierarchy and convenience methods.
 * @param forceType {String} the type to decorate this data as
 *     hierarchy and convenience methods.
 * @return {Object} the object to replace the original object.
 */
function interceptData(data, forceType) {
    if (typeof data === $s[103]) {
        if(data === null) {
            return {};
        }
        if (data.error) {
            return data;
        }
        if (duckType(data) === $s[406]) {
            data = data.content;
        }
        var ctor = null;
        var init = null;
        if ((forceType && typeRegistry[forceType] && typeRegistry[forceType].ctor && typeof data.resources === $s[103]) ||
            (typeof data.type === $s[121] && typeof data.resources === $s[103])) {
            ctor = (forceType && typeRegistry[forceType] && typeRegistry[forceType].ctor) ||
                (typeRegistry[data.type] && typeRegistry[data.type].ctor);
            function interceptSingle(obj, field, type) {
                if (type === $s[3]) {
                    obj[field] = interceptData(obj[field], $u);
                }
                else if (typeRegistry[type] && typeRegistry[type].ctor) {
                    obj[field] = interceptData(obj[field], type);
                }
            }
            init = function() {
                var nestedFields = getNestedFields(ctor);
                for (var i = 0, l = nestedFields.length; i < l; i++) {
                    var field = nestedFields[i];
                    if (!(field.entityType && this[field.name])) {
                        continue;
                    }
                    if (field.array === true) {
                        var array = this[field.name];
                        if (array.length) {
                            for (var j = 0; j < array.length; j++) {
                                interceptSingle(array, j, field.entityType);
                            }
                        }
                    }
                    else {
                        interceptSingle(this, field.name, field.entityType);
                    }
                }
            }
        }
        else if (duckType(data) == $s[197]) {
            ctor = osapi.jive.corev3.Collection;
            init = function() {
                for (var i = 0, l = this.list.length; i < l; i++) {
                    this.list[i] = interceptData(this.list[i], forceType);
                }
            }
        }
        else if (duckType(data) == $s[186] && typeRegistry.activity && typeRegistry.activity.ctor) {
            ctor = typeRegistry.activity.ctor;
        }
        if (typeof ctor === $s[202]) {
            data = $e(new ctor(), data);
            if (init) {
                init.call(data);
            }
            if (ctor._dynamicGetters) {
                for (var j = 0, k = ctor._dynamicGetters.length; j < k; j++) {
                    var getter = ctor._dynamicGetters[j];
                    var value = getter.fn.call(data);
                    if (typeof value !== $s[269]) {
                        defineProperty(data, getter.name, {value:value});
                    }
                }
            }
        }
    }
    return data;
}

$r("osapi.jive.corev3._interceptData", function() {
    return interceptData;
});
var initIntercept;

/**
 * Decide which rest adapter to use, then wire it up
 */
function bootstrapRest() {
    initIntercept = function(){};
    if ($w.osapi && $w.osapi.newBatch) {
        interceptShindigOsapi(); // the rest adapter is already defined, just intercept the data
    } else if (jQuery && jQuery.ajax) {
        createJQueryRestAdapter(); // no rest adapter is available, use jQuery to build one
    } else {
        window.setTimeout(function() {
            // record the error, but don't break the rest of the page
            throw "Unable to build a REST transport for the Jive Core API v3: jQuery was not found";
        }, 1);
    }
}
bootstrapRest();

/**
 * Universal http request function used by the core v3 JS framework. It ensures
 * that data interceptors are in place before executing the call.
 * @param method {String} $s[5], $s[6], $s[23], or $s[91], case insensitive.
 * @param uri {String} The uri to be invoked
 * @param queryParams {Object} (optional) Query parameters to pass along
 * @param paramFormatter {Function} (optional) function to format query params
 * @param body {Object} (optional) the request body to pass long
 * @return {Request} The Request object that may be executed or
 */
function httpExecute(method, uri, queryParams, paramFormatter, body) {
    var data;
    if (typeof uri === $s[121]) {
        var extension = /\/api\/core\/ext\/([^\/]+)\/(v[^\/]+)\/(.*)/.exec(uri);
        data = extension ? {
            ext: extension[1],
            v: extension[2],
            href: "/" + extension[3]
        } : {
            v: "v3",
            href: trimRef(uri)
        };
        if (queryParams) {
            data.params = queryParams;
            if (paramFormatter) {
                data.href = paramFormatter(queryParams, data.href);
            }
        }
        if (body) {
            data.body = body;
        }
    }
    else {
        data = uri;
    }
    var fn = null;
    if (/^(get|put|post|delete)$/i.test(method)) {
        fn = osapi.jive.core[method.toLowerCase()];
        if (fn._intercepted !== true) {
            initIntercept();
            fn = osapi.jive.core[method.toLowerCase()];
        }
        if (fn._intercepted !== true) {
            window.setTimeout(function() {
                // record the error, but don't break the rest of the page
                throw "Failed to initialize request interceptor!";
            }, 1);
        }
    }
    return fn(data);
}

/**
 * Given a URI for a Core v3 resource, fetches the full resource.
 *
 * Example:
 *
 *     var ref = someDoc.resources.attachments.ref;
 *     osapi.jive.corev3.getObject(ref).execute(function(response) {
 *         // ...
 *     });
 */
$r('osapi.jive.corev3.getObject', function() {
    return function(uri) {
        return httpExecute('get', uri);
    };
});
/**
 * Look for an extension point that needs the be run before any of the static
 * methods or classes are defined.
 */
if (typeof ext.runBeforeDefinitions === $s[202]) {
    ext.runBeforeDefinitions();
}

if (jive && jive.global && jive.global.galaEnabled) {
    apiDef = {
        classes: [],
        globals: {},
        methods: [],
        statics: []
    };
}
/**
 * Defines a static getter method which takes a single options argument
 * @param opts {Object} Options object may contain the following properties:
 *     
 */ /*

osapi.jive.corev3.contents.get = function(opts) { [generated code] }

*/ defineStatic({"optionsInterceptor":$s[524],"endpoint":"/contents/{uri}","queryParams":[$s[94]],"name":$s[668],"httpMethod":$s[0]});
/**
 * Defines a static getter method which takes a single options argument
 * @param opts {Object} Options object may contain the following properties:
 *     
 */ /*

osapi.jive.corev3.contents.getEditable = function(opts) { [generated code] }

*/ defineStatic({"optionsInterceptor":$s[524],"endpoint":"/contents/{uri}/editable","queryParams":[$s[94]],"name":$s[792],"httpMethod":$s[0]});
/**
 * Defines a static getter method which takes a single options argument
 * @param opts {Object} Options object may contain the following properties:
 *     
 */ /*

osapi.jive.corev3.contents.get = function(opts) { [generated code] }

*/ defineStatic({"endpoint":"/contents","queryParams":[$s[95],$s[328],$s[38],$s[27],$s[94]],"name":$s[668],"httpMethod":$s[0]});
/**
 * Defines a static getter method which takes a single options argument
 * @param opts {Object} Options object may contain the following properties:
 *     
 */ /*

osapi.jive.corev3.contents.getPopularContent = function(opts) { [generated code] }

*/ defineStatic({"endpoint":"/contents/popular","queryParams":[$s[94]],"name":$s[841],"httpMethod":$s[0]});
/**
 * Defines a static getter method which takes a single options argument
 * @param opts {Object} Options object may contain the following properties:
 *     
 */ /*

osapi.jive.corev3.contents.getRecommendedContent = function(opts) { [generated code] }

*/ defineStatic({"endpoint":"/contents/recommended","queryParams":[$s[38],$s[94]],"name":$s[872],"httpMethod":$s[0]});
/**
 * Defines a static getter method which takes a single options argument
 * @param opts {Object} Options object may contain the following properties:
 *     
 */ /*

osapi.jive.corev3.contents.getTrendingContent = function(opts) { [generated code] }

*/ defineStatic({"endpoint":"/contents/trending","queryParams":[$s[95],$s[38],$s[94]],"name":$s[849],"httpMethod":$s[0]});
/**
 * Defines a static updater method
 * @param ? {$$paramType} the object to create.
 */ /*

osapi.jive.corev3.contents.create = function(?) { [generated code] }

*/ defineStatic({"endpoint":"/contents","queryParams":[$s[94]],"name":$s[718],"httpMethod":$s[12]});
/**
 * Defines a static getter method which takes a single options argument
 * @param opts {Object} Options object may contain the following properties:
 *     
 */ /*

osapi.jive.corev3.places.get = function(opts) { [generated code] }

*/ defineStatic({"endpoint":"/places","queryParams":[$s[95],$s[328],$s[38],$s[27],$s[94]],"name":$s[653],"httpMethod":$s[0]});
/**
 * Defines a static getter method which takes a single options argument
 * @param opts {Object} Options object may contain the following properties:
 *     
 */ /*

osapi.jive.corev3.places.getRecommendedPlaces = function(opts) { [generated code] }

*/ defineStatic({"endpoint":"/places/recommended","queryParams":[$s[38],$s[94]],"name":$s[851],"httpMethod":$s[0]});
/**
 * Defines a static getter method which takes a single options argument
 * @param opts {Object} Options object may contain the following properties:
 *     
 */ /*

osapi.jive.corev3.places.getTrendingPlaces = function(opts) { [generated code] }

*/ defineStatic({"endpoint":"/places/trending","queryParams":[$s[38],$s[94]],"name":$s[828],"httpMethod":$s[0]});
/**
 * Defines a static getter method which takes a single options argument
 * @param opts {Object} Options object may contain the following properties:
 *     
 */ /*

osapi.jive.corev3.places.get = function(opts) { [generated code] }

*/ defineStatic({"optionsInterceptor":$s[524],"endpoint":"/places/{uri}","queryParams":[$s[94]],"name":$s[653],"httpMethod":$s[0]});
/**
 * Defines a static updater method
 * @param ? {$$paramType} the object to create.
 */ /*

osapi.jive.corev3.places.create = function(?) { [generated code] }

*/ defineStatic({"endpoint":"/places","queryParams":[$s[94]],"name":$s[698],"httpMethod":$s[12]});
/**
 * Defines a static getter method which takes a single options argument
 * @param opts {Object} Options object may contain the following properties:
 *     
 */ /*

osapi.jive.corev3.contents.search = function(opts) { [generated code] }

*/ defineStatic({"endpoint":"/search/contents","queryParams":[$s[95],$s[328],$s[38],$s[27],$s[94],$s[191]],"name":$s[719],"httpMethod":$s[0]});
/**
 * Defines a static getter method which takes a single options argument
 * @param opts {Object} Options object may contain the following properties:
 *     
 */ /*

osapi.jive.corev3.people.search = function(opts) { [generated code] }

*/ defineStatic({"endpoint":"/search/people","queryParams":[$s[95],$s[328],$s[38],$s[27],$s[94]],"name":$s[694],"httpMethod":$s[0]});
/**
 * Defines a static getter method which takes a single options argument
 * @param opts {Object} Options object may contain the following properties:
 *     
 */ /*

osapi.jive.corev3.places.search = function(opts) { [generated code] }

*/ defineStatic({"endpoint":"/search/places","queryParams":[$s[95],$s[328],$s[38],$s[27],$s[94],$s[191]],"name":$s[699],"httpMethod":$s[0]});
/**
 * Defines a static getter method which takes a single options argument
 * @param opts {Object} Options object may contain the following properties:
 *     
 */ /*

osapi.jive.corev3.systemExtProps.get = function(opts) { [generated code] }

*/ defineStatic({"endpoint":"/extprops","queryParams":[$s[94]],"name":$s[773],"httpMethod":$s[0]});
/**
 * Defines a static getter method which takes a single options argument
 * @param opts {Object} Options object may contain the following properties:
 *     
 */ /*

osapi.jive.corev3.systemExtProps.get = function(opts) { [generated code] }

*/ defineStatic({"endpoint":"/extprops/addOn/{addonUUID}","queryParams":[$s[94]],"name":$s[773],"httpMethod":$s[0]});
/**
 * Defines a static updater method
 * @param extprop {$$paramType} the object to create.
 */ /*

osapi.jive.corev3.systemExtProps.create = function(extprop) { [generated code] }

*/ defineStatic({"endpoint":"/extprops","queryParams":[$s[94]],"name":$s[806],"httpMethod":$s[12]});
/**
 * Defines a static updater method
 * @param extprop {$$paramType} the object to create.
 */ /*

osapi.jive.corev3.systemExtProps.create = function(extprop) { [generated code] }

*/ defineStatic({"endpoint":"/extprops/addOn/{addonUUID}","queryParams":[$s[239],$s[94]],"name":$s[806],"httpMethod":$s[12]});
/**
 * Defines a static getter method which takes a single options argument
 * @param opts {Object} Options object may contain the following properties:
 *     
 */ /*

osapi.jive.corev3.search.byExtProp = function(opts) { [generated code] }

*/ defineStatic({"endpoint":"/extprops/{key}/{value}","queryParams":[$s[328],$s[38],$s[94]],"name":$s[744],"httpMethod":$s[0]});
/**
 * Defines a static getter method which takes a single options argument
 * @param opts {Object} Options object may contain the following properties:
 *     
 */ /*

osapi.jive.corev3.search.byExtPropKey = function(opts) { [generated code] }

*/ defineStatic({"endpoint":"/extprops/{key}","queryParams":[$s[328],$s[38],$s[94]],"name":$s[787],"httpMethod":$s[0]});
/**
 * Defines a static updater method
 * @param obj {$$paramType} the object to destroy.
 */ /*

osapi.jive.corev3.systemExtProps.delete = function(obj) { [generated code] }

*/ defineStatic({"endpoint":"/extprops","name":$s[807],"httpMethod":$s[74]});
/**
 * Defines a static updater method
 * @param obj {$$paramType} the object to destroy.
 */ /*

osapi.jive.corev3.systemExtProps.delete = function(obj) { [generated code] }

*/ defineStatic({"endpoint":"/extprops/addOn/{addonUUID}","queryParams":[$s[239]],"name":$s[807],"httpMethod":$s[74]});
/**
 * Defines a static updater method
 * @param section {$$paramType} the object to create.
 */ /*

osapi.jive.corev3.sections.create = function(section) { [generated code] }

*/ defineStatic({"endpoint":"/sections","queryParams":[$s[94]],"name":$s[727],"httpMethod":$s[12]});
/**
 * Defines a static updater method
 * @param obj {$$paramType} the object to destroy.
 */ /*

osapi.jive.corev3.sections.delete = function(obj) { [generated code] }

*/ defineStatic({"optionsInterceptor":$s[524],"endpoint":"/sections/{sectionID}","name":$s[728],"httpMethod":$s[74]});
/**
 * Defines a static getter method which takes a single options argument
 * @param opts {Object} Options object may contain the following properties:
 *     
 */ /*

osapi.jive.corev3.sections.get = function(opts) { [generated code] }

*/ defineStatic({"optionsInterceptor":$s[524],"endpoint":"/sections/{uri}/avatar","queryParams":[$s[26]],"name":$s[678],"httpMethod":$s[0]});
/**
 * Defines a static getter method which takes a single options argument
 * @param opts {Object} Options object may contain the following properties:
 *     
 */ /*

osapi.jive.corev3.sections.get = function(opts) { [generated code] }

*/ defineStatic({"optionsInterceptor":$s[524],"endpoint":"/sections/{uri}","queryParams":[$s[94]],"name":$s[678],"httpMethod":$s[0]});
/**
 * Defines a static getter method which takes a single options argument
 * @param opts {Object} Options object may contain the following properties:
 *     
 */ /*

osapi.jive.corev3.sections.get = function(opts) { [generated code] }

*/ defineStatic({"endpoint":"/sections","queryParams":[$s[94]],"name":$s[678],"httpMethod":$s[0]});
/**
 * Defines a static updater method
 * @param section {osapi.jive.corev3.sections.Section} the object to update.
 */ /*

osapi.jive.corev3.sections.update = function(section) { [generated code] }

*/ defineStatic({"paramType":$s[745],"optionsInterceptor":$s[524],"endpoint":"/sections/{sectionID}","queryParams":[$s[94]],"name":$s[729],"httpMethod":$s[1],"validate":true});
/**
 * Defines a static updater method
 * @param sectionEntry {$$paramType} the object to create.
 */ /*

osapi.jive.corev3.sectionEntries.create = function(sectionEntry) { [generated code] }

*/ defineStatic({"endpoint":"/sections","queryParams":[$s[94]],"name":$s[801],"httpMethod":$s[12]});
/**
 * Defines a static updater method
 * @param obj {$$paramType} the object to destroy.
 */ /*

osapi.jive.corev3.sectionEntries.delete = function(obj) { [generated code] }

*/ defineStatic({"optionsInterceptor":$s[524],"endpoint":"/sections/{sectionID}","name":$s[802],"httpMethod":$s[74]});
/**
 * Defines a static getter method which takes a single options argument
 * @param opts {Object} Options object may contain the following properties:
 *     
 */ /*

osapi.jive.corev3.sectionEntries.get = function(opts) { [generated code] }

*/ defineStatic({"optionsInterceptor":$s[524],"endpoint":"/sections/{uri}/avatar","queryParams":[$s[26]],"name":$s[771],"httpMethod":$s[0]});
/**
 * Defines a static getter method which takes a single options argument
 * @param opts {Object} Options object may contain the following properties:
 *     
 */ /*

osapi.jive.corev3.sectionEntries.get = function(opts) { [generated code] }

*/ defineStatic({"optionsInterceptor":$s[524],"endpoint":"/sections/{uri}","queryParams":[$s[94]],"name":$s[771],"httpMethod":$s[0]});
/**
 * Defines a static getter method which takes a single options argument
 * @param opts {Object} Options object may contain the following properties:
 *     
 */ /*

osapi.jive.corev3.sectionEntries.get = function(opts) { [generated code] }

*/ defineStatic({"endpoint":"/sections","queryParams":[$s[94]],"name":$s[771],"httpMethod":$s[0]});
/**
 * Defines a static updater method
 * @param sectionEntry {osapi.jive.corev3.sections.SectionEntry} the object to update.
 */ /*

osapi.jive.corev3.sectionEntries.update = function(sectionEntry) { [generated code] }

*/ defineStatic({"paramType":$s[804],"optionsInterceptor":$s[524],"endpoint":"/sections/{sectionID}","queryParams":[$s[94]],"name":$s[803],"httpMethod":$s[1],"validate":true});
/**
 * Defines a static getter method which takes a single options argument
 * @param opts {Object} Options object may contain the following properties:
 *     
 */ /*

osapi.jive.corev3.activities.get = function(opts) { [generated code] }

*/ defineStatic({"endpoint":"/activities","queryParams":[$s[95],$s[87],$s[432],$s[38],$s[397],$s[36],$s[94],$s[191]],"name":$s[704],"httpMethod":$s[0]});
/**
 * Defines a static getter method which takes a single options argument
 * @param opts {Object} Options object may contain the following properties:
 *     
 */ /*

osapi.jive.corev3.activities.getFrequentPeople = function(opts) { [generated code] }

*/ defineStatic({"endpoint":"/activities/frequent/people","queryParams":[$s[38],$s[94]],"name":$s[854],"httpMethod":$s[0]});
/**
 * Defines a static updater method
 * @param activity {$$paramType} the object to create.
 */ /*

osapi.jive.corev3.activities.create = function(activity) { [generated code] }

*/ defineStatic({"endpoint":"/activities","queryParams":[$s[94]],"name":$s[748],"httpMethod":$s[12]});
/**
 * Defines a static getter method which takes a single options argument
 * @param opts {Object} Options object may contain the following properties:
 *     
 */ /*

osapi.jive.corev3.activities.getCount = function(opts) { [generated code] }

*/ defineStatic({"endpoint":"/activities/count","queryParams":["max",$s[145],$s[36]],"name":$s[776],"httpMethod":$s[0]});
/**
 * Defines a static getter method which takes a single options argument
 * @param opts {Object} Options object may contain the following properties:
 *     
 */ /*

osapi.jive.corev3.communications.get = function(opts) { [generated code] }

*/ defineStatic({"endpoint":"/streams/connections/activities","queryParams":[$s[95],$s[87],$s[432],$s[38],$s[397],$s[36],$s[94],$s[191]],"name":$s[765],"httpMethod":$s[0]});
/**
 * Defines a static getter method which takes a single options argument
 * @param opts {Object} Options object may contain the following properties:
 *     
 */ /*

osapi.jive.corev3.jiveProperties.get = function(opts) { [generated code] }

*/ defineStatic({"endpoint":"/admin/properties/{name}","queryParams":[$s[94]],"name":$s[768],"httpMethod":$s[0]});
/**
 * Defines a static updater method
 * @param jiveProperty {$$paramType} the object to create.
 */ /*

osapi.jive.corev3.jiveProperties.create = function(jiveProperty) { [generated code] }

*/ defineStatic({"endpoint":"/admin/properties","queryParams":[$s[94]],"name":$s[800],"httpMethod":$s[12]});
/**
 * Defines a static getter method which takes a single options argument
 * @param opts {Object} Options object may contain the following properties:
 *     
 */ /*

osapi.jive.corev3.jiveProperties.get = function(opts) { [generated code] }

*/ defineStatic({"endpoint":"/admin/properties","queryParams":[$s[328],$s[38],$s[94]],"name":$s[768],"httpMethod":$s[0]});
/**
 * Defines a static getter method which takes a single options argument
 * @param opts {Object} Options object may contain the following properties:
 *     
 */ /*

osapi.jive.corev3.admin.placeTopics.getAll = function(opts) { [generated code] }

*/ defineStatic({"endpoint":"/placeTopics","queryParams":[$s[95],$s[328],$s[38],$s[94]],"name":$s[824],"httpMethod":$s[0]});
/**
 * Defines a static updater method
 * @param placeTopic {$$paramType} the object to create.
 */ /*

osapi.jive.corev3.admin.placeTopics.create = function(placeTopic) { [generated code] }

*/ defineStatic({"endpoint":"/placeTopics","queryParams":[$s[94]],"name":$s[822],"httpMethod":$s[12]});
/**
 * Defines a static getter method which takes a single options argument
 * @param opts {Object} Options object may contain the following properties:
 *     
 */ /*

osapi.jive.corev3.admin.placeTopics.get = function(opts) { [generated code] }

*/ defineStatic({"endpoint":"/placeTopics/{placeTopicID}","queryParams":[$s[94]],"name":$s[794],"httpMethod":$s[0]});
/**
 * Defines a static updater method
 * @param placeTopic {osapi.jive.corev3.admin.PlaceTopic} the object to update.
 */ /*

osapi.jive.corev3.admin.placeTopics.update = function(placeTopic) { [generated code] }

*/ defineStatic({"paramType":$s[731],"endpoint":"/placeTopics/{placeTopicID}","queryParams":[$s[94]],"name":$s[825],"httpMethod":$s[1],"validate":true});
/**
 * Defines a static updater method
 * @param obj {$$paramType} the object to destroy.
 */ /*

osapi.jive.corev3.admin.placeTopics.delete = function(obj) { [generated code] }

*/ defineStatic({"endpoint":"/placeTopics/{placeTopicID}","name":$s[823],"httpMethod":$s[74]});
/**
 * Defines a static getter method which takes a single options argument
 * @param opts {Object} Options object may contain the following properties:
 *     
 */ /*

osapi.jive.corev3.plugins.get = function(opts) { [generated code] }

*/ defineStatic({"endpoint":"/admin/plugins","queryParams":[$s[94]],"name":$s[662],"httpMethod":$s[0]});
/**
 * Defines a static getter method which takes a single options argument
 * @param opts {Object} Options object may contain the following properties:
 *     
 */ /*

osapi.jive.corev3.securityGroups.get = function(opts) { [generated code] }

*/ defineStatic({"optionsInterceptor":$s[524],"endpoint":"/securityGroups/{uri}","queryParams":[$s[94]],"name":$s[772],"httpMethod":$s[0]});
/**
 * Defines a static getter method which takes a single options argument
 * @param opts {Object} Options object may contain the following properties:
 *     
 */ /*

osapi.jive.corev3.securityGroups.get = function(opts) { [generated code] }

*/ defineStatic({"endpoint":"/securityGroups/name/{name}","queryParams":[$s[94]],"name":$s[772],"httpMethod":$s[0]});
/**
 * Defines a static updater method
 * @param securityGroup {$$paramType} the object to create.
 */ /*

osapi.jive.corev3.securityGroups.create = function(securityGroup) { [generated code] }

*/ defineStatic({"endpoint":"/securityGroups","queryParams":[$s[94]],"name":$s[805],"httpMethod":$s[12]});
/**
 * Defines a static getter method which takes a single options argument
 * @param opts {Object} Options object may contain the following properties:
 *     
 */ /*

osapi.jive.corev3.securityGroups.getMembers = function(opts) { [generated code] }

*/ defineStatic({"optionsInterceptor":$s[524],"endpoint":"/securityGroups/{securityGroupID}/members","queryParams":[$s[328],$s[38],$s[94]],"name":$s[837],"httpMethod":$s[0]});
/**
 * Defines a static getter method which takes a single options argument
 * @param opts {Object} Options object may contain the following properties:
 *     
 */ /*

osapi.jive.corev3.securityGroups.get = function(opts) { [generated code] }

*/ defineStatic({"endpoint":"/securityGroups","queryParams":[$s[95],$s[328],$s[419],$s[38],$s[27],$s[94]],"name":$s[772],"httpMethod":$s[0]});
/**
 * Defines a static getter method which takes a single options argument
 * @param opts {Object} Options object may contain the following properties:
 *     
 */ /*

osapi.jive.corev3.actions.get = function(opts) { [generated code] }

*/ defineStatic({"endpoint":"/actions","queryParams":[$s[95],$s[87],$s[38],$s[36],$s[94]],"name":$s[657],"httpMethod":$s[0]});
/**
 * Defines a static getter method which takes a single options argument
 * @param opts {Object} Options object may contain the following properties:
 *     
 */ /*

osapi.jive.corev3.actions.get = function(opts) { [generated code] }

*/ defineStatic({"endpoint":"/actions/{id}","queryParams":[$s[94]],"name":$s[657],"httpMethod":$s[0]});
/**
 * Defines a static getter method which takes a single options argument
 * @param opts {Object} Options object may contain the following properties:
 *     
 */ /*

osapi.jive.corev3.actions.getCounts = function(opts) { [generated code] }

*/ defineStatic({"endpoint":"/actions/counts","name":$s[746],"httpMethod":$s[0]});
/**
 * Defines a static getter method which takes a single options argument
 * @param opts {Object} Options object may contain the following properties:
 *     
 */ /*

osapi.jive.corev3.dms.get = function(opts) { [generated code] }

*/ defineStatic({"optionsInterceptor":$s[524],"endpoint":"/dms/{uri}","queryParams":[$s[94]],"name":$s[634],"httpMethod":$s[0]});
/**
 * Defines a static updater method
 * @param dm {$$paramType} the object to create.
 */ /*

osapi.jive.corev3.dms.create = function(dm) { [generated code] }

*/ defineStatic({"endpoint":"/dms","queryParams":[$s[326],$s[263],$s[188],$s[94],$s[179]],"name":$s[647],"httpMethod":$s[12],"overrideParams":{"type":"dm"}});
/**
 * Defines a static updater method
 * @param dm {$$paramType} the object to create.
 */ /*

osapi.jive.corev3.dms.subject = function(dm) { [generated code] }

*/ defineStatic({"optionsInterceptor":$s[524],"endpoint":"/dms/{dmID}/subject","queryParams":[$s[94]],"name":$s[658],"httpMethod":$s[12]});
/**
 * Defines a static getter method which takes a single options argument
 * @param opts {Object} Options object may contain the following properties:
 *     
 */ /*

osapi.jive.corev3.inboxEntries.get = function(opts) { [generated code] }

*/ defineStatic({"endpoint":"/inbox","queryParams":[$s[95],$s[87],$s[432],$s[38],$s[397],$s[36],$s[94],$s[191],$s[245]],"name":$s[740],"httpMethod":$s[0]});
/**
 * Defines a static getter method which takes a single options argument
 * @param opts {Object} Options object may contain the following properties:
 *     
 */ /*

osapi.jive.corev3.inboxEntries.getCounts = function(opts) { [generated code] }

*/ defineStatic({"endpoint":"/inbox/counts","queryParams":[$s[95]],"name":$s[814],"httpMethod":$s[0]});
/**
 * Defines a static updater method
 * @param inboxEntry {$$paramType} the object to create.
 */ /*

osapi.jive.corev3.inboxEntries.allRead = function(inboxEntry) { [generated code] }

*/ defineStatic({"endpoint":"/inbox/allRead","name":$s[793],"httpMethod":$s[12]});
/**
 * Defines a static getter method which takes a single options argument
 * @param opts {Object} Options object may contain the following properties:
 *     
 */ /*

osapi.jive.corev3.mentions.get = function(opts) { [generated code] }

*/ defineStatic({"optionsInterceptor":$s[524],"endpoint":"/mentions/{uri}","queryParams":[$s[94]],"name":$s[670],"httpMethod":$s[0]});
/**
 * Defines a static getter method which takes a single options argument
 * @param opts {Object} Options object may contain the following properties:
 *     
 */ /*

osapi.jive.corev3.shares.get = function(opts) { [generated code] }

*/ defineStatic({"optionsInterceptor":$s[524],"endpoint":"/shares/{uri}","queryParams":[$s[94]],"name":$s[654],"httpMethod":$s[0]});
/**
 * Defines a static updater method
 * @param share {$$paramType} the object to create.
 */ /*

osapi.jive.corev3.shares.create = function(share) { [generated code] }

*/ defineStatic({"endpoint":"/shares","queryParams":[$s[94]],"name":$s[700],"httpMethod":$s[12],"overrideParams":{"type":$s[58]}});
/**
 * Defines a static getter method which takes a single options argument
 * @param opts {Object} Options object may contain the following properties:
 *     
 */ /*

osapi.jive.corev3.announcements.get = function(opts) { [generated code] }

*/ defineStatic({"endpoint":"/announcements","queryParams":[$s[280],$s[328],$s[38],$s[413],$s[94]],"name":$s[749],"httpMethod":$s[0]});
/**
 * Defines a static getter method which takes a single options argument
 * @param opts {Object} Options object may contain the following properties:
 *     
 */ /*

osapi.jive.corev3.announcements.get = function(opts) { [generated code] }

*/ defineStatic({"optionsInterceptor":$s[524],"endpoint":"/announcements/{uri}","queryParams":[$s[94]],"name":$s[749],"httpMethod":$s[0]});
/**
 * Defines a static updater method
 * @param announcement {$$paramType} the object to create.
 */ /*

osapi.jive.corev3.announcements.create = function(announcement) { [generated code] }

*/ defineStatic({"endpoint":"/announcements","queryParams":[$s[47],$s[94]],"name":$s[788],"httpMethod":$s[12],"overrideParams":{"type":$s[391]}});
/**
 * Defines a static getter method which takes a single options argument
 * @param opts {Object} Options object may contain the following properties:
 *     
 */ /*

osapi.jive.corev3.attachments.get = function(opts) { [generated code] }

*/ defineStatic({"optionsInterceptor":$s[524],"endpoint":"/attachments/{uri}","queryParams":[$s[94]],"name":$s[716],"httpMethod":$s[0]});
/**
 * Defines a static getter method which takes a single options argument
 * @param opts {Object} Options object may contain the following properties:
 *     
 */ /*

osapi.jive.corev3.comments.get = function(opts) { [generated code] }

*/ defineStatic({"optionsInterceptor":$s[524],"endpoint":"/comments/{uri}","queryParams":[$s[185],$s[94]],"name":$s[667],"httpMethod":$s[0]});
/**
 * Defines a static getter method which takes a single options argument
 * @param opts {Object} Options object may contain the following properties:
 *     
 */ /*

osapi.jive.corev3.comments.get = function(opts) { [generated code] }

*/ defineStatic({"optionsInterceptor":$s[524],"endpoint":"/comments/{uri}/editable","queryParams":[$s[94]],"name":$s[667],"httpMethod":$s[0]});
/**
 * Defines a static getter method which takes a single options argument
 * @param opts {Object} Options object may contain the following properties:
 *     
 */ /*

osapi.jive.corev3.discussions.get = function(opts) { [generated code] }

*/ defineStatic({"optionsInterceptor":$s[524],"endpoint":"/contents/{uri}","queryParams":[$s[185],$s[94],$s[245]],"name":$s[720],"httpMethod":$s[0]});
/**
 * Defines a static getter method which takes a single options argument
 * @param opts {Object} Options object may contain the following properties:
 *     
 */ /*

osapi.jive.corev3.discussions.getEditable = function(opts) { [generated code] }

*/ defineStatic({"optionsInterceptor":$s[524],"endpoint":"/contents/{uri}/editable","queryParams":[$s[94],$s[245]],"name":$s[817],"httpMethod":$s[0]});
/**
 * Defines a static getter method which takes a single options argument
 * @param opts {Object} Options object may contain the following properties:
 *     
 */ /*

osapi.jive.corev3.discussions.get = function(opts) { [generated code] }

*/ defineStatic({"endpoint":"/contents","queryParams":[$s[95],$s[328],$s[420],$s[38],$s[185],$s[27],$s[94]],"name":$s[720],"httpMethod":$s[0],"overrideParams":{"type":$s[293]}});
/**
 * Defines a static getter method which takes a single options argument
 * @param opts {Object} Options object may contain the following properties:
 *     
 */ /*

osapi.jive.corev3.contents.getUserEntitlements = function(opts) { [generated code] }

*/ defineStatic({"optionsInterceptor":$s[524],"endpoint":"/contents/{contentID}/entitlements/{personID}","queryParams":[$s[94]],"name":$s[857],"httpMethod":$s[0]});
/**
 * Defines a static updater method
 * @param discussion {$$paramType} the object to create.
 */ /*

osapi.jive.corev3.discussions.create = function(discussion) { [generated code] }

*/ defineStatic({"endpoint":"/contents","queryParams":[$s[263],$s[94],$s[179]],"name":$s[766],"httpMethod":$s[12],"overrideParams":{"type":$s[293]}});
/**
 * Defines a static getter method which takes a single options argument
 * @param opts {Object} Options object may contain the following properties:
 *     
 */ /*

osapi.jive.corev3.documents.get = function(opts) { [generated code] }

*/ defineStatic({"optionsInterceptor":$s[524],"endpoint":"/contents/{uri}","queryParams":[$s[185],$s[94],$s[245]],"name":$s[687],"httpMethod":$s[0]});
/**
 * Defines a static getter method which takes a single options argument
 * @param opts {Object} Options object may contain the following properties:
 *     
 */ /*

osapi.jive.corev3.documents.getEditable = function(opts) { [generated code] }

*/ defineStatic({"optionsInterceptor":$s[524],"endpoint":"/contents/{uri}/editable","queryParams":[$s[94],$s[245]],"name":$s[798],"httpMethod":$s[0]});
/**
 * Defines a static getter method which takes a single options argument
 * @param opts {Object} Options object may contain the following properties:
 *     
 */ /*

osapi.jive.corev3.documents.get = function(opts) { [generated code] }

*/ defineStatic({"endpoint":"/contents","queryParams":[$s[95],$s[328],$s[420],$s[38],$s[185],$s[27],$s[94]],"name":$s[687],"httpMethod":$s[0],"overrideParams":{"type":$s[195]}});
/**
 * Defines a static getter method which takes a single options argument
 * @param opts {Object} Options object may contain the following properties:
 *     
 */ /*

osapi.jive.corev3.contents.getUserEntitlements = function(opts) { [generated code] }

*/ defineStatic({"optionsInterceptor":$s[524],"endpoint":"/contents/{contentID}/entitlements/{personID}","queryParams":[$s[94]],"name":$s[857],"httpMethod":$s[0]});
/**
 * Defines a static updater method
 * @param document {$$paramType} the object to create.
 */ /*

osapi.jive.corev3.documents.create = function(document) { [generated code] }

*/ defineStatic({"endpoint":"/contents","queryParams":[$s[263],$s[94],$s[179]],"name":$s[736],"httpMethod":$s[12],"overrideParams":{"type":$s[195]}});
/**
 * Defines a static getter method which takes a single options argument
 * @param opts {Object} Options object may contain the following properties:
 *     
 */ /*

osapi.jive.corev3.events.get = function(opts) { [generated code] }

*/ defineStatic({"optionsInterceptor":$s[524],"endpoint":"/contents/{uri}","queryParams":[$s[185],$s[94],$s[245]],"name":$s[648],"httpMethod":$s[0]});
/**
 * Defines a static getter method which takes a single options argument
 * @param opts {Object} Options object may contain the following properties:
 *     
 */ /*

osapi.jive.corev3.events.getEditable = function(opts) { [generated code] }

*/ defineStatic({"optionsInterceptor":$s[524],"endpoint":"/contents/{uri}/editable","queryParams":[$s[94],$s[245]],"name":$s[767],"httpMethod":$s[0]});
/**
 * Defines a static getter method which takes a single options argument
 * @param opts {Object} Options object may contain the following properties:
 *     
 */ /*

osapi.jive.corev3.events.get = function(opts) { [generated code] }

*/ defineStatic({"endpoint":"/contents","queryParams":[$s[95],$s[328],$s[420],$s[38],$s[185],$s[27],$s[94]],"name":$s[648],"httpMethod":$s[0],"overrideParams":{"type":$s[40]}});
/**
 * Defines a static getter method which takes a single options argument
 * @param opts {Object} Options object may contain the following properties:
 *     
 */ /*

osapi.jive.corev3.contents.getUserEntitlements = function(opts) { [generated code] }

*/ defineStatic({"optionsInterceptor":$s[524],"endpoint":"/contents/{contentID}/entitlements/{personID}","queryParams":[$s[94]],"name":$s[857],"httpMethod":$s[0]});
/**
 * Defines a static updater method
 * @param event {$$paramType} the object to create.
 */ /*

osapi.jive.corev3.events.create = function(event) { [generated code] }

*/ defineStatic({"endpoint":"/contents","queryParams":[$s[263],$s[94],$s[179]],"name":$s[688],"httpMethod":$s[12],"overrideParams":{"type":$s[40]}});
/**
 * Defines a static getter method which takes a single options argument
 * @param opts {Object} Options object may contain the following properties:
 *     
 */ /*

osapi.jive.corev3.extStreamActivities.get = function(opts) { [generated code] }

*/ defineStatic({"optionsInterceptor":$s[524],"endpoint":"/contents/{uri}","queryParams":[$s[185],$s[94],$s[245]],"name":$s[819],"httpMethod":$s[0]});
/**
 * Defines a static getter method which takes a single options argument
 * @param opts {Object} Options object may contain the following properties:
 *     
 */ /*

osapi.jive.corev3.extStreamActivities.getEditable = function(opts) { [generated code] }

*/ defineStatic({"optionsInterceptor":$s[524],"endpoint":"/contents/{uri}/editable","queryParams":[$s[94],$s[245]],"name":$s[880],"httpMethod":$s[0]});
/**
 * Defines a static getter method which takes a single options argument
 * @param opts {Object} Options object may contain the following properties:
 *     
 */ /*

osapi.jive.corev3.extStreamActivities.get = function(opts) { [generated code] }

*/ defineStatic({"endpoint":"/contents","queryParams":[$s[95],$s[328],$s[420],$s[38],$s[185],$s[27],$s[94]],"name":$s[819],"httpMethod":$s[0],"overrideParams":{"type":$s[587]}});
/**
 * Defines a static getter method which takes a single options argument
 * @param opts {Object} Options object may contain the following properties:
 *     
 */ /*

osapi.jive.corev3.contents.getUserEntitlements = function(opts) { [generated code] }

*/ defineStatic({"optionsInterceptor":$s[524],"endpoint":"/contents/{contentID}/entitlements/{personID}","queryParams":[$s[94]],"name":$s[857],"httpMethod":$s[0]});
/**
 * Defines a static updater method
 * @param extStreamActivity {$$paramType} the object to create.
 */ /*

osapi.jive.corev3.extStreamActivities.create = function(extStreamActivity) { [generated code] }

*/ defineStatic({"endpoint":"/contents","queryParams":[$s[263],$s[94],$s[179]],"name":$s[842],"httpMethod":$s[12],"overrideParams":{"type":$s[587]}});
/**
 * Defines a static getter method which takes a single options argument
 * @param opts {Object} Options object may contain the following properties:
 *     
 */ /*

osapi.jive.corev3.favorites.get = function(opts) { [generated code] }

*/ defineStatic({"optionsInterceptor":$s[524],"endpoint":"/contents/{uri}","queryParams":[$s[185],$s[94],$s[245]],"name":$s[689],"httpMethod":$s[0]});
/**
 * Defines a static getter method which takes a single options argument
 * @param opts {Object} Options object may contain the following properties:
 *     
 */ /*

osapi.jive.corev3.favorites.getEditable = function(opts) { [generated code] }

*/ defineStatic({"optionsInterceptor":$s[524],"endpoint":"/contents/{uri}/editable","queryParams":[$s[94],$s[245]],"name":$s[799],"httpMethod":$s[0]});
/**
 * Defines a static getter method which takes a single options argument
 * @param opts {Object} Options object may contain the following properties:
 *     
 */ /*

osapi.jive.corev3.favorites.get = function(opts) { [generated code] }

*/ defineStatic({"endpoint":"/contents","queryParams":[$s[95],$s[328],$s[420],$s[38],$s[185],$s[27],$s[94]],"name":$s[689],"httpMethod":$s[0],"overrideParams":{"type":$s[199]}});
/**
 * Defines a static getter method which takes a single options argument
 * @param opts {Object} Options object may contain the following properties:
 *     
 */ /*

osapi.jive.corev3.contents.getUserEntitlements = function(opts) { [generated code] }

*/ defineStatic({"optionsInterceptor":$s[524],"endpoint":"/contents/{contentID}/entitlements/{personID}","queryParams":[$s[94]],"name":$s[857],"httpMethod":$s[0]});
/**
 * Defines a static updater method
 * @param favorite {$$paramType} the object to create.
 */ /*

osapi.jive.corev3.favorites.create = function(favorite) { [generated code] }

*/ defineStatic({"endpoint":"/contents","queryParams":[$s[263],$s[94],$s[179]],"name":$s[737],"httpMethod":$s[12],"overrideParams":{"type":$s[199]}});
/**
 * Defines a static getter method which takes a single options argument
 * @param opts {Object} Options object may contain the following properties:
 *     
 */ /*

osapi.jive.corev3.ideas.get = function(opts) { [generated code] }

*/ defineStatic({"optionsInterceptor":$s[524],"endpoint":"/contents/{uri}","queryParams":[$s[185],$s[94],$s[245]],"name":$s[641],"httpMethod":$s[0]});
/**
 * Defines a static getter method which takes a single options argument
 * @param opts {Object} Options object may contain the following properties:
 *     
 */ /*

osapi.jive.corev3.ideas.getEditable = function(opts) { [generated code] }

*/ defineStatic({"optionsInterceptor":$s[524],"endpoint":"/contents/{uri}/editable","queryParams":[$s[94],$s[245]],"name":$s[753],"httpMethod":$s[0]});
/**
 * Defines a static getter method which takes a single options argument
 * @param opts {Object} Options object may contain the following properties:
 *     
 */ /*

osapi.jive.corev3.ideas.get = function(opts) { [generated code] }

*/ defineStatic({"endpoint":"/contents","queryParams":[$s[95],$s[328],$s[420],$s[38],$s[185],$s[27],$s[94]],"name":$s[641],"httpMethod":$s[0],"overrideParams":{"type":$s[17]}});
/**
 * Defines a static getter method which takes a single options argument
 * @param opts {Object} Options object may contain the following properties:
 *     
 */ /*

osapi.jive.corev3.contents.getUserEntitlements = function(opts) { [generated code] }

*/ defineStatic({"optionsInterceptor":$s[524],"endpoint":"/contents/{contentID}/entitlements/{personID}","queryParams":[$s[94]],"name":$s[857],"httpMethod":$s[0]});
/**
 * Defines a static updater method
 * @param idea {$$paramType} the object to create.
 */ /*

osapi.jive.corev3.ideas.create = function(idea) { [generated code] }

*/ defineStatic({"endpoint":"/contents","queryParams":[$s[263],$s[94],$s[179]],"name":$s[669],"httpMethod":$s[12],"overrideParams":{"type":$s[17]}});
/**
 * Defines a static getter method which takes a single options argument
 * @param opts {Object} Options object may contain the following properties:
 *     
 */ /*

osapi.jive.corev3.polls.get = function(opts) { [generated code] }

*/ defineStatic({"optionsInterceptor":$s[524],"endpoint":"/contents/{uri}","queryParams":[$s[185],$s[94],$s[245]],"name":$s[643],"httpMethod":$s[0]});
/**
 * Defines a static getter method which takes a single options argument
 * @param opts {Object} Options object may contain the following properties:
 *     
 */ /*

osapi.jive.corev3.polls.getEditable = function(opts) { [generated code] }

*/ defineStatic({"optionsInterceptor":$s[524],"endpoint":"/contents/{uri}/editable","queryParams":[$s[94],$s[245]],"name":$s[758],"httpMethod":$s[0]});
/**
 * Defines a static getter method which takes a single options argument
 * @param opts {Object} Options object may contain the following properties:
 *     
 */ /*

osapi.jive.corev3.polls.get = function(opts) { [generated code] }

*/ defineStatic({"endpoint":"/contents","queryParams":[$s[95],$s[328],$s[420],$s[38],$s[185],$s[27],$s[94]],"name":$s[643],"httpMethod":$s[0],"overrideParams":{"type":$s[22]}});
/**
 * Defines a static getter method which takes a single options argument
 * @param opts {Object} Options object may contain the following properties:
 *     
 */ /*

osapi.jive.corev3.contents.getUserEntitlements = function(opts) { [generated code] }

*/ defineStatic({"optionsInterceptor":$s[524],"endpoint":"/contents/{contentID}/entitlements/{personID}","queryParams":[$s[94]],"name":$s[857],"httpMethod":$s[0]});
/**
 * Defines a static updater method
 * @param poll {$$paramType} the object to create.
 */ /*

osapi.jive.corev3.polls.create = function(poll) { [generated code] }

*/ defineStatic({"endpoint":"/contents","queryParams":[$s[263],$s[94],$s[179]],"name":$s[675],"httpMethod":$s[12],"overrideParams":{"type":$s[22]}});
/**
 * Defines a static getter method which takes a single options argument
 * @param opts {Object} Options object may contain the following properties:
 *     
 */ /*

osapi.jive.corev3.posts.get = function(opts) { [generated code] }

*/ defineStatic({"optionsInterceptor":$s[524],"endpoint":"/contents/{uri}","queryParams":[$s[185],$s[94],$s[245]],"name":$s[644],"httpMethod":$s[0]});
/**
 * Defines a static getter method which takes a single options argument
 * @param opts {Object} Options object may contain the following properties:
 *     
 */ /*

osapi.jive.corev3.posts.getEditable = function(opts) { [generated code] }

*/ defineStatic({"optionsInterceptor":$s[524],"endpoint":"/contents/{uri}/editable","queryParams":[$s[94],$s[245]],"name":$s[759],"httpMethod":$s[0]});
/**
 * Defines a static getter method which takes a single options argument
 * @param opts {Object} Options object may contain the following properties:
 *     
 */ /*

osapi.jive.corev3.posts.get = function(opts) { [generated code] }

*/ defineStatic({"endpoint":"/contents","queryParams":[$s[95],$s[328],$s[420],$s[38],$s[185],$s[27],$s[94]],"name":$s[644],"httpMethod":$s[0],"overrideParams":{"type":$s[23]}});
/**
 * Defines a static getter method which takes a single options argument
 * @param opts {Object} Options object may contain the following properties:
 *     
 */ /*

osapi.jive.corev3.contents.getUserEntitlements = function(opts) { [generated code] }

*/ defineStatic({"optionsInterceptor":$s[524],"endpoint":"/contents/{contentID}/entitlements/{personID}","queryParams":[$s[94]],"name":$s[857],"httpMethod":$s[0]});
/**
 * Defines a static updater method
 * @param post {$$paramType} the object to create.
 */ /*

osapi.jive.corev3.posts.create = function(post) { [generated code] }

*/ defineStatic({"endpoint":"/contents","queryParams":[$s[263],$s[94],$s[179]],"name":$s[676],"httpMethod":$s[12],"overrideParams":{"type":$s[23]}});
/**
 * Defines a static getter method which takes a single options argument
 * @param opts {Object} Options object may contain the following properties:
 *     
 */ /*

osapi.jive.corev3.tasks.get = function(opts) { [generated code] }

*/ defineStatic({"optionsInterceptor":$s[524],"endpoint":"/contents/{uri}","queryParams":[$s[185],$s[94],$s[245]],"name":$s[645],"httpMethod":$s[0]});
/**
 * Defines a static getter method which takes a single options argument
 * @param opts {Object} Options object may contain the following properties:
 *     
 */ /*

osapi.jive.corev3.tasks.getEditable = function(opts) { [generated code] }

*/ defineStatic({"optionsInterceptor":$s[524],"endpoint":"/contents/{uri}/editable","queryParams":[$s[94],$s[245]],"name":$s[761],"httpMethod":$s[0]});
/**
 * Defines a static getter method which takes a single options argument
 * @param opts {Object} Options object may contain the following properties:
 *     
 */ /*

osapi.jive.corev3.tasks.get = function(opts) { [generated code] }

*/ defineStatic({"endpoint":"/contents","queryParams":[$s[95],$s[328],$s[420],$s[38],$s[185],$s[27],$s[94]],"name":$s[645],"httpMethod":$s[0],"overrideParams":{"type":$s[29]}});
/**
 * Defines a static getter method which takes a single options argument
 * @param opts {Object} Options object may contain the following properties:
 *     
 */ /*

osapi.jive.corev3.contents.getUserEntitlements = function(opts) { [generated code] }

*/ defineStatic({"optionsInterceptor":$s[524],"endpoint":"/contents/{contentID}/entitlements/{personID}","queryParams":[$s[94]],"name":$s[857],"httpMethod":$s[0]});
/**
 * Defines a static updater method
 * @param task {$$paramType} the object to create.
 */ /*

osapi.jive.corev3.tasks.create = function(task) { [generated code] }

*/ defineStatic({"endpoint":"/contents","queryParams":[$s[263],$s[94],$s[179]],"name":$s[679],"httpMethod":$s[12],"overrideParams":{"type":$s[29]}});
/**
 * Defines a static getter method which takes a single options argument
 * @param opts {Object} Options object may contain the following properties:
 *     
 */ /*

osapi.jive.corev3.urls.get = function(opts) { [generated code] }

*/ defineStatic({"optionsInterceptor":$s[524],"endpoint":"/urls/{uri}","queryParams":[$s[94]],"name":$s[638],"httpMethod":$s[0]});
/**
 * Defines a static getter method which takes a single options argument
 * @param opts {Object} Options object may contain the following properties:
 *     
 */ /*

osapi.jive.corev3.messages.get = function(opts) { [generated code] }

*/ defineStatic({"optionsInterceptor":$s[524],"endpoint":"/messages/{uri}/editable","queryParams":[$s[94]],"name":$s[671],"httpMethod":$s[0]});
/**
 * Defines a static getter method which takes a single options argument
 * @param opts {Object} Options object may contain the following properties:
 *     
 */ /*

osapi.jive.corev3.messages.get = function(opts) { [generated code] }

*/ defineStatic({"optionsInterceptor":$s[524],"endpoint":"/messages/{uri}","queryParams":[$s[185],$s[94]],"name":$s[671],"httpMethod":$s[0]});
/**
 * Defines a static getter method which takes a single options argument
 * @param opts {Object} Options object may contain the following properties:
 *     
 */ /*

osapi.jive.corev3.outcomes.get = function(opts) { [generated code] }

*/ defineStatic({"endpoint":"/outcomes","queryParams":[$s[328],$s[97],$s[38],$s[147],$s[94]],"name":$s[672],"httpMethod":$s[0]});
/**
 * Defines a static getter method which takes a single options argument
 * @param opts {Object} Options object may contain the following properties:
 *     
 */ /*

osapi.jive.corev3.outcomes.get = function(opts) { [generated code] }

*/ defineStatic({"optionsInterceptor":$s[524],"endpoint":"/outcomes/{uri}","queryParams":[$s[94]],"name":$s[672],"httpMethod":$s[0]});
/**
 * Defines a static getter method which takes a single options argument
 * @param opts {Object} Options object may contain the following properties:
 *     
 */ /*

osapi.jive.corev3.slides.get = function(opts) { [generated code] }

*/ defineStatic({"endpoint":"/slides","queryParams":[$s[328],$s[38],$s[147],$s[94]],"name":$s[655],"httpMethod":$s[0]});
/**
 * Defines a static getter method which takes a single options argument
 * @param opts {Object} Options object may contain the following properties:
 *     
 */ /*

osapi.jive.corev3.slides.get = function(opts) { [generated code] }

*/ defineStatic({"optionsInterceptor":$s[524],"endpoint":"/slides/{uri}","queryParams":[$s[94]],"name":$s[655],"httpMethod":$s[0]});
/**
 * Defines a static updater method
 * @param slide {$$paramType} the object to create.
 */ /*

osapi.jive.corev3.slides.create = function(slide) { [generated code] }

*/ defineStatic({"endpoint":"/slides","queryParams":[$s[94]],"name":$s[701],"httpMethod":$s[12],"overrideParams":{"type":$s[60]}});
/**
 * Defines a static getter method which takes a single options argument
 * @param opts {Object} Options object may contain the following properties:
 *     
 */ /*

osapi.jive.corev3.streamEntries.get = function(opts) { [generated code] }

*/ defineStatic({"optionsInterceptor":$s[524],"endpoint":"/streamEntries/{uri}","queryParams":[$s[94]],"name":$s[760],"httpMethod":$s[0]});
/**
 * Defines a static getter method which takes a single options argument
 * @param opts {Object} Options object may contain the following properties:
 *     
 */ /*

osapi.jive.corev3.metadata.getAvailableLocaleMetadata = function(opts) { [generated code] }

*/ defineStatic({"endpoint":"/metadata/locales/available","name":$s[902],"httpMethod":$s[0]});
/**
 * Defines a static getter method which takes a single options argument
 * @param opts {Object} Options object may contain the following properties:
 *     
 */ /*

osapi.jive.corev3.metadata.getSupportedLocaleMetadata = function(opts) { [generated code] }

*/ defineStatic({"endpoint":"/metadata/locales/supported","name":$s[903],"httpMethod":$s[0]});
/**
 * Defines a static getter method which takes a single options argument
 * @param opts {Object} Options object may contain the following properties:
 *     
 */ /*

osapi.jive.corev3.metadata.getAllObjectMetadata = function(opts) { [generated code] }

*/ defineStatic({"endpoint":"/metadata/objects/@all","queryParams":[$s[94]],"name":$s[867],"httpMethod":$s[0]});
/**
 * Defines a static getter method which takes a single options argument
 * @param opts {Object} Options object may contain the following properties:
 *     
 */ /*

osapi.jive.corev3.metadata.getFieldMetadata = function(opts) { [generated code] }

*/ defineStatic({"endpoint":"/metadata/objects/{name}/{field}","name":$s[834],"httpMethod":$s[0]});
/**
 * Defines a static getter method which takes a single options argument
 * @param opts {Object} Options object may contain the following properties:
 *     
 */ /*

osapi.jive.corev3.metadata.getObjectMetadata = function(opts) { [generated code] }

*/ defineStatic({"endpoint":"/metadata/objects/{name}","name":$s[843],"httpMethod":$s[0]});
/**
 * Defines a static getter method which takes a single options argument
 * @param opts {Object} Options object may contain the following properties:
 *     
 */ /*

osapi.jive.corev3.metadata.getFieldMetadataValues = function(opts) { [generated code] }

*/ defineStatic({"endpoint":"/metadata/objects/{name}/{field}/values","queryParams":[$s[95],$s[38],$s[421],$s[431]],"name":$s[883],"httpMethod":$s[0]});
/**
 * Defines a static getter method which takes a single options argument
 * @param opts {Object} Options object may contain the following properties:
 *     
 */ /*

osapi.jive.corev3.metadata.getObjectMetadataValues = function(opts) { [generated code] }

*/ defineStatic({"endpoint":"/metadata/objects/{name}/values","queryParams":[$s[95],$s[38],$s[421],$s[94],$s[431]],"name":$s[890],"httpMethod":$s[0]});
/**
 * Defines a static getter method which takes a single options argument
 * @param opts {Object} Options object may contain the following properties:
 *     
 */ /*

osapi.jive.corev3.metadata.getObjectTypes = function(opts) { [generated code] }

*/ defineStatic({"endpoint":"/metadata/objects","name":$s[820],"httpMethod":$s[0]});
/**
 * Defines a static getter method which takes a single options argument
 * @param opts {Object} Options object may contain the following properties:
 *     
 */ /*

osapi.jive.corev3.metadata.getPropertyMetadata = function(opts) { [generated code] }

*/ defineStatic({"endpoint":"/metadata/properties/{name}","name":$s[858],"httpMethod":$s[0]});
/**
 * Defines a static getter method which takes a single options argument
 * @param opts {Object} Options object may contain the following properties:
 *     
 */ /*

osapi.jive.corev3.metadata.getAllPropertyMetadata = function(opts) { [generated code] }

*/ defineStatic({"endpoint":"/metadata/properties","name":$s[881],"httpMethod":$s[0]});
/**
 * Defines a static getter method which takes a single options argument
 * @param opts {Object} Options object may contain the following properties:
 *     
 */ /*

osapi.jive.corev3.metadata.getAllTimeZoneMetadata = function(opts) { [generated code] }

*/ defineStatic({"endpoint":"/metadata/timezones","name":$s[882],"httpMethod":$s[0]});
/**
 * Defines a static getter method which takes a single options argument
 * @param opts {Object} Options object may contain the following properties:
 *     
 */ /*

osapi.jive.corev3.publications.get = function(opts) { [generated code] }

*/ defineStatic({"optionsInterceptor":$s[524],"endpoint":"/publications/{uri}","queryParams":[$s[94]],"name":$s[743],"httpMethod":$s[0]});
/**
 * Defines a static updater method
 * @param publication {$$paramType} the object to create.
 */ /*

osapi.jive.corev3.publications.create = function(publication) { [generated code] }

*/ defineStatic({"endpoint":"/publications","queryParams":[$s[94]],"name":$s[784],"httpMethod":$s[12]});
/**
 * Defines a static getter method which takes a single options argument
 * @param opts {Object} Options object may contain the following properties:
 *     
 */ /*

osapi.jive.corev3.publications.get = function(opts) { [generated code] }

*/ defineStatic({"endpoint":"/publications","queryParams":[$s[328],$s[38],$s[94]],"name":$s[743],"httpMethod":$s[0]});
/**
 * Defines a static getter method which takes a single options argument
 * @param opts {Object} Options object may contain the following properties:
 *     
 */ /*

osapi.jive.corev3.publications.subscribers = function(opts) { [generated code] }

*/ defineStatic({"optionsInterceptor":$s[524],"endpoint":"/publications/{publicationID}/subscriptions/{subscriptionID}/subscribers","queryParams":[$s[328],$s[38],$s[94]],"name":$s[829],"httpMethod":$s[0]});
/**
 * Defines a static updater method
 * @param publication {osapi.jive.corev3.activities.Publication} the object to update.
 */ /*

osapi.jive.corev3.publications.update = function(publication) { [generated code] }

*/ defineStatic({"paramType":$s[811],"optionsInterceptor":$s[524],"endpoint":"/publications/{publicationID}","queryParams":[$s[94]],"name":$s[786],"httpMethod":$s[1],"validate":true});
/**
 * Defines a static updater method
 * @param obj {$$paramType} the object to destroy.
 */ /*

osapi.jive.corev3.publications.delete = function(obj) { [generated code] }

*/ defineStatic({"optionsInterceptor":$s[524],"endpoint":"/publications/{publicationID}","name":$s[785],"httpMethod":$s[74]});
/**
 * Defines a static getter method which takes a single options argument
 * @param opts {Object} Options object may contain the following properties:
 *     
 */ /*

osapi.jive.corev3.invites.get = function(opts) { [generated code] }

*/ defineStatic({"optionsInterceptor":$s[524],"endpoint":"/invites/{uri}","queryParams":[$s[94]],"name":$s[659],"httpMethod":$s[0]});
/**
 * Defines a static updater method
 * @param invite {$$paramType} the object to create.
 */ /*

osapi.jive.corev3.invites.create = function(invite) { [generated code] }

*/ defineStatic({"optionsInterceptor":$s[526],"endpoint":"/invites/places/{placeURI}","queryParams":[$s[94]],"name":$s[711],"httpMethod":$s[12]});
/**
 * Defines a static getter method which takes a single options argument
 * @param opts {Object} Options object may contain the following properties:
 *     
 */ /*

osapi.jive.corev3.members.getMembersByGroup = function(opts) { [generated code] }

*/ defineStatic({"optionsInterceptor":$s[524],"endpoint":"/members/places/{placeID}","queryParams":[$s[95],$s[328],$s[38],$s[63],$s[94]],"name":$s[833],"httpMethod":$s[0]});
/**
 * Defines a static getter method which takes a single options argument
 * @param opts {Object} Options object may contain the following properties:
 *     
 */ /*

osapi.jive.corev3.members.get = function(opts) { [generated code] }

*/ defineStatic({"optionsInterceptor":$s[524],"endpoint":"/members/{uri}","queryParams":[$s[94]],"name":$s[660],"httpMethod":$s[0]});
/**
 * Defines a static updater method
 * @param member {$$paramType} the object to create.
 */ /*

osapi.jive.corev3.members.create = function(member) { [generated code] }

*/ defineStatic({"optionsInterceptor":$s[526],"endpoint":"/members/places/{placeURI}","queryParams":[$s[263],$s[94]],"name":$s[712],"httpMethod":$s[12]});
/**
 * Defines a static getter method which takes a single options argument
 * @param opts {Object} Options object may contain the following properties:
 *     
 */ /*

osapi.jive.corev3.blogs.get = function(opts) { [generated code] }

*/ defineStatic({"endpoint":"/places","queryParams":[$s[95],$s[328],$s[38],$s[27],$s[94]],"name":$s[640],"httpMethod":$s[0],"overrideParams":{"type":$s[13]}});
/**
 * Defines a static getter method which takes a single options argument
 * @param opts {Object} Options object may contain the following properties:
 *     
 */ /*

osapi.jive.corev3.places.getPlacesRelatedToContent = function(opts) { [generated code] }

*/ defineStatic({"endpoint":"/places/relatedtocontent","queryParams":[$s[328],$s[244],$s[38],$s[27],$s[94]],"name":$s[892],"httpMethod":$s[0]});
/**
 * Defines a static getter method which takes a single options argument
 * @param opts {Object} Options object may contain the following properties:
 *     
 */ /*

osapi.jive.corev3.blogs.get = function(opts) { [generated code] }

*/ defineStatic({"optionsInterceptor":$s[524],"endpoint":"/places/{uri}","queryParams":[$s[94]],"name":$s[640],"httpMethod":$s[0]});
/**
 * Defines a static getter method which takes a single options argument
 * @param opts {Object} Options object may contain the following properties:
 *     
 */ /*

osapi.jive.corev3.places.getRootSpace = function(opts) { [generated code] }

*/ defineStatic({"endpoint":"/places/root","queryParams":[$s[94]],"name":$s[783],"httpMethod":$s[0]});
/**
 * Defines a static getter method which takes a single options argument
 * @param opts {Object} Options object may contain the following properties:
 *     
 */ /*

osapi.jive.corev3.places.getStorageContainer = function(opts) { [generated code] }

*/ defineStatic({"endpoint":"/places/{placeID}/storage","queryParams":[$s[94]],"name":$s[846],"httpMethod":$s[0]});
/**
 * Defines a static updater method
 * @param blog {$$paramType} the object to create.
 */ /*

osapi.jive.corev3.blogs.create = function(blog) { [generated code] }

*/ defineStatic({"endpoint":"/places/{uri}/contents","queryParams":[$s[263],$s[94],$s[179]],"name":$s[666],"httpMethod":$s[12],"overrideParams":{"type":$s[13]}});
/**
 * Defines a static updater method
 * @param blog {$$paramType} the object to create.
 */ /*

osapi.jive.corev3.blogs.create = function(blog) { [generated code] }

*/ defineStatic({"endpoint":"/places","queryParams":[$s[263],$s[94],$s[179]],"name":$s[666],"httpMethod":$s[12],"overrideParams":{"type":$s[13]}});
/**
 * Defines a static getter method which takes a single options argument
 * @param opts {Object} Options object may contain the following properties:
 *     
 */ /*

osapi.jive.corev3.places.getPlacesRelatedToContentCount = function(opts) { [generated code] }

*/ defineStatic({"endpoint":"/places/relatedtocontent/count","queryParams":[$s[244]],"name":$s[914],"httpMethod":$s[0]});
/**
 * Defines a static getter method which takes a single options argument
 * @param opts {Object} Options object may contain the following properties:
 *     
 */ /*

osapi.jive.corev3.carousels.get = function(opts) { [generated code] }

*/ defineStatic({"endpoint":"/places","queryParams":[$s[95],$s[328],$s[38],$s[27],$s[94]],"name":$s[680],"httpMethod":$s[0],"overrideParams":{"type":$s[189]}});
/**
 * Defines a static getter method which takes a single options argument
 * @param opts {Object} Options object may contain the following properties:
 *     
 */ /*

osapi.jive.corev3.places.getPlacesRelatedToContent = function(opts) { [generated code] }

*/ defineStatic({"endpoint":"/places/relatedtocontent","queryParams":[$s[328],$s[244],$s[38],$s[27],$s[94]],"name":$s[892],"httpMethod":$s[0]});
/**
 * Defines a static getter method which takes a single options argument
 * @param opts {Object} Options object may contain the following properties:
 *     
 */ /*

osapi.jive.corev3.carousels.get = function(opts) { [generated code] }

*/ defineStatic({"optionsInterceptor":$s[524],"endpoint":"/places/{uri}","queryParams":[$s[94]],"name":$s[680],"httpMethod":$s[0]});
/**
 * Defines a static getter method which takes a single options argument
 * @param opts {Object} Options object may contain the following properties:
 *     
 */ /*

osapi.jive.corev3.places.getRootSpace = function(opts) { [generated code] }

*/ defineStatic({"endpoint":"/places/root","queryParams":[$s[94]],"name":$s[783],"httpMethod":$s[0]});
/**
 * Defines a static getter method which takes a single options argument
 * @param opts {Object} Options object may contain the following properties:
 *     
 */ /*

osapi.jive.corev3.places.getStorageContainer = function(opts) { [generated code] }

*/ defineStatic({"endpoint":"/places/{placeID}/storage","queryParams":[$s[94]],"name":$s[846],"httpMethod":$s[0]});
/**
 * Defines a static updater method
 * @param carousel {$$paramType} the object to create.
 */ /*

osapi.jive.corev3.carousels.create = function(carousel) { [generated code] }

*/ defineStatic({"endpoint":"/places/{uri}/contents","queryParams":[$s[263],$s[94],$s[179]],"name":$s[732],"httpMethod":$s[12],"overrideParams":{"type":$s[189]}});
/**
 * Defines a static updater method
 * @param carousel {$$paramType} the object to create.
 */ /*

osapi.jive.corev3.carousels.create = function(carousel) { [generated code] }

*/ defineStatic({"endpoint":"/places","queryParams":[$s[263],$s[94],$s[179]],"name":$s[732],"httpMethod":$s[12],"overrideParams":{"type":$s[189]}});
/**
 * Defines a static getter method which takes a single options argument
 * @param opts {Object} Options object may contain the following properties:
 *     
 */ /*

osapi.jive.corev3.places.getPlacesRelatedToContentCount = function(opts) { [generated code] }

*/ defineStatic({"endpoint":"/places/relatedtocontent/count","queryParams":[$s[244]],"name":$s[914],"httpMethod":$s[0]});
/**
 * Defines a static getter method which takes a single options argument
 * @param opts {Object} Options object may contain the following properties:
 *     
 */ /*

osapi.jive.corev3.groups.get = function(opts) { [generated code] }

*/ defineStatic({"endpoint":"/places","queryParams":[$s[95],$s[328],$s[38],$s[27],$s[94]],"name":$s[651],"httpMethod":$s[0],"overrideParams":{"type":$s[43]}});
/**
 * Defines a static getter method which takes a single options argument
 * @param opts {Object} Options object may contain the following properties:
 *     
 */ /*

osapi.jive.corev3.places.getPlacesRelatedToContent = function(opts) { [generated code] }

*/ defineStatic({"endpoint":"/places/relatedtocontent","queryParams":[$s[328],$s[244],$s[38],$s[27],$s[94]],"name":$s[892],"httpMethod":$s[0]});
/**
 * Defines a static getter method which takes a single options argument
 * @param opts {Object} Options object may contain the following properties:
 *     
 */ /*

osapi.jive.corev3.groups.get = function(opts) { [generated code] }

*/ defineStatic({"optionsInterceptor":$s[524],"endpoint":"/places/{uri}","queryParams":[$s[94]],"name":$s[651],"httpMethod":$s[0]});
/**
 * Defines a static getter method which takes a single options argument
 * @param opts {Object} Options object may contain the following properties:
 *     
 */ /*

osapi.jive.corev3.places.getRootSpace = function(opts) { [generated code] }

*/ defineStatic({"endpoint":"/places/root","queryParams":[$s[94]],"name":$s[783],"httpMethod":$s[0]});
/**
 * Defines a static getter method which takes a single options argument
 * @param opts {Object} Options object may contain the following properties:
 *     
 */ /*

osapi.jive.corev3.places.getStorageContainer = function(opts) { [generated code] }

*/ defineStatic({"endpoint":"/places/{placeID}/storage","queryParams":[$s[94]],"name":$s[846],"httpMethod":$s[0]});
/**
 * Defines a static updater method
 * @param group {$$paramType} the object to create.
 */ /*

osapi.jive.corev3.groups.create = function(group) { [generated code] }

*/ defineStatic({"endpoint":"/places/{uri}/contents","queryParams":[$s[263],$s[94],$s[179]],"name":$s[690],"httpMethod":$s[12],"overrideParams":{"type":$s[43]}});
/**
 * Defines a static updater method
 * @param group {$$paramType} the object to create.
 */ /*

osapi.jive.corev3.groups.create = function(group) { [generated code] }

*/ defineStatic({"endpoint":"/places","queryParams":[$s[263],$s[94],$s[179]],"name":$s[690],"httpMethod":$s[12],"overrideParams":{"type":$s[43]}});
/**
 * Defines a static getter method which takes a single options argument
 * @param opts {Object} Options object may contain the following properties:
 *     
 */ /*

osapi.jive.corev3.places.getPlacesRelatedToContentCount = function(opts) { [generated code] }

*/ defineStatic({"endpoint":"/places/relatedtocontent/count","queryParams":[$s[244]],"name":$s[914],"httpMethod":$s[0]});
/**
 * Defines a static getter method which takes a single options argument
 * @param opts {Object} Options object may contain the following properties:
 *     
 */ /*

osapi.jive.corev3.projects.get = function(opts) { [generated code] }

*/ defineStatic({"endpoint":"/places","queryParams":[$s[95],$s[328],$s[38],$s[27],$s[94]],"name":$s[677],"httpMethod":$s[0],"overrideParams":{"type":$s[165]}});
/**
 * Defines a static getter method which takes a single options argument
 * @param opts {Object} Options object may contain the following properties:
 *     
 */ /*

osapi.jive.corev3.places.getPlacesRelatedToContent = function(opts) { [generated code] }

*/ defineStatic({"endpoint":"/places/relatedtocontent","queryParams":[$s[328],$s[244],$s[38],$s[27],$s[94]],"name":$s[892],"httpMethod":$s[0]});
/**
 * Defines a static getter method which takes a single options argument
 * @param opts {Object} Options object may contain the following properties:
 *     
 */ /*

osapi.jive.corev3.projects.get = function(opts) { [generated code] }

*/ defineStatic({"optionsInterceptor":$s[524],"endpoint":"/places/{uri}","queryParams":[$s[94]],"name":$s[677],"httpMethod":$s[0]});
/**
 * Defines a static getter method which takes a single options argument
 * @param opts {Object} Options object may contain the following properties:
 *     
 */ /*

osapi.jive.corev3.places.getRootSpace = function(opts) { [generated code] }

*/ defineStatic({"endpoint":"/places/root","queryParams":[$s[94]],"name":$s[783],"httpMethod":$s[0]});
/**
 * Defines a static getter method which takes a single options argument
 * @param opts {Object} Options object may contain the following properties:
 *     
 */ /*

osapi.jive.corev3.places.getStorageContainer = function(opts) { [generated code] }

*/ defineStatic({"endpoint":"/places/{placeID}/storage","queryParams":[$s[94]],"name":$s[846],"httpMethod":$s[0]});
/**
 * Defines a static updater method
 * @param project {$$paramType} the object to create.
 */ /*

osapi.jive.corev3.projects.create = function(project) { [generated code] }

*/ defineStatic({"endpoint":"/places/{uri}/contents","queryParams":[$s[263],$s[94],$s[179]],"name":$s[726],"httpMethod":$s[12],"overrideParams":{"type":$s[165]}});
/**
 * Defines a static updater method
 * @param project {$$paramType} the object to create.
 */ /*

osapi.jive.corev3.projects.create = function(project) { [generated code] }

*/ defineStatic({"endpoint":"/places","queryParams":[$s[263],$s[94],$s[179]],"name":$s[726],"httpMethod":$s[12],"overrideParams":{"type":$s[165]}});
/**
 * Defines a static getter method which takes a single options argument
 * @param opts {Object} Options object may contain the following properties:
 *     
 */ /*

osapi.jive.corev3.places.getPlacesRelatedToContentCount = function(opts) { [generated code] }

*/ defineStatic({"endpoint":"/places/relatedtocontent/count","queryParams":[$s[244]],"name":$s[914],"httpMethod":$s[0]});
/**
 * Defines a static getter method which takes a single options argument
 * @param opts {Object} Options object may contain the following properties:
 *     
 */ /*

osapi.jive.corev3.spaces.get = function(opts) { [generated code] }

*/ defineStatic({"endpoint":"/places","queryParams":[$s[95],$s[328],$s[38],$s[27],$s[94]],"name":$s[656],"httpMethod":$s[0],"overrideParams":{"type":$s[61]}});
/**
 * Defines a static getter method which takes a single options argument
 * @param opts {Object} Options object may contain the following properties:
 *     
 */ /*

osapi.jive.corev3.places.getPlacesRelatedToContent = function(opts) { [generated code] }

*/ defineStatic({"endpoint":"/places/relatedtocontent","queryParams":[$s[328],$s[244],$s[38],$s[27],$s[94]],"name":$s[892],"httpMethod":$s[0]});
/**
 * Defines a static getter method which takes a single options argument
 * @param opts {Object} Options object may contain the following properties:
 *     
 */ /*

osapi.jive.corev3.spaces.get = function(opts) { [generated code] }

*/ defineStatic({"optionsInterceptor":$s[524],"endpoint":"/places/{uri}","queryParams":[$s[94]],"name":$s[656],"httpMethod":$s[0]});
/**
 * Defines a static getter method which takes a single options argument
 * @param opts {Object} Options object may contain the following properties:
 *     
 */ /*

osapi.jive.corev3.places.getRootSpace = function(opts) { [generated code] }

*/ defineStatic({"endpoint":"/places/root","queryParams":[$s[94]],"name":$s[783],"httpMethod":$s[0]});
/**
 * Defines a static getter method which takes a single options argument
 * @param opts {Object} Options object may contain the following properties:
 *     
 */ /*

osapi.jive.corev3.places.getStorageContainer = function(opts) { [generated code] }

*/ defineStatic({"endpoint":"/places/{placeID}/storage","queryParams":[$s[94]],"name":$s[846],"httpMethod":$s[0]});
/**
 * Defines a static updater method
 * @param space {$$paramType} the object to create.
 */ /*

osapi.jive.corev3.spaces.create = function(space) { [generated code] }

*/ defineStatic({"endpoint":"/places/{uri}/contents","queryParams":[$s[263],$s[94],$s[179]],"name":$s[702],"httpMethod":$s[12],"overrideParams":{"type":$s[61]}});
/**
 * Defines a static updater method
 * @param space {$$paramType} the object to create.
 */ /*

osapi.jive.corev3.spaces.create = function(space) { [generated code] }

*/ defineStatic({"endpoint":"/places","queryParams":[$s[263],$s[94],$s[179]],"name":$s[702],"httpMethod":$s[12],"overrideParams":{"type":$s[61]}});
/**
 * Defines a static getter method which takes a single options argument
 * @param opts {Object} Options object may contain the following properties:
 *     
 */ /*

osapi.jive.corev3.places.getPlacesRelatedToContentCount = function(opts) { [generated code] }

*/ defineStatic({"endpoint":"/places/relatedtocontent/count","queryParams":[$s[244]],"name":$s[914],"httpMethod":$s[0]});
/**
 * Defines a static getter method which takes a single options argument
 * @param opts {Object} Options object may contain the following properties:
 *     
 */ /*

osapi.jive.corev3.statics.get = function(opts) { [generated code] }

*/ defineStatic({"endpoint":"/statics","queryParams":[$s[95],$s[328],$s[38],$s[27],$s[94]],"name":$s[663],"httpMethod":$s[0],"overrideParams":{"type":$s[117]}});
/**
 * Defines a static getter method which takes a single options argument
 * @param opts {Object} Options object may contain the following properties:
 *     
 */ /*

osapi.jive.corev3.statics.get = function(opts) { [generated code] }

*/ defineStatic({"optionsInterceptor":$s[524],"endpoint":"/statics/{uri}","queryParams":[$s[94]],"name":$s[663],"httpMethod":$s[0]});
/**
 * Defines a static updater method
 * @param static {$$paramType} the object to create.
 */ /*

osapi.jive.corev3.statics.create = function(static) { [generated code] }

*/ defineStatic({"endpoint":"/statics","queryParams":[$s[94]],"name":$s[715],"httpMethod":$s[12]});
/**
 * Defines a static getter method which takes a single options argument
 * @param opts {Object} Options object may contain the following properties:
 *     
 */ /*

osapi.jive.corev3.achievements.get = function(opts) { [generated code] }

*/ defineStatic({"endpoint":"/achievements/{userId}","queryParams":[$s[94]],"name":$s[730],"httpMethod":$s[0]});
/**
 * Defines a static getter method which takes a single options argument
 * @param opts {Object} Options object may contain the following properties:
 *     
 */ /*

osapi.jive.corev3.playbox.pages.getOverallLeaderboard = function(opts) { [generated code] }

*/ defineStatic({"endpoint":"/achievements/rewards/leaderboard/overall","queryParams":[$s[107],$s[319],$s[219],$s[94],$s[312]],"name":$s[905],"httpMethod":$s[0]});
/**
 * Defines a static getter method which takes a single options argument
 * @param opts {Object} Options object may contain the following properties:
 *     
 */ /*

osapi.jive.corev3.achievements.getMissionLeaderboard = function(opts) { [generated code] }

*/ defineStatic({"endpoint":"/achievements/missionLeaderboard/{missionId}","queryParams":[$s[319],$s[219],$s[94],$s[312]],"name":$s[898],"httpMethod":$s[0]});
/**
 * Defines a static getter method which takes a single options argument
 * @param opts {Object} Options object may contain the following properties:
 *     
 */ /*

osapi.jive.corev3.achievements.modals.missions.getMissionModal = function(opts) { [generated code] }

*/ defineStatic({"endpoint":"/achievements/modals/missions/{badgeId}/{userId}","queryParams":[$s[94]],"name":$s[923],"httpMethod":$s[0]});
/**
 * Defines a static getter method which takes a single options argument
 * @param opts {Object} Options object may contain the following properties:
 *     
 */ /*

osapi.jive.corev3.playbox.pages.getProfilePage = function(opts) { [generated code] }

*/ defineStatic({"endpoint":"/achievements/profile/{userId}","name":$s[864],"httpMethod":$s[0]});
/**
 * Defines a static getter method which takes a single options argument
 * @param opts {Object} Options object may contain the following properties:
 *     
 */ /*

osapi.jive.corev3.achievements.modals.quests.getQuestModal = function(opts) { [generated code] }

*/ defineStatic({"endpoint":"/achievements/modals/quests/{badgeId}/{userId}","queryParams":[$s[94]],"name":$s[917],"httpMethod":$s[0]});
/**
 * Defines a static getter method which takes a single options argument
 * @param opts {Object} Options object may contain the following properties:
 *     
 */ /*

osapi.jive.corev3.playbox.pages.getReputationPage = function(opts) { [generated code] }

*/ defineStatic({"endpoint":"/achievements/reputation/{userId}","queryParams":[$s[94]],"name":$s[887],"httpMethod":$s[0]});
/**
 * Defines a static getter method which takes a single options argument
 * @param opts {Object} Options object may contain the following properties:
 *     
 */ /*

osapi.jive.corev3.playbox.pages.sendPbQuestEvent = function(opts) { [generated code] }

*/ defineStatic({"endpoint":"/achievements/mark/quests/{questId}/tasks/{taskId}","queryParams":[$s[94]],"name":$s[873],"httpMethod":$s[0]});
/**
 * Defines a static getter method which takes a single options argument
 * @param opts {Object} Options object may contain the following properties:
 *     
 */ /*

osapi.jive.corev3.achievements.modals.missions.getStrategyModal = function(opts) { [generated code] }

*/ defineStatic({"endpoint":"/achievements/modals/strategies/{badgeId}/{userId}","queryParams":[$s[94]],"name":$s[924],"httpMethod":$s[0]});
/**
 * Defines a static getter method which takes a single options argument
 * @param opts {Object} Options object may contain the following properties:
 *     
 */ /*

osapi.jive.corev3.achievements.getUserBadgeLeaderboard = function(opts) { [generated code] }

*/ defineStatic({"endpoint":"/achievements/userBadgesLeaderboard/{badgeId}","queryParams":[$s[107],$s[319],$s[219],$s[30],$s[94],$s[312]],"name":$s[907],"httpMethod":$s[0]});
/**
 * Defines a static getter method which takes a single options argument
 * @param opts {Object} Options object may contain the following properties:
 *     
 */ /*

osapi.jive.corev3.playbox.pages.getUserLevel = function(opts) { [generated code] }

*/ defineStatic({"endpoint":"/achievements/userLevel/{userId}","name":$s[847],"httpMethod":$s[0]});
/**
 * Defines a static getter method which takes a single options argument
 * @param opts {Object} Options object may contain the following properties:
 *     
 */ /*

osapi.jive.corev3.achievements.userPanel = function(opts) { [generated code] }

*/ defineStatic({"endpoint":"/achievements/userPanel/{userId}","queryParams":[$s[312]],"name":$s[810],"httpMethod":$s[0]});
/**
 * Defines a static getter method which takes a single options argument
 * @param opts {Object} Options object may contain the following properties:
 *     
 */ /*

osapi.jive.corev3.achievements.getHandoutBadgesAndPointsData = function(opts) { [generated code] }

*/ defineStatic({"endpoint":"/achievements/handoutBadgesAndPoints","name":$s[921],"httpMethod":$s[0]});
/**
 * Defines a static updater method
 * @param achievement {$$paramType} the object to create.
 */ /*

osapi.jive.corev3.achievements.saveLeaderboardImage = function(achievement) { [generated code] }

*/ defineStatic({"endpoint":"/achievements/saveLeaderboardImage","queryParams":[$s[94]],"name":$s[895],"httpMethod":$s[12]});
/**
 * Defines a static getter method which takes a single options argument
 * @param opts {Object} Options object may contain the following properties:
 *     
 */ /*

osapi.jive.corev3.achievements.rewardsPageBadges = function(opts) { [generated code] }

*/ defineStatic({"endpoint":"/achievements/rewardsPageBadges","queryParams":[$s[94]],"name":$s[868],"httpMethod":$s[0]});
/**
 * Defines a static getter method which takes a single options argument
 * @param opts {Object} Options object may contain the following properties:
 *     
 */ /*

osapi.jive.corev3.achievements.getStreamEntryIcon = function(opts) { [generated code] }

*/ defineStatic({"endpoint":"/achievements/streamEntryIcon/{activityType}","queryParams":[$s[94]],"name":$s[877],"httpMethod":$s[0]});
/**
 * Defines a static getter method which takes a single options argument
 * @param opts {Object} Options object may contain the following properties:
 *     
 */ /*

osapi.jive.corev3.achievements.getAvailableMissions = function(opts) { [generated code] }

*/ defineStatic({"endpoint":"/achievements/availableMissions","queryParams":[$s[94]],"name":$s[893],"httpMethod":$s[0]});
/**
 * Defines a static getter method which takes a single options argument
 * @param opts {Object} Options object may contain the following properties:
 *     
 */ /*

osapi.jive.corev3.achievements.getConnectedUserHandoutBadges = function(opts) { [generated code] }

*/ defineStatic({"endpoint":"/achievements/connectedUserHandoutBadges","queryParams":[$s[94]],"name":$s[920],"httpMethod":$s[0]});
/**
 * Defines a static getter method which takes a single options argument
 * @param opts {Object} Options object may contain the following properties:
 *     
 */ /*

osapi.jive.corev3.achievements.getGlobalLevels = function(opts) { [generated code] }

*/ defineStatic({"endpoint":"/achievements/levels","queryParams":[$s[94]],"name":$s[853],"httpMethod":$s[0]});
/**
 * Defines a static getter method which takes a single options argument
 * @param opts {Object} Options object may contain the following properties:
 *     
 */ /*

osapi.jive.corev3.achievements.getHandoutBadges = function(opts) { [generated code] }

*/ defineStatic({"endpoint":"/achievements/handoutBadges","name":$s[865],"httpMethod":$s[0]});
/**
 * Defines a static getter method which takes a single options argument
 * @param opts {Object} Options object may contain the following properties:
 *     
 */ /*

osapi.jive.corev3.achievements.getUserBadgesStreamActivity = function(opts) { [generated code] }

*/ defineStatic({"endpoint":"/achievements/userBadgesStreamActivity","queryParams":[$s[368],$s[94]],"name":$s[916],"httpMethod":$s[0]});
/**
 * Defines a static getter method which takes a single options argument
 * @param opts {Object} Options object may contain the following properties:
 *     
 */ /*

osapi.jive.corev3.achievements.getUserHandoutBadges = function(opts) { [generated code] }

*/ defineStatic({"endpoint":"/achievements/userHandoutBadges","queryParams":[$s[94],$s[125]],"name":$s[894],"httpMethod":$s[0]});
/**
 * Defines a static getter method which takes a single options argument
 * @param opts {Object} Options object may contain the following properties:
 *     
 */ /*

osapi.jive.corev3.achievements.userPanel.expertBadges = function(opts) { [generated code] }

*/ defineStatic({"endpoint":"/achievements/userPanel/{userId}/expertBadges","name":$s[901],"httpMethod":$s[0]});
/**
 * Defines a static getter method which takes a single options argument
 * @param opts {Object} Options object may contain the following properties:
 *     
 */ /*

osapi.jive.corev3.achievements.userPanel.missions = function(opts) { [generated code] }

*/ defineStatic({"endpoint":"/achievements/userPanel/{userId}/missions","name":$s[878],"httpMethod":$s[0]});
/**
 * Defines a static getter method which takes a single options argument
 * @param opts {Object} Options object may contain the following properties:
 *     
 */ /*

osapi.jive.corev3.achievements.userPanel.quests = function(opts) { [generated code] }

*/ defineStatic({"endpoint":"/achievements/userPanel/{userId}/quests","name":$s[866],"httpMethod":$s[0]});
/**
 * Defines a static updater method
 * @param achievement {$$paramType} the object to create.
 */ /*

osapi.jive.corev3.playbox.pages.awardUserBadge = function(achievement) { [generated code] }

*/ defineStatic({"endpoint":"/achievements/awardUserBadge","name":$s[863],"httpMethod":$s[12]});
/**
 * Defines a static updater method
 * @param achievement {$$paramType} the object to create.
 */ /*

osapi.jive.corev3.achievements.challenge = function(achievement) { [generated code] }

*/ defineStatic({"endpoint":"/achievements/challenge","name":$s[809],"httpMethod":$s[12]});
/**
 * Defines a static updater method
 * @param collaboration {$$paramType} the object to create.
 */ /*

osapi.jive.corev3.collaborations.addParticipants = function(collaboration) { [generated code] }

*/ defineStatic({"optionsInterceptor":$s[524],"endpoint":"/collaborations/{uri}/participants","queryParams":[$s[94]],"name":$s[869],"httpMethod":$s[12],"overrideParams":{"type":$s[453]}});
/**
 * Defines a static updater method
 * @param collaboration {$$paramType} the object to create.
 */ /*

osapi.jive.corev3.collaborations.create = function(collaboration) { [generated code] }

*/ defineStatic({"endpoint":"/collaborations","queryParams":[$s[94]],"name":$s[795],"httpMethod":$s[12],"overrideParams":{"type":$s[453]}});
/**
 * Defines a static updater method
 * @param collaboration {$$paramType} the object to create.
 */ /*

osapi.jive.corev3.interactions.create = function(collaboration) { [generated code] }

*/ defineStatic({"endpoint":"/collaborations/{uri}/interactions","queryParams":[$s[94]],"name":$s[780],"httpMethod":$s[12],"overrideParams":{"type":$s[423]}});
/**
 * Defines a static getter method which takes a single options argument
 * @param opts {Object} Options object may contain the following properties:
 *     
 */ /*

osapi.jive.corev3.collaborations.get = function(opts) { [generated code] }

*/ defineStatic({"optionsInterceptor":$s[524],"endpoint":"/collaborations/{uri}","queryParams":[$s[94]],"name":$s[764],"httpMethod":$s[0]});
/**
 * Defines a static getter method which takes a single options argument
 * @param opts {Object} Options object may contain the following properties:
 *     
 */ /*

osapi.jive.corev3.collaborations.getExternal = function(opts) { [generated code] }

*/ defineStatic({"optionsInterceptor":$s[524],"endpoint":"/collaborations/ext/{uri}","queryParams":[$s[94]],"name":$s[838],"httpMethod":$s[0]});
/**
 * Defines a static getter method which takes a single options argument
 * @param opts {Object} Options object may contain the following properties:
 *     
 */ /*

osapi.jive.corev3.interactions.get = function(opts) { [generated code] }

*/ defineStatic({"optionsInterceptor":$s[524],"endpoint":"/collaborations/interactions/{uri}","queryParams":[$s[94]],"name":$s[741],"httpMethod":$s[0]});
/**
 * Defines a static getter method which takes a single options argument
 * @param opts {Object} Options object may contain the following properties:
 *     
 */ /*

osapi.jive.corev3.collaborations.getInteractionsWithOptionalContext = function(opts) { [generated code] }

*/ defineStatic({"optionsInterceptor":$s[524],"endpoint":"/collaborations/{uri}/interactions/{interactionID}","queryParams":[$s[95],$s[520],$s[38],$s[94]],"name":$s[926],"httpMethod":$s[0]});
/**
 * Defines a static getter method which takes a single options argument
 * @param opts {Object} Options object may contain the following properties:
 *     
 */ /*

osapi.jive.corev3.collaborations.getInteractionsByCollaboration = function(opts) { [generated code] }

*/ defineStatic({"optionsInterceptor":$s[524],"endpoint":"/collaborations/{uri}/interactions","queryParams":[$s[95],$s[87],$s[38],$s[36],$s[94]],"name":$s[925],"httpMethod":$s[0]});
/**
 * Defines a static getter method which takes a single options argument
 * @param opts {Object} Options object may contain the following properties:
 *     
 */ /*

osapi.jive.corev3.collaborations.getParticipants = function(opts) { [generated code] }

*/ defineStatic({"optionsInterceptor":$s[524],"endpoint":"/collaborations/{uri}/participants","queryParams":[$s[328],$s[38],$s[94]],"name":$s[870],"httpMethod":$s[0]});
/**
 * Defines a static updater method
 * @param obj {$$paramType} the object to destroy.
 */ /*

osapi.jive.corev3.collaborations.removeParticipants = function(obj) { [generated code] }

*/ defineStatic({"optionsInterceptor":$s[524],"endpoint":"/collaborations/{uri}/participants/{userID}","name":$s[896],"httpMethod":$s[74]});
/**
 * Defines a static updater method
 * @param interaction {$$paramType} the object to create.
 */ /*

osapi.jive.corev3.collaborations.addParticipants = function(interaction) { [generated code] }

*/ defineStatic({"optionsInterceptor":$s[524],"endpoint":"/collaborations/{uri}/participants","queryParams":[$s[94]],"name":$s[869],"httpMethod":$s[12],"overrideParams":{"type":$s[365]}});
/**
 * Defines a static updater method
 * @param interaction {$$paramType} the object to create.
 */ /*

osapi.jive.corev3.collaborations.create = function(interaction) { [generated code] }

*/ defineStatic({"endpoint":"/collaborations","queryParams":[$s[94]],"name":$s[795],"httpMethod":$s[12],"overrideParams":{"type":$s[365]}});
/**
 * Defines a static updater method
 * @param interaction {$$paramType} the object to create.
 */ /*

osapi.jive.corev3.interactions.create = function(interaction) { [generated code] }

*/ defineStatic({"endpoint":"/collaborations/{uri}/interactions","queryParams":[$s[94]],"name":$s[780],"httpMethod":$s[12],"overrideParams":{"type":$s[423]}});
/**
 * Defines a static getter method which takes a single options argument
 * @param opts {Object} Options object may contain the following properties:
 *     
 */ /*

osapi.jive.corev3.collaborations.get = function(opts) { [generated code] }

*/ defineStatic({"optionsInterceptor":$s[524],"endpoint":"/collaborations/{uri}","queryParams":[$s[94]],"name":$s[764],"httpMethod":$s[0]});
/**
 * Defines a static getter method which takes a single options argument
 * @param opts {Object} Options object may contain the following properties:
 *     
 */ /*

osapi.jive.corev3.collaborations.getExternal = function(opts) { [generated code] }

*/ defineStatic({"optionsInterceptor":$s[524],"endpoint":"/collaborations/ext/{uri}","queryParams":[$s[94]],"name":$s[838],"httpMethod":$s[0]});
/**
 * Defines a static getter method which takes a single options argument
 * @param opts {Object} Options object may contain the following properties:
 *     
 */ /*

osapi.jive.corev3.interactions.get = function(opts) { [generated code] }

*/ defineStatic({"optionsInterceptor":$s[524],"endpoint":"/collaborations/interactions/{uri}","queryParams":[$s[94]],"name":$s[741],"httpMethod":$s[0]});
/**
 * Defines a static getter method which takes a single options argument
 * @param opts {Object} Options object may contain the following properties:
 *     
 */ /*

osapi.jive.corev3.collaborations.getInteractionsWithOptionalContext = function(opts) { [generated code] }

*/ defineStatic({"optionsInterceptor":$s[524],"endpoint":"/collaborations/{uri}/interactions/{interactionID}","queryParams":[$s[95],$s[520],$s[38],$s[94]],"name":$s[926],"httpMethod":$s[0]});
/**
 * Defines a static getter method which takes a single options argument
 * @param opts {Object} Options object may contain the following properties:
 *     
 */ /*

osapi.jive.corev3.interactions.getInteractionsByCollaboration = function(opts) { [generated code] }

*/ defineStatic({"optionsInterceptor":$s[524],"endpoint":"/collaborations/{uri}/interactions","queryParams":[$s[95],$s[87],$s[38],$s[36],$s[94]],"name":$s[922],"httpMethod":$s[0]});
/**
 * Defines a static getter method which takes a single options argument
 * @param opts {Object} Options object may contain the following properties:
 *     
 */ /*

osapi.jive.corev3.collaborations.getParticipants = function(opts) { [generated code] }

*/ defineStatic({"optionsInterceptor":$s[524],"endpoint":"/collaborations/{uri}/participants","queryParams":[$s[328],$s[38],$s[94]],"name":$s[870],"httpMethod":$s[0]});
/**
 * Defines a static updater method
 * @param obj {$$paramType} the object to destroy.
 */ /*

osapi.jive.corev3.collaborations.removeParticipants = function(obj) { [generated code] }

*/ defineStatic({"optionsInterceptor":$s[524],"endpoint":"/collaborations/{uri}/participants/{userID}","name":$s[896],"httpMethod":$s[74]});
/**
 * Defines a static updater method
 * @param supportCenterSection {$$paramType} the object to create.
 */ /*

osapi.jive.corev3.solutions.supportcenter.create = function(supportCenterSection) { [generated code] }

*/ defineStatic({"endpoint":"/solutions/supportCenter/sections","queryParams":[$s[94]],"name":$s[874],"httpMethod":$s[12]});
/**
 * Defines a static updater method
 * @param obj {$$paramType} the object to destroy.
 */ /*

osapi.jive.corev3.solutions.supportcenter.delete = function(obj) { [generated code] }

*/ defineStatic({"optionsInterceptor":$s[524],"endpoint":"/solutions/supportCenter/sections/{sectionID}","name":$s[875],"httpMethod":$s[74]});
/**
 * Defines a static getter method which takes a single options argument
 * @param opts {Object} Options object may contain the following properties:
 *     
 */ /*

osapi.jive.corev3.solutions.supportcenter.get = function(opts) { [generated code] }

*/ defineStatic({"optionsInterceptor":$s[524],"endpoint":"/solutions/supportCenter/sections/{uri}/avatar","queryParams":[$s[26]],"name":$s[852],"httpMethod":$s[0]});
/**
 * Defines a static getter method which takes a single options argument
 * @param opts {Object} Options object may contain the following properties:
 *     
 */ /*

osapi.jive.corev3.solutions.supportcenter.banners.get = function(opts) { [generated code] }

*/ defineStatic({"optionsInterceptor":$s[524],"endpoint":"/solutions/supportCenter/banner","queryParams":[$s[94]],"name":$s[906],"httpMethod":$s[0]});
/**
 * Defines a static getter method which takes a single options argument
 * @param opts {Object} Options object may contain the following properties:
 *     
 */ /*

osapi.jive.corev3.solutions.supportcenter.blocks.get = function(opts) { [generated code] }

*/ defineStatic({"optionsInterceptor":$s[524],"endpoint":"/solutions/supportCenter/blocks","queryParams":[$s[94]],"name":$s[899],"httpMethod":$s[0]});
/**
 * Defines a static getter method which takes a single options argument
 * @param opts {Object} Options object may contain the following properties:
 *     
 */ /*

osapi.jive.corev3.solutions.supportcenter.channels.get = function(opts) { [generated code] }

*/ defineStatic({"optionsInterceptor":$s[524],"endpoint":"/solutions/supportCenter/channels","queryParams":[$s[94]],"name":$s[913],"httpMethod":$s[0]});
/**
 * Defines a static getter method which takes a single options argument
 * @param opts {Object} Options object may contain the following properties:
 *     
 */ /*

osapi.jive.corev3.solutions.supportcenter.get = function(opts) { [generated code] }

*/ defineStatic({"optionsInterceptor":$s[524],"endpoint":"/solutions/supportCenter/sections/{uri}","queryParams":[$s[94]],"name":$s[852],"httpMethod":$s[0]});
/**
 * Defines a static getter method which takes a single options argument
 * @param opts {Object} Options object may contain the following properties:
 *     
 */ /*

osapi.jive.corev3.solutions.supportcenter.get = function(opts) { [generated code] }

*/ defineStatic({"endpoint":"/solutions/supportCenter/sections","queryParams":[$s[94]],"name":$s[852],"httpMethod":$s[0]});
/**
 * Defines a static getter method which takes a single options argument
 * @param opts {Object} Options object may contain the following properties:
 *     
 */ /*

osapi.jive.corev3.solutions.supportcenter.categories = function(opts) { [generated code] }

*/ defineStatic({"endpoint":"/solutions/supportCenter/categories","name":$s[900],"httpMethod":$s[0]});
/**
 * Defines a static updater method
 * @param supportCenterSection {$$paramType} the object to create.
 */ /*

osapi.jive.corev3.solutions.supportcenter.publish = function(supportCenterSection) { [generated code] }

*/ defineStatic({"endpoint":"/solutions/supportCenter/publish/{published}","name":$s[889],"httpMethod":$s[12]});
/**
 * Defines a static updater method
 * @param supportCenterSection {osapi.jive.corev3.solutions.supportcenter.Section} the object to update.
 */ /*

osapi.jive.corev3.solutions.supportcenter.update = function(supportCenterSection) { [generated code] }

*/ defineStatic({"paramType":$s[888],"optionsInterceptor":$s[524],"endpoint":"/solutions/supportCenter/sections/{sectionID}","queryParams":[$s[94]],"name":$s[876],"httpMethod":$s[1],"validate":true});
/**
 * Defines a static getter method which takes a single options argument
 * @param opts {Object} Options object may contain the following properties:
 *     
 */ /*

osapi.jive.corev3.extstreams.getExternalStreamInstance = function(opts) { [generated code] }

*/ defineStatic({"optionsInterceptor":$s[524],"endpoint":"/extstreams/{id}","queryParams":[$s[94]],"name":$s[908],"httpMethod":$s[0]});
/**
 * Defines a static getter method which takes a single options argument
 * @param opts {Object} Options object may contain the following properties:
 *     
 */ /*

osapi.jive.corev3.tiles.getTileInstance = function(opts) { [generated code] }

*/ defineStatic({"endpoint":"/extstreams/external/{extensionUUID}/{externalID}","queryParams":[$s[94]],"name":$s[808],"httpMethod":$s[0]});
/**
 * Defines a static getter method which takes a single options argument
 * @param opts {Object} Options object may contain the following properties:
 *     
 */ /*

osapi.jive.corev3.tiles.getTileInstance = function(opts) { [generated code] }

*/ defineStatic({"endpoint":"/tiles/{id}","queryParams":[$s[94]],"name":$s[808],"httpMethod":$s[0]});
/**
 * Defines a static getter method which takes a single options argument
 * @param opts {Object} Options object may contain the following properties:
 *     
 */ /*

osapi.jive.corev3.tiles.getTileInstance = function(opts) { [generated code] }

*/ defineStatic({"endpoint":"/tiles/external/{extensionUUID}/{externalID}","queryParams":[$s[94]],"name":$s[808],"httpMethod":$s[0]});
/**
 * Defines a static getter method which takes a single options argument
 * @param opts {Object} Options object may contain the following properties:
 *     
 */ /*

osapi.jive.corev3.people.getAll = function(opts) { [generated code] }

*/ defineStatic({"endpoint":"/people/@all","queryParams":[$s[95],$s[328],$s[38],$s[94]],"name":$s[693],"httpMethod":$s[0]});
/**
 * Defines a static getter method which takes a single options argument
 * @param opts {Object} Options object may contain the following properties:
 *     
 */ /*

osapi.jive.corev3.people.get = function(opts) { [generated code] }

*/ defineStatic({"endpoint":"/people","queryParams":[$s[95],$s[328],$s[55],$s[104],$s[38],"ids",$s[27],$s[94]],"name":$s[652],"httpMethod":$s[0]});
/**
 * Defines a static getter method which takes a single options argument
 * @param opts {Object} Options object may contain the following properties:
 *     
 */ /*

osapi.jive.corev3.people.getRecommendedPeople = function(opts) { [generated code] }

*/ defineStatic({"endpoint":"/people/recommended","queryParams":[$s[38],$s[94]],"name":$s[850],"httpMethod":$s[0]});
/**
 * Defines a static getter method which takes a single options argument
 * @param opts {Object} Options object may contain the following properties:
 *     
 */ /*

osapi.jive.corev3.people.getTrendingPeople = function(opts) { [generated code] }

*/ defineStatic({"endpoint":"/people/trending","queryParams":[$s[95],$s[38],$s[94]],"name":$s[827],"httpMethod":$s[0]});
/**
 * Defines a static getter method which takes a single options argument
 * @param opts {Object} Options object may contain the following properties:
 *     
 */ /*

osapi.jive.corev3.people.getPrivateProps = function(opts) { [generated code] }

*/ defineStatic({"endpoint":"/people/{personID}/privateprops","queryParams":[$s[94]],"name":$s[815],"httpMethod":$s[0]});
/**
 * Defines a static updater method
 * @param person {$$paramType} the object to create.
 */ /*

osapi.jive.corev3.people.savePrivateProps = function(person) { [generated code] }

*/ defineStatic({"endpoint":"/people/{personID}/privateprops","queryParams":[$s[94]],"name":$s[821],"httpMethod":$s[12]});
/**
 * Defines a static getter method which takes a single options argument
 * @param opts {Object} Options object may contain the following properties:
 *     
 */ /*

osapi.jive.corev3.people.getMetadata = function(opts) { [generated code] }

*/ defineStatic({"endpoint":"/people/@metadata","name":$s[770],"httpMethod":$s[0]});
/**
 * Defines a static getter method which takes a single options argument
 * @param opts {Object} Options object may contain the following properties:
 *     
 */ /*

osapi.jive.corev3.people.get = function(opts) { [generated code] }

*/ defineStatic({"optionsInterceptor":$s[524],"endpoint":"/people/{uri}","queryParams":[$s[115],$s[94]],"name":$s[652],"httpMethod":$s[0]});
/**
 * Defines a static getter method which takes a single options argument
 * @param opts {Object} Options object may contain the following properties:
 *     
 */ /*

osapi.jive.corev3.people.getOwner = function(opts) { [generated code] }

*/ defineStatic({"endpoint":"/people/{uri}","queryParams":[$s[115],$s[94]],"name":$s[723],"httpMethod":$s[0],"overrideParams":{"uri":"@me"}});
/**
 * Defines a static getter method which takes a single options argument
 * @param opts {Object} Options object may contain the following properties:
 *     
 */ /*

osapi.jive.corev3.people.getViewer = function(opts) { [generated code] }

*/ defineStatic({"endpoint":"/people/{uri}","queryParams":[$s[115],$s[94]],"name":$s[742],"httpMethod":$s[0],"overrideParams":{"uri":"@me"}});
/**
 * Defines a static getter method which takes a single options argument
 * @param opts {Object} Options object may contain the following properties:
 *     
 */ /*

osapi.jive.corev3.people.get = function(opts) { [generated code] }

*/ defineStatic({"endpoint":"/people/email/{email}","queryParams":[$s[94]],"name":$s[652],"httpMethod":$s[0]});
/**
 * Defines a static getter method which takes a single options argument
 * @param opts {Object} Options object may contain the following properties:
 *     
 */ /*

osapi.jive.corev3.people.get = function(opts) { [generated code] }

*/ defineStatic({"endpoint":"/people/external/{identityType}/{identity : \\([a-zA-Z0-9+/=]+\\)|[^/]+}","queryParams":[$s[94]],"name":$s[652],"httpMethod":$s[0]});
/**
 * Defines a static getter method which takes a single options argument
 * @param opts {Object} Options object may contain the following properties:
 *     
 */ /*

osapi.jive.corev3.people.get = function(opts) { [generated code] }

*/ defineStatic({"endpoint":"/people/username/{username}","queryParams":[$s[94]],"name":$s[652],"httpMethod":$s[0]});
/**
 * Defines a static getter method which takes a single options argument
 * @param opts {Object} Options object may contain the following properties:
 *     
 */ /*

osapi.jive.corev3.people.getResources = function(opts) { [generated code] }

*/ defineStatic({"endpoint":"/people/@resources","name":$s[782],"httpMethod":$s[0]});
/**
 * Defines a static getter method which takes a single options argument
 * @param opts {Object} Options object may contain the following properties:
 *     
 */ /*

osapi.jive.corev3.people.getFilterableFields = function(opts) { [generated code] }

*/ defineStatic({"endpoint":"/people/@filterableFields","name":$s[845],"httpMethod":$s[0]});
/**
 * Defines a static getter method which takes a single options argument
 * @param opts {Object} Options object may contain the following properties:
 *     
 */ /*

osapi.jive.corev3.people.getSupportedFields = function(opts) { [generated code] }

*/ defineStatic({"endpoint":"/people/@supportedFields","name":$s[835],"httpMethod":$s[0]});
/**
 * Defines a static updater method
 * @param person {$$paramType} the object to create.
 */ /*

osapi.jive.corev3.people.acceptTermsAndConditions = function(person) { [generated code] }

*/ defineStatic({"endpoint":"/people/{personID}/acceptTermsAndConditions","name":$s[884],"httpMethod":$s[12]});
/**
 * Defines a static updater method
 * @param person {$$paramType} the object to create.
 */ /*

osapi.jive.corev3.people.create = function(person) { [generated code] }

*/ defineStatic({"endpoint":"/people","queryParams":[$s[263],$s[94],$s[184]],"name":$s[692],"httpMethod":$s[12]});
/**
 * Defines a static getter method which takes a single options argument
 * @param opts {Object} Options object may contain the following properties:
 *     
 */ /*

osapi.jive.corev3.people.expertise.getPendingExpertiseTags = function(opts) { [generated code] }

*/ defineStatic({"endpoint":"/people/{personID}/expertise/pending","name":$s[918],"httpMethod":$s[0]});
/**
 * Defines a static getter method which takes a single options argument
 * @param opts {Object} Options object may contain the following properties:
 *     
 */ /*

osapi.jive.corev3.people.expertise.getEndorsed = function(opts) { [generated code] }

*/ defineStatic({"endpoint":"/people/{personID}/expertise/endorse","queryParams":[$s[328],$s[38]],"name":$s[859],"httpMethod":$s[0]});
/**
 * Defines a static getter method which takes a single options argument
 * @param opts {Object} Options object may contain the following properties:
 *     
 */ /*

osapi.jive.corev3.people.getTermsAndConditions = function(opts) { [generated code] }

*/ defineStatic({"endpoint":"/people/{personID}/termsAndConditions","name":$s[861],"httpMethod":$s[0]});
/**
 * Defines a static getter method which takes a single options argument
 * @param opts {Object} Options object may contain the following properties:
 *     
 */ /*

osapi.jive.corev3.people.expertise.getTopExpertise = function(opts) { [generated code] }

*/ defineStatic({"endpoint":"/people/{personID}/expertise/top","queryParams":[$s[328],$s[38],$s[94]],"name":$s[891],"httpMethod":$s[0]});
/**
 * Defines a static getter method which takes a single options argument
 * @param opts {Object} Options object may contain the following properties:
 *     
 */ /*

osapi.jive.corev3.people.expertise.getUsersByExpertise = function(opts) { [generated code] }

*/ defineStatic({"endpoint":"/people/expertise/{tagName}","queryParams":[$s[328],$s[38],$s[94]],"name":$s[911],"httpMethod":$s[0]});
/**
 * Defines a static getter method which takes a single options argument
 * @param opts {Object} Options object may contain the following properties:
 *     
 */ /*

osapi.jive.corev3.people.expertise.getUsersByExpertiseQuery = function(opts) { [generated code] }

*/ defineStatic({"endpoint":"/people/expertise","queryParams":[$s[328],$s[38],$s[177],$s[94]],"name":$s[919],"httpMethod":$s[0]});
/**
 * Defines a static getter method which takes a single options argument
 * @param opts {Object} Options object may contain the following properties:
 *     
 */ /*

osapi.jive.corev3.people.expertise.getWhoEndorsed = function(opts) { [generated code] }

*/ defineStatic({"endpoint":"/people/{personID}/expertise/endorsers/{tagName}","queryParams":[$s[328],$s[38],$s[94]],"name":$s[885],"httpMethod":$s[0]});
/**
 * Defines a static getter method which takes a single options argument
 * @param opts {Object} Options object may contain the following properties:
 *     
 */ /*

osapi.jive.corev3.people.expertise.getWhoEndorsedQuery = function(opts) { [generated code] }

*/ defineStatic({"endpoint":"/people/{personID}/expertise/endorsers","queryParams":[$s[328],$s[38],$s[177],$s[94]],"name":$s[912],"httpMethod":$s[0]});
/**
 * Defines a static updater method
 * @param person {$$paramType} the object to create.
 */ /*

osapi.jive.corev3.people.expertise.endorse = function(person) { [generated code] }

*/ defineStatic({"endpoint":"/people/{personID}/expertise/endorse","name":$s[826],"httpMethod":$s[12]});
/**
 * Defines a static updater method
 * @param person {osapi.jive.corev3.people.Person} the object to update.
 */ /*

osapi.jive.corev3.people.expertise.approveExpertiseTag = function(person) { [generated code] }

*/ defineStatic({"paramType":$s[691],"endpoint":"/people/{personID}/expertise/endorse/{tagName}","name":$s[909],"httpMethod":$s[1],"validate":true});
/**
 * Defines a static updater method
 * @param obj {$$paramType} the object to destroy.
 */ /*

osapi.jive.corev3.people.expertise.deleteExpertiseTag = function(obj) { [generated code] }

*/ defineStatic({"endpoint":"/people/{personID}/expertise/{tagName}","name":$s[904],"httpMethod":$s[74]});
/**
 * Defines a static updater method
 * @param obj {$$paramType} the object to destroy.
 */ /*

osapi.jive.corev3.people.expertise.deleteExpertiseTag2 = function(obj) { [generated code] }

*/ defineStatic({"endpoint":"/people/{personID}/expertise/","queryParams":[$s[177]],"name":$s[910],"httpMethod":$s[74]});
/**
 * Defines a static updater method
 * @param obj {$$paramType} the object to destroy.
 */ /*

osapi.jive.corev3.people.expertise.unendorse = function(obj) { [generated code] }

*/ defineStatic({"endpoint":"/people/{personID}/expertise/endorse/{tagName}","name":$s[844],"httpMethod":$s[74]});
/**
 * Defines a static updater method
 * @param obj {$$paramType} the object to destroy.
 */ /*

osapi.jive.corev3.people.expertise.unendorseQuery = function(obj) { [generated code] }

*/ defineStatic({"endpoint":"/people/{personID}/expertise/endorse","queryParams":[$s[177]],"name":$s[886],"httpMethod":$s[74]});
/**
 * Defines a static getter method which takes a single options argument
 * @param opts {Object} Options object may contain the following properties:
 *     
 */ /*

osapi.jive.corev3.eventCalendarCounts.get = function(opts) { [generated code] }

*/ defineStatic({"ext":$s[585],"optionsInterceptor":$s[524],"endpoint":"/calendar/{placeID}","queryParams":[$s[48],"year",$s[252]],"name":$s[818],"httpMethod":$s[0],"version":"3"});
/**
 * Defines a static getter method which takes a single options argument
 * @param opts {Object} Options object may contain the following properties:
 *     
 */ /*

osapi.jive.corev3.contents.events.eventCategoryTypes.get = function(opts) { [generated code] }

*/ defineStatic({"ext":$s[585],"endpoint":"/eventTypes","queryParams":[$s[95],$s[328],$s[38],$s[94]],"name":$s[915],"httpMethod":$s[0],"version":"3"});
/**
 * Defines a static getter method which takes a single options argument
 * @param opts {Object} Options object may contain the following properties:
 *     
 */ /*

osapi.jive.corev3.contents.events.eventCategoryTypes.get = function(opts) { [generated code] }

*/ defineStatic({"ext":$s[585],"endpoint":"/eventTypes/{eventTypeID}","queryParams":[$s[94]],"name":$s[915],"httpMethod":$s[0],"version":"3"});
/**
 * Defines a static updater method
 * @param eventCategoryType {$$paramType} the object to create.
 */ /*

osapi.jive.corev3.eventCategoryTypes.create = function(eventCategoryType) { [generated code] }

*/ defineStatic({"ext":$s[585],"endpoint":"/eventTypes","queryParams":[$s[94]],"name":$s[830],"httpMethod":$s[12],"version":"3"});
/**
 * Defines a static updater method
 * @param eventCategoryType {osapi.jive.corev3.contents.EventCategoryType} the object to update.
 */ /*

osapi.jive.corev3.eventCategoryTypes.update = function(eventCategoryType) { [generated code] }

*/ defineStatic({"ext":$s[585],"paramType":$s[840],"endpoint":"/eventTypes/{eventTypeID}","queryParams":[$s[94]],"name":$s[832],"httpMethod":$s[1],"version":"3","validate":true});
/**
 * Defines a static updater method
 * @param obj {$$paramType} the object to destroy.
 */ /*

osapi.jive.corev3.eventCategoryTypes.delete = function(obj) { [generated code] }

*/ defineStatic({"ext":$s[585],"endpoint":"/eventTypes/{eventTypeID}","name":$s[831],"httpMethod":$s[74],"version":"3"});
/**
 * Defines a static getter method which takes a single options argument
 * @param opts {Object} Options object may contain the following properties:
 *     
 */ /*

osapi.jive.corev3.ideas.stages.get = function(opts) { [generated code] }

*/ defineStatic({"ext":$s[567],"endpoint":"/stages","queryParams":[$s[94]],"name":$s[738],"httpMethod":$s[0],"version":"1"});
/**
 * Defines a static getter method which takes a single options argument
 * @param opts {Object} Options object may contain the following properties:
 *     
 */ /*

osapi.jive.corev3.ideas.stages.get = function(opts) { [generated code] }

*/ defineStatic({"ext":$s[567],"endpoint":"/stages/{id}","queryParams":[$s[94]],"name":$s[738],"httpMethod":$s[0],"version":"1"});
/**
 * define class osapi.jive.corev3.people.Achievement, to extend osapi.jive.corev3.AbstractObject
 */
defineClass($s[769], osapi.jive.corev3.AbstractObject, {"type":$s[339]}, []);

/**
 * Describe the fields of osapi.jive.corev3.people.Achievement
 * @type {Array}
 */
osapi.jive.corev3.people.Achievement.fields = [
defineFieldMetadata($s[350],$s[79]),
defineFieldMetadata($s[409],"UserQuestDto[]",null,false,false,true),
defineFieldMetadata($s[412],"UserBadge[]",null,false,false,true),
defineFieldMetadata($s[201],$s[127]),
defineFieldMetadata($s[468],$s[129]),
defineFieldMetadata($s[153],$s[79]),
defineFieldMetadata("id",$s[79]),
defineFieldMetadata($s[259],$s[129]),
defineFieldMetadata($s[21],$s[79]),
defineFieldMetadata($s[478],$s[79]),
defineFieldMetadata($s[315],$s[129]),
defineFieldMetadata($s[113],$s[129]),
defineFieldMetadata($s[263],$s[11]),
defineFieldMetadata($s[265],$s[77]),
defineFieldMetadata($s[595],"Quest[]",null,false,false,true),
defineFieldMetadata($s[28],"String[]",null,true,false,true),
defineFieldMetadata($s[30],$s[79]),
defineFieldMetadata($s[235],$s[129]),
defineFieldMetadata($s[179],$s[11]),
defineFieldMetadata($s[334],"UserBadge[]",null,false,false,true)
];

/**
 * Add an entry to the type registry for
 * osapi.jive.corev3.people.Achievement
 * @type {Object}
 */
typeRegistry[$s[339]] = {
    name: $s[339],
    ctor: osapi.jive.corev3.people.Achievement
};
/**
 * define class osapi.jive.corev3.communications.Action, to extend osapi.jive.corev3.AbstractObject
 */
defineClass($s[796], osapi.jive.corev3.AbstractObject, {"type":$s[81]}, []);

/**
 * Describe the fields of osapi.jive.corev3.communications.Action
 * @type {Array}
 */
osapi.jive.corev3.communications.Action.fields = [
defineFieldMetadata($s[132],"ActionEntry[]",$s[340],false,false,true),
defineFieldMetadata($s[14],$s[79]),
defineFieldMetadata($s[295],$s[79]),
defineFieldMetadata($s[411],$s[79]),
defineFieldMetadata($s[247],$s[79]),
defineFieldMetadata("id",$s[79]),
defineFieldMetadata($s[322],$s[77]),
defineFieldMetadata($s[263],$s[11]),
defineFieldMetadata($s[529],$s[79]),
defineFieldMetadata($s[265],$s[77]),
defineFieldMetadata($s[176],$s[79]),
defineFieldMetadata($s[122],$s[77],$s[3]),
defineFieldMetadata($s[65],$s[79]),
defineFieldMetadata($s[30],$s[79])
];

/**
 * Add an entry to the type registry for
 * osapi.jive.corev3.communications.Action
 * @type {Object}
 */
typeRegistry[$s[81]] = {
    name: $s[81],
    ctor: osapi.jive.corev3.communications.Action
};
/**
 * define class osapi.jive.corev3.activities.Activity, to extend osapi.jive.corev3.AbstractObject
 */
defineClass($s[775], osapi.jive.corev3.AbstractObject, {"type":$s[186]}, [{"name":$s[66],"params":{"for":$s[494]}}]);

/**
 * Describe the fields of osapi.jive.corev3.activities.Activity
 * @type {Array}
 */
osapi.jive.corev3.activities.Activity.fields = [
defineFieldMetadata($s[35],$s[496],$s[525]),
defineFieldMetadata($s[137],$s[79],null,true,true),
defineFieldMetadata($s[254],$s[495],$s[498]),
defineFieldMetadata($s[16],$s[238],$s[261],true),
defineFieldMetadata("id",$s[79]),
defineFieldMetadata($s[18],$s[450],$s[473],true),
defineFieldMetadata($s[103],$s[495],$s[498],true),
defineFieldMetadata($s[318],$s[278],$s[318],true),
defineFieldMetadata($s[436],$s[238],$s[261]),
defineFieldMetadata($s[226],$s[495],$s[498]),
defineFieldMetadata($s[263],$s[11]),
defineFieldMetadata($s[265],$s[77]),
defineFieldMetadata($s[122],$s[495],$s[498],true),
defineFieldMetadata($s[65],$s[79],null,true,true),
defineFieldMetadata($s[30],$s[79]),
defineFieldMetadata($s[179],$s[11]),
defineFieldMetadata($s[9],$s[79],null,true),
defineFieldMetadata($s[32],$s[79],null,true),
defineFieldMetadata($s[271],$s[129])
];

/**
 * Add an entry to the type registry for
 * osapi.jive.corev3.activities.Activity
 * @type {Object}
 */
typeRegistry[$s[186]] = {
    name: $s[186],
    ctor: osapi.jive.corev3.activities.Activity
};
/**
 * define class osapi.jive.corev3.contents.Announcement, to extend osapi.jive.corev3.AbstractObject
 */
defineClass($s[797], osapi.jive.corev3.AbstractObject, {"type":$s[391]}, [{"name":$s[66]}]);

/**
 * Describe the fields of osapi.jive.corev3.contents.Announcement
 * @type {Array}
 */
osapi.jive.corev3.contents.Announcement.fields = [
defineFieldMetadata($s[279],$s[129]),
defineFieldMetadata($s[84],$s[78],$s[108]),
defineFieldMetadata($s[137],$s[337],$s[345],true,true),
defineFieldMetadata($s[244],$s[79]),
defineFieldMetadata($s[457],"Image[]",$s[44],false,false,true),
defineFieldMetadata($s[458],"ContentVideo[]",$s[400],false,false,true),
defineFieldMetadata($s[143],$s[11],null,true),
defineFieldMetadata($s[467],$s[129]),
defineFieldMetadata($s[201],$s[127]),
defineFieldMetadata($s[468],$s[129]),
defineFieldMetadata($s[471],$s[79]),
defineFieldMetadata($s[566],$s[79]),
defineFieldMetadata($s[472],$s[79]),
defineFieldMetadata($s[152],$s[79]),
defineFieldMetadata("id",$s[79]),
defineFieldMetadata($s[44],$s[79],null,true),
defineFieldMetadata($s[45],$s[79]),
defineFieldMetadata($s[425],$s[129]),
defineFieldMetadata($s[568],$s[11]),
defineFieldMetadata($s[259],$s[129]),
defineFieldMetadata($s[106],$s[79],null,true),
defineFieldMetadata($s[481],$s[131],$s[176]),
defineFieldMetadata($s[621],$s[127]),
defineFieldMetadata($s[376],$s[131],$s[176]),
defineFieldMetadata($s[482],$s[127]),
defineFieldMetadata($s[528],$s[127]),
defineFieldMetadata($s[380],$s[11],null,true),
defineFieldMetadata($s[263],$s[11]),
defineFieldMetadata($s[323],$s[129]),
defineFieldMetadata($s[265],$s[77]),
defineFieldMetadata($s[531],$s[77]),
defineFieldMetadata($s[172],$s[129],null,true),
defineFieldMetadata($s[118],$s[79]),
defineFieldMetadata($s[175],$s[79],null,true,true),
defineFieldMetadata($s[330],$s[79],null,true),
defineFieldMetadata($s[633],$s[131],$s[176]),
defineFieldMetadata($s[622],$s[79]),
defineFieldMetadata($s[28],"String[]",null,false,false,true),
defineFieldMetadata($s[30],$s[79],null,false,true),
defineFieldMetadata($s[235],$s[129]),
defineFieldMetadata($s[179],$s[11]),
defineFieldMetadata($s[31],$s[79]),
defineFieldMetadata($s[271],$s[129]),
defineFieldMetadata($s[664],$s[127])
];

/**
 * Add an entry to the type registry for
 * osapi.jive.corev3.contents.Announcement
 * @type {Object}
 */
typeRegistry[$s[391]] = {
    name: $s[391],
    ctor: osapi.jive.corev3.contents.Announcement
};
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.contents.Announcement
 * to simplify use of the extprops resource.
 * This method will execute a POST for extprops resources
 */ /*

 osapi.jive.corev3.contents.Announcement.prototype.createExtProps = function(data, params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[506],"className":$s[797],"resourceName":$s[198],"httpMethod":$s[12],"signature":"data, params","queryParams":[$s[94]]});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.contents.Announcement
 * to simplify use of the outcomes resource.
 * This method will execute a POST for outcomes resources
 */ /*

 osapi.jive.corev3.contents.Announcement.prototype.createOutcome = function(data, params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[463],"className":$s[797],"resourceName":$s[218],"httpMethod":$s[12],"signature":"data, params","queryParams":[$s[94]]});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.contents.Announcement
 * to simplify use of the extprops resource.
 * This method will execute a DELETE for extprops resources
 */ /*

 osapi.jive.corev3.contents.Announcement.prototype.deleteExtProps = function() { [generated code] }

 */ defineInstanceMethod({"methodName":$s[507],"className":$s[797],"resourceName":$s[198],"httpMethod":$s[74],"signature":""});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.contents.Announcement
 * to simplify use of the self resource.
 * This method will execute a DELETE for self resources
 */ /*

 osapi.jive.corev3.contents.Announcement.prototype.destroy = function() { [generated code] }

 */ defineInstanceMethod({"methodName":$s[141],"className":$s[797],"resourceName":$s[25],"httpMethod":$s[74],"signature":""});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.contents.Announcement
 * to simplify use of the self resource.
 * This method will execute a GET for self resources
 */ /*

 osapi.jive.corev3.contents.Announcement.prototype.get = function(params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[5],"className":$s[797],"resourceName":$s[25],"httpMethod":$s[0],"signature":$s[105],"queryParams":[$s[94]]});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.contents.Announcement
 * to simplify use of the childOutcomeTypes resource.
 * This method will execute a GET for childOutcomeTypes resources
 */ /*

 osapi.jive.corev3.contents.Announcement.prototype.getChildOutcomeTypes = function(params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[619],"className":$s[797],"resourceName":$s[580],"httpMethod":$s[0],"signature":$s[105],"queryParams":[$s[38],$s[94],$s[209],$s[328]]});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.contents.Announcement
 * to simplify use of the extprops resource.
 * This method will execute a GET for extprops resources
 */ /*

 osapi.jive.corev3.contents.Announcement.prototype.getExtProps = function(params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[359],"className":$s[797],"resourceName":$s[198],"httpMethod":$s[0],"signature":$s[105],"queryParams":[$s[94]]});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.contents.Announcement
 * to simplify use of the outcomeTypes resource.
 * This method will execute a GET for outcomeTypes resources
 */ /*

 osapi.jive.corev3.contents.Announcement.prototype.getOutcomeTypes = function(params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[544],"className":$s[797],"resourceName":$s[433],"httpMethod":$s[0],"signature":$s[105],"queryParams":[$s[38],$s[94],$s[328]]});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.contents.Announcement
 * to simplify use of the outcomes resource.
 * This method will execute a GET for outcomes resources
 */ /*

 osapi.jive.corev3.contents.Announcement.prototype.getOutcomes = function(params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[361],"className":$s[797],"resourceName":$s[218],"httpMethod":$s[0],"signature":$s[105],"queryParams":[$s[38],$s[94],$s[632],$s[328]]});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.contents.Announcement
 * to simplify use of the read resource.
 * This method will execute a POST for read resources
 */ /*

 osapi.jive.corev3.contents.Announcement.prototype.markRead = function(params) { [generated code] }

 */ defineInstanceMethod({"signature":$s[105],"queryParams":[],"methodName":$s[216],"className":$s[797],"resourceName":$s[24],"httpMethod":$s[12],"hasBody":false});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.contents.Announcement
 * to simplify use of the read resource.
 * This method will execute a DELETE for read resources
 */ /*

 osapi.jive.corev3.contents.Announcement.prototype.markUnread = function() { [generated code] }

 */ defineInstanceMethod({"methodName":$s[313],"className":$s[797],"resourceName":$s[24],"httpMethod":$s[74],"signature":""});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.contents.Announcement
 * to simplify use of the self resource.
 * This method will execute a PUT for self resources
 */ /*

 osapi.jive.corev3.contents.Announcement.prototype.update = function(params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[124],"className":$s[797],"resourceName":$s[25],"httpMethod":$s[1],"signature":$s[105],"queryParams":[$s[94],$s[47]]});
/**
 * define class osapi.jive.corev3.contents.Attachment, to extend osapi.jive.corev3.AbstractObject
 */
defineClass($s[778], osapi.jive.corev3.AbstractObject, {"type":$s[281]}, [{"name":$s[66]}]);

/**
 * Describe the fields of osapi.jive.corev3.contents.Attachment
 * @type {Array}
 */
osapi.jive.corev3.contents.Attachment.fields = [
defineFieldMetadata($s[346],$s[79],null,true,true),
defineFieldMetadata($s[194],$s[127],null,true,true),
defineFieldMetadata($s[201],$s[127]),
defineFieldMetadata($s[468],$s[129]),
defineFieldMetadata("id",$s[79]),
defineFieldMetadata($s[259],$s[129]),
defineFieldMetadata($s[21],$s[79],null,true),
defineFieldMetadata($s[263],$s[11]),
defineFieldMetadata($s[265],$s[77]),
defineFieldMetadata($s[26],$s[129]),
defineFieldMetadata($s[118],$s[79]),
defineFieldMetadata($s[28],"String[]",null,false,false,true),
defineFieldMetadata($s[30],$s[79]),
defineFieldMetadata($s[235],$s[129]),
defineFieldMetadata($s[179],$s[11]),
defineFieldMetadata($s[9],$s[79],null,true,true)
];

/**
 * Add an entry to the type registry for
 * osapi.jive.corev3.contents.Attachment
 * @type {Object}
 */
typeRegistry[$s[281]] = {
    name: $s[281],
    ctor: osapi.jive.corev3.contents.Attachment
};
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.contents.Attachment
 * to simplify use of the self resource.
 * This method will execute a DELETE for self resources
 */ /*

 osapi.jive.corev3.contents.Attachment.prototype.destroy = function() { [generated code] }

 */ defineInstanceMethod({"methodName":$s[141],"className":$s[778],"resourceName":$s[25],"httpMethod":$s[74],"signature":""});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.contents.Attachment
 * to simplify use of the self resource.
 * This method will execute a GET for self resources
 */ /*

 osapi.jive.corev3.contents.Attachment.prototype.get = function(params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[5],"className":$s[778],"resourceName":$s[25],"httpMethod":$s[0],"signature":$s[105],"queryParams":[$s[94]]});
/**
 * define class osapi.jive.corev3.places.Blog, to extend osapi.jive.corev3.AbstractObject
 */
defineClass($s[661], osapi.jive.corev3.AbstractObject, {"type":$s[13]}, [{"name":$s[66]}]);

/**
 * Describe the fields of osapi.jive.corev3.places.Blog
 * @type {Array}
 */
osapi.jive.corev3.places.Blog.fields = [
defineFieldMetadata($s[636],$s[127]),
defineFieldMetadata($s[286],"Category[]",$s[190],false,false,true),
defineFieldMetadata($s[637],$s[129]),
defineFieldMetadata($s[399],"String[]",null,false,false,true),
defineFieldMetadata($s[350],$s[79],null,true),
defineFieldMetadata($s[351],$s[79],null,true,true),
defineFieldMetadata($s[201],$s[127]),
defineFieldMetadata($s[468],$s[129]),
defineFieldMetadata($s[471],$s[79]),
defineFieldMetadata($s[566],$s[79]),
defineFieldMetadata($s[472],$s[79]),
defineFieldMetadata($s[152],$s[79]),
defineFieldMetadata("id",$s[79]),
defineFieldMetadata($s[45],$s[79]),
defineFieldMetadata($s[259],$s[129]),
defineFieldMetadata($s[21],$s[79],null,true,true),
defineFieldMetadata($s[106],$s[79],null,true,true),
defineFieldMetadata($s[481],$s[131],$s[176]),
defineFieldMetadata($s[376],$s[131],$s[176]),
defineFieldMetadata($s[163],$s[79]),
defineFieldMetadata($s[377],"PlaceTopic[]",$s[321],true,false,true),
defineFieldMetadata($s[528],$s[127]),
defineFieldMetadata($s[263],$s[11]),
defineFieldMetadata($s[265],$s[77]),
defineFieldMetadata($s[531],$s[77]),
defineFieldMetadata($s[118],$s[79]),
defineFieldMetadata($s[28],"String[]",null,false,false,true),
defineFieldMetadata($s[30],$s[79],null,false,true),
defineFieldMetadata($s[235],$s[129]),
defineFieldMetadata($s[179],$s[11]),
defineFieldMetadata($s[31],$s[79]),
defineFieldMetadata($s[271],$s[129]),
defineFieldMetadata($s[664],$s[127],null,true)
];

/**
 * Add an entry to the type registry for
 * osapi.jive.corev3.places.Blog
 * @type {Object}
 */
typeRegistry[$s[13]] = {
    name: $s[13],
    ctor: osapi.jive.corev3.places.Blog
};
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.places.Blog
 * to simplify use of the extprops resource.
 * This method will execute a POST for extprops resources
 */ /*

 osapi.jive.corev3.places.Blog.prototype.createExtProps = function(data, params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[506],"className":$s[661],"resourceName":$s[198],"httpMethod":$s[12],"signature":"data, params","queryParams":[$s[94]]});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.places.Blog
 * to simplify use of the statics resource.
 * This method will execute a POST for statics resources
 */ /*

 osapi.jive.corev3.places.Blog.prototype.createStatic = function(data, params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[403],"className":$s[661],"resourceName":$s[173],"httpMethod":$s[12],"signature":"data, params","queryParams":[$s[94]]});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.places.Blog
 * to simplify use of the extprops resource.
 * This method will execute a DELETE for extprops resources
 */ /*

 osapi.jive.corev3.places.Blog.prototype.deleteExtProps = function() { [generated code] }

 */ defineInstanceMethod({"methodName":$s[507],"className":$s[661],"resourceName":$s[198],"httpMethod":$s[74],"signature":""});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.places.Blog
 * to simplify use of the self resource.
 * This method will execute a DELETE for self resources
 */ /*

 osapi.jive.corev3.places.Blog.prototype.destroy = function() { [generated code] }

 */ defineInstanceMethod({"methodName":$s[141],"className":$s[661],"resourceName":$s[25],"httpMethod":$s[74],"signature":""});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.places.Blog
 * to simplify use of the self resource.
 * This method will execute a GET for self resources
 */ /*

 osapi.jive.corev3.places.Blog.prototype.get = function(params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[5],"className":$s[661],"resourceName":$s[25],"httpMethod":$s[0],"signature":$s[105],"queryParams":[$s[94]]});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.places.Blog
 * to simplify use of the activity resource.
 * This method will execute a GET for activity resources
 */ /*

 osapi.jive.corev3.places.Blog.prototype.getActivity = function(params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[356],"className":$s[661],"resourceName":$s[186],"httpMethod":$s[0],"signature":$s[105],"queryParams":[$s[36],$s[87],$s[191],$s[397],$s[38],$s[94],$s[95],$s[432]]});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.places.Blog
 * to simplify use of the contents resource.
 * This method will execute a GET for contents resources
 */ /*

 osapi.jive.corev3.places.Blog.prototype.getContents = function(params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[358],"className":$s[661],"resourceName":$s[193],"httpMethod":$s[0],"signature":$s[105],"queryParams":[$s[185],$s[38],$s[94],$s[95],$s[420],$s[27],$s[328]]});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.places.Blog
 * to simplify use of the extprops resource.
 * This method will execute a GET for extprops resources
 */ /*

 osapi.jive.corev3.places.Blog.prototype.getExtProps = function(params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[359],"className":$s[661],"resourceName":$s[198],"httpMethod":$s[0],"signature":$s[105],"queryParams":[$s[94]]});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.places.Blog
 * to simplify use of the featuredContent resource.
 * This method will execute a GET for featuredContent resources
 */ /*

 osapi.jive.corev3.places.Blog.prototype.getFeaturedContent = function(params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[603],"className":$s[661],"resourceName":$s[540],"httpMethod":$s[0],"signature":$s[105],"queryParams":[$s[185],$s[94],$s[95]]});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.places.Blog
 * to simplify use of the followers resource.
 * This method will execute a GET for followers resources
 */ /*

 osapi.jive.corev3.places.Blog.prototype.getFollowers = function(params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[415],"className":$s[661],"resourceName":$s[250],"httpMethod":$s[0],"signature":$s[105],"queryParams":[$s[38],$s[94],$s[95],$s[328]]});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.places.Blog
 * to simplify use of the followingIn resource.
 * This method will execute a GET for followingIn resources
 */ /*

 osapi.jive.corev3.places.Blog.prototype.getFollowingIn = function(params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[518],"className":$s[661],"resourceName":$s[354],"httpMethod":$s[0],"signature":$s[105],"queryParams":[$s[94]]});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.places.Blog
 * to simplify use of the statics resource.
 * This method will execute a GET for statics resources
 */ /*

 osapi.jive.corev3.places.Blog.prototype.getStatics = function(params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[307],"className":$s[661],"resourceName":$s[173],"httpMethod":$s[0],"signature":$s[105],"queryParams":[$s[94],$s[329]]});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.places.Blog
 * to simplify use of the self resource.
 * This method will execute a PUT for self resources
 */ /*

 osapi.jive.corev3.places.Blog.prototype.update = function(params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[124],"className":$s[661],"resourceName":$s[25],"httpMethod":$s[1],"signature":$s[105],"queryParams":[$s[94],$s[179]]});
/**
 * define class osapi.jive.corev3.places.Carousel, to extend osapi.jive.corev3.AbstractObject
 */
defineClass($s[724], osapi.jive.corev3.AbstractObject, {"type":$s[189]}, [{"name":$s[66]}]);

/**
 * Describe the fields of osapi.jive.corev3.places.Carousel
 * @type {Array}
 */
osapi.jive.corev3.places.Carousel.fields = [
defineFieldMetadata($s[636],$s[127]),
defineFieldMetadata($s[286],"Category[]",$s[190],false,false,true),
defineFieldMetadata($s[637],$s[129]),
defineFieldMetadata($s[399],"String[]",null,false,false,true),
defineFieldMetadata($s[350],$s[79],null,true),
defineFieldMetadata($s[351],$s[79],null,true,true),
defineFieldMetadata($s[201],$s[127]),
defineFieldMetadata($s[468],$s[129]),
defineFieldMetadata($s[471],$s[79]),
defineFieldMetadata($s[566],$s[79]),
defineFieldMetadata($s[472],$s[79]),
defineFieldMetadata($s[152],$s[79]),
defineFieldMetadata("id",$s[79]),
defineFieldMetadata($s[45],$s[79]),
defineFieldMetadata($s[259],$s[129]),
defineFieldMetadata($s[21],$s[79],null,true,true),
defineFieldMetadata($s[106],$s[79],null,true,true),
defineFieldMetadata($s[481],$s[131],$s[176]),
defineFieldMetadata($s[376],$s[131],$s[176]),
defineFieldMetadata($s[163],$s[79]),
defineFieldMetadata($s[377],"PlaceTopic[]",$s[321],true,false,true),
defineFieldMetadata($s[528],$s[127]),
defineFieldMetadata($s[263],$s[11]),
defineFieldMetadata($s[265],$s[77]),
defineFieldMetadata($s[531],$s[77]),
defineFieldMetadata($s[118],$s[79]),
defineFieldMetadata($s[28],"String[]",null,false,false,true),
defineFieldMetadata($s[30],$s[79]),
defineFieldMetadata($s[235],$s[129]),
defineFieldMetadata($s[179],$s[11]),
defineFieldMetadata($s[31],$s[79]),
defineFieldMetadata($s[271],$s[129]),
defineFieldMetadata($s[664],$s[127],null,true)
];

/**
 * Add an entry to the type registry for
 * osapi.jive.corev3.places.Carousel
 * @type {Object}
 */
typeRegistry[$s[189]] = {
    name: $s[189],
    ctor: osapi.jive.corev3.places.Carousel
};
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.places.Carousel
 * to simplify use of the announcements resource.
 * This method will execute a POST for announcements resources
 */ /*

 osapi.jive.corev3.places.Carousel.prototype.createAnnouncement = function(data, params) { [generated code] }

 */ defineInstanceMethod({"signature":"data, params","queryParams":[$s[94]],"methodName":$s[599],"className":$s[724],"resourceName":$s[452],"httpMethod":$s[12],"paramOverrides":{"type":$s[391]}});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.places.Carousel
 * to simplify use of the avatar resource.
 * This method will execute a POST for avatar resources
 */ /*

 osapi.jive.corev3.places.Carousel.prototype.createAvatar = function(params) { [generated code] }

 */ defineInstanceMethod({"signature":$s[105],"queryParams":[$s[8]],"methodName":$s[401],"className":$s[724],"resourceName":$s[85],"httpMethod":$s[12],"hasBody":false});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.places.Carousel
 * to simplify use of the categories resource.
 * This method will execute a POST for categories resources
 */ /*

 osapi.jive.corev3.places.Carousel.prototype.createCategory = function(data, params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[505],"className":$s[724],"resourceName":$s[286],"httpMethod":$s[12],"signature":"data, params","queryParams":[$s[501],$s[94]]});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.places.Carousel
 * to simplify use of the extprops resource.
 * This method will execute a POST for extprops resources
 */ /*

 osapi.jive.corev3.places.Carousel.prototype.createExtProps = function(data, params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[506],"className":$s[724],"resourceName":$s[198],"httpMethod":$s[12],"signature":"data, params","queryParams":[$s[94]]});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.places.Carousel
 * to simplify use of the statics resource.
 * This method will execute a POST for statics resources
 */ /*

 osapi.jive.corev3.places.Carousel.prototype.createStatic = function(data, params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[403],"className":$s[724],"resourceName":$s[173],"httpMethod":$s[12],"signature":"data, params","queryParams":[$s[94]]});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.places.Carousel
 * to simplify use of the extprops resource.
 * This method will execute a DELETE for extprops resources
 */ /*

 osapi.jive.corev3.places.Carousel.prototype.deleteExtProps = function() { [generated code] }

 */ defineInstanceMethod({"methodName":$s[507],"className":$s[724],"resourceName":$s[198],"httpMethod":$s[74],"signature":""});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.places.Carousel
 * to simplify use of the self resource.
 * This method will execute a DELETE for self resources
 */ /*

 osapi.jive.corev3.places.Carousel.prototype.destroy = function() { [generated code] }

 */ defineInstanceMethod({"methodName":$s[141],"className":$s[724],"resourceName":$s[25],"httpMethod":$s[74],"signature":""});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.places.Carousel
 * to simplify use of the avatar resource.
 * This method will execute a DELETE for avatar resources
 */ /*

 osapi.jive.corev3.places.Carousel.prototype.destroyAvatar = function() { [generated code] }

 */ defineInstanceMethod({"methodName":$s[464],"className":$s[724],"resourceName":$s[85],"httpMethod":$s[74],"signature":""});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.places.Carousel
 * to simplify use of the self resource.
 * This method will execute a GET for self resources
 */ /*

 osapi.jive.corev3.places.Carousel.prototype.get = function(params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[5],"className":$s[724],"resourceName":$s[25],"httpMethod":$s[0],"signature":$s[105],"queryParams":[$s[94]]});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.places.Carousel
 * to simplify use of the activity resource.
 * This method will execute a GET for activity resources
 */ /*

 osapi.jive.corev3.places.Carousel.prototype.getActivity = function(params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[356],"className":$s[724],"resourceName":$s[186],"httpMethod":$s[0],"signature":$s[105],"queryParams":[$s[36],$s[87],$s[191],$s[397],$s[38],$s[94],$s[95],$s[432]]});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.places.Carousel
 * to simplify use of the announcements resource.
 * This method will execute a GET for announcements resources
 */ /*

 osapi.jive.corev3.places.Carousel.prototype.getAnnouncements = function(params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[562],"className":$s[724],"resourceName":$s[452],"httpMethod":$s[0],"signature":$s[105],"queryParams":[$s[280],$s[38],$s[413],$s[94],$s[328]]});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.places.Carousel
 * to simplify use of the blog resource.
 * This method will execute a GET for blog resources
 */ /*

 osapi.jive.corev3.places.Carousel.prototype.getBlog = function(params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[148],"className":$s[724],"resourceName":$s[13],"httpMethod":$s[0],"signature":$s[105],"queryParams":[$s[94]]});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.places.Carousel
 * to simplify use of the categories resource.
 * This method will execute a GET for categories resources
 */ /*

 osapi.jive.corev3.places.Carousel.prototype.getCategories = function(params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[469],"className":$s[724],"resourceName":$s[286],"httpMethod":$s[0],"signature":$s[105],"queryParams":[$s[94]]});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.places.Carousel
 * to simplify use of the contents resource.
 * This method will execute a GET for contents resources
 */ /*

 osapi.jive.corev3.places.Carousel.prototype.getContents = function(params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[358],"className":$s[724],"resourceName":$s[193],"httpMethod":$s[0],"signature":$s[105],"queryParams":[$s[185],$s[38],$s[94],$s[95],$s[420],$s[27],$s[328]]});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.places.Carousel
 * to simplify use of the extprops resource.
 * This method will execute a GET for extprops resources
 */ /*

 osapi.jive.corev3.places.Carousel.prototype.getExtProps = function(params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[359],"className":$s[724],"resourceName":$s[198],"httpMethod":$s[0],"signature":$s[105],"queryParams":[$s[94]]});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.places.Carousel
 * to simplify use of the featuredContent resource.
 * This method will execute a GET for featuredContent resources
 */ /*

 osapi.jive.corev3.places.Carousel.prototype.getFeaturedContent = function(params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[603],"className":$s[724],"resourceName":$s[540],"httpMethod":$s[0],"signature":$s[105],"queryParams":[$s[185],$s[94],$s[95]]});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.places.Carousel
 * to simplify use of the followers resource.
 * This method will execute a GET for followers resources
 */ /*

 osapi.jive.corev3.places.Carousel.prototype.getFollowers = function(params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[415],"className":$s[724],"resourceName":$s[250],"httpMethod":$s[0],"signature":$s[105],"queryParams":[$s[38],$s[94],$s[95],$s[328]]});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.places.Carousel
 * to simplify use of the followingIn resource.
 * This method will execute a GET for followingIn resources
 */ /*

 osapi.jive.corev3.places.Carousel.prototype.getFollowingIn = function(params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[518],"className":$s[724],"resourceName":$s[354],"httpMethod":$s[0],"signature":$s[105],"queryParams":[$s[94]]});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.places.Carousel
 * to simplify use of the statics resource.
 * This method will execute a GET for statics resources
 */ /*

 osapi.jive.corev3.places.Carousel.prototype.getStatics = function(params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[307],"className":$s[724],"resourceName":$s[173],"httpMethod":$s[0],"signature":$s[105],"queryParams":[$s[94],$s[329]]});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.places.Carousel
 * to simplify use of the self resource.
 * This method will execute a PUT for self resources
 */ /*

 osapi.jive.corev3.places.Carousel.prototype.update = function(params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[124],"className":$s[724],"resourceName":$s[25],"httpMethod":$s[1],"signature":$s[105],"queryParams":[$s[94],$s[179]]});
/**
 * define class osapi.jive.corev3.places.Category, to extend osapi.jive.corev3.AbstractObject
 */
defineClass($s[725], osapi.jive.corev3.AbstractObject, {"type":$s[190]}, [{"name":$s[66]}]);

/**
 * Describe the fields of osapi.jive.corev3.places.Category
 * @type {Array}
 */
osapi.jive.corev3.places.Category.fields = [
defineFieldMetadata($s[350],$s[79],null,true),
defineFieldMetadata($s[201],$s[127]),
defineFieldMetadata($s[468],$s[129]),
defineFieldMetadata("id",$s[79]),
defineFieldMetadata($s[259],$s[129]),
defineFieldMetadata($s[21],$s[79],null,true,true),
defineFieldMetadata($s[53],$s[79]),
defineFieldMetadata($s[263],$s[11]),
defineFieldMetadata($s[265],$s[77]),
defineFieldMetadata($s[28],"String[]",null,true,false,true),
defineFieldMetadata($s[30],$s[79],null,false,true),
defineFieldMetadata($s[235],$s[129]),
defineFieldMetadata($s[179],$s[11])
];

/**
 * Add an entry to the type registry for
 * osapi.jive.corev3.places.Category
 * @type {Object}
 */
typeRegistry[$s[190]] = {
    name: $s[190],
    ctor: osapi.jive.corev3.places.Category
};
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.places.Category
 * to simplify use of the self resource.
 * This method will execute a DELETE for self resources
 */ /*

 osapi.jive.corev3.places.Category.prototype.destroy = function() { [generated code] }

 */ defineInstanceMethod({"methodName":$s[141],"className":$s[725],"resourceName":$s[25],"httpMethod":$s[74],"signature":""});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.places.Category
 * to simplify use of the self resource.
 * This method will execute a GET for self resources
 */ /*

 osapi.jive.corev3.places.Category.prototype.get = function(params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[5],"className":$s[725],"resourceName":$s[25],"httpMethod":$s[0],"signature":$s[105],"queryParams":[$s[94]]});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.places.Category
 * to simplify use of the self resource.
 * This method will execute a PUT for self resources
 */ /*

 osapi.jive.corev3.places.Category.prototype.update = function(params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[124],"className":$s[725],"resourceName":$s[25],"httpMethod":$s[1],"signature":$s[105],"queryParams":[$s[501],$s[94]]});
/**
 * define class osapi.jive.corev3.places.CheckPoint, to extend osapi.jive.corev3.AbstractObject
 */
defineClass($s[757], osapi.jive.corev3.AbstractObject, {"type":$s[287]}, []);

/**
 * Describe the fields of osapi.jive.corev3.places.CheckPoint
 * @type {Array}
 */
osapi.jive.corev3.places.CheckPoint.fields = [
defineFieldMetadata($s[350],$s[79],null,true),
defineFieldMetadata($s[142],$s[11],null,true,true),
defineFieldMetadata($s[201],$s[127]),
defineFieldMetadata($s[468],$s[129]),
defineFieldMetadata("id",$s[79]),
defineFieldMetadata($s[259],$s[129]),
defineFieldMetadata($s[21],$s[79],null,true,true),
defineFieldMetadata($s[165],$s[130],$s[165]),
defineFieldMetadata($s[263],$s[11]),
defineFieldMetadata($s[265],$s[77]),
defineFieldMetadata($s[28],"String[]",null,false,false,true),
defineFieldMetadata($s[30],$s[79]),
defineFieldMetadata($s[235],$s[129]),
defineFieldMetadata($s[179],$s[11])
];

/**
 * Add an entry to the type registry for
 * osapi.jive.corev3.places.CheckPoint
 * @type {Object}
 */
typeRegistry[$s[287]] = {
    name: $s[287],
    ctor: osapi.jive.corev3.places.CheckPoint
};
/**
 * define class osapi.jive.corev3.communications.Collaboration, to extend osapi.jive.corev3.AbstractObject
 */
defineClass($s[855], osapi.jive.corev3.AbstractObject, {"type":$s[453]}, [{"name":$s[66]}]);

/**
 * Describe the fields of osapi.jive.corev3.communications.Collaboration
 * @type {Array}
 */
osapi.jive.corev3.communications.Collaboration.fields = [
defineFieldMetadata($s[279],$s[129]),
defineFieldMetadata($s[84],$s[78],$s[108]),
defineFieldMetadata($s[610],$s[79]),
defineFieldMetadata($s[581],$s[79]),
defineFieldMetadata($s[137],$s[337],$s[345],true,true),
defineFieldMetadata($s[244],$s[79]),
defineFieldMetadata($s[457],"Image[]",$s[44],false,false,true),
defineFieldMetadata($s[458],"ContentVideo[]",$s[400],false,false,true),
defineFieldMetadata($s[296],$s[79]),
defineFieldMetadata($s[588],$s[11]),
defineFieldMetadata($s[467],$s[129]),
defineFieldMetadata($s[201],$s[127]),
defineFieldMetadata($s[468],$s[129]),
defineFieldMetadata($s[471],$s[79]),
defineFieldMetadata($s[566],$s[79]),
defineFieldMetadata($s[472],$s[79]),
defineFieldMetadata($s[152],$s[79]),
defineFieldMetadata("id",$s[79]),
defineFieldMetadata($s[45],$s[79]),
defineFieldMetadata($s[425],$s[129]),
defineFieldMetadata($s[568],$s[11]),
defineFieldMetadata($s[259],$s[129]),
defineFieldMetadata($s[106],$s[79]),
defineFieldMetadata($s[481],$s[131],$s[176]),
defineFieldMetadata($s[621],$s[127]),
defineFieldMetadata($s[376],$s[131],$s[176]),
defineFieldMetadata($s[482],$s[127]),
defineFieldMetadata($s[434],"Person[]",$s[108],false,false,true),
defineFieldMetadata($s[528],$s[127]),
defineFieldMetadata($s[263],$s[11]),
defineFieldMetadata($s[323],$s[129]),
defineFieldMetadata($s[265],$s[77]),
defineFieldMetadata($s[531],$s[77]),
defineFieldMetadata($s[118],$s[79]),
defineFieldMetadata($s[175],$s[79]),
defineFieldMetadata($s[28],"String[]",null,true,false,true),
defineFieldMetadata($s[30],$s[79]),
defineFieldMetadata($s[332],$s[79]),
defineFieldMetadata($s[235],$s[129]),
defineFieldMetadata($s[179],$s[11]),
defineFieldMetadata($s[31],$s[79]),
defineFieldMetadata($s[271],$s[129]),
defineFieldMetadata($s[664],$s[127])
];

/**
 * Add an entry to the type registry for
 * osapi.jive.corev3.communications.Collaboration
 * @type {Object}
 */
typeRegistry[$s[453]] = {
    name: $s[453],
    ctor: osapi.jive.corev3.communications.Collaboration
};
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.communications.Collaboration
 * to simplify use of the participants resource.
 * This method will execute a POST for participants resources
 */ /*

 osapi.jive.corev3.communications.Collaboration.prototype.addParticipant = function(data, params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[499],"className":$s[855],"resourceName":$s[434],"httpMethod":$s[12],"signature":"data, params","queryParams":[$s[94]]});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.communications.Collaboration
 * to simplify use of the comments resource.
 * This method will execute a POST for comments resources
 */ /*

 osapi.jive.corev3.communications.Collaboration.prototype.createComment = function(data, params) { [generated code] }

 */ defineInstanceMethod({"signature":"data, params","queryParams":[$s[84],$s[94],$s[263],$s[179]],"methodName":$s[460],"className":$s[855],"resourceName":$s[192],"httpMethod":$s[12],"paramOverrides":{"parent":"@this.resources.self.ref","type":$s[136]}});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.communications.Collaboration
 * to simplify use of the extprops resource.
 * This method will execute a POST for extprops resources
 */ /*

 osapi.jive.corev3.communications.Collaboration.prototype.createExtProps = function(data, params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[506],"className":$s[855],"resourceName":$s[198],"httpMethod":$s[12],"signature":"data, params","queryParams":[$s[94]]});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.communications.Collaboration
 * to simplify use of the interactions resource.
 * This method will execute a POST for interactions resources
 */ /*

 osapi.jive.corev3.communications.Collaboration.prototype.createInteraction = function(data, params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[583],"className":$s[855],"resourceName":$s[423],"httpMethod":$s[12],"signature":"data, params","queryParams":[$s[94]]});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.communications.Collaboration
 * to simplify use of the outcomes resource.
 * This method will execute a POST for outcomes resources
 */ /*

 osapi.jive.corev3.communications.Collaboration.prototype.createOutcome = function(data, params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[463],"className":$s[855],"resourceName":$s[218],"httpMethod":$s[12],"signature":"data, params","queryParams":[$s[94]]});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.communications.Collaboration
 * to simplify use of the extprops resource.
 * This method will execute a DELETE for extprops resources
 */ /*

 osapi.jive.corev3.communications.Collaboration.prototype.deleteExtProps = function() { [generated code] }

 */ defineInstanceMethod({"methodName":$s[507],"className":$s[855],"resourceName":$s[198],"httpMethod":$s[74],"signature":""});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.communications.Collaboration
 * to simplify use of the self resource.
 * This method will execute a DELETE for self resources
 */ /*

 osapi.jive.corev3.communications.Collaboration.prototype.destroy = function() { [generated code] }

 */ defineInstanceMethod({"methodName":$s[141],"className":$s[855],"resourceName":$s[25],"httpMethod":$s[74],"signature":""});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.communications.Collaboration
 * to simplify use of the self resource.
 * This method will execute a GET for self resources
 */ /*

 osapi.jive.corev3.communications.Collaboration.prototype.get = function(params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[5],"className":$s[855],"resourceName":$s[25],"httpMethod":$s[0],"signature":$s[105],"queryParams":[$s[94]]});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.communications.Collaboration
 * to simplify use of the childOutcomeTypes resource.
 * This method will execute a GET for childOutcomeTypes resources
 */ /*

 osapi.jive.corev3.communications.Collaboration.prototype.getChildOutcomeTypes = function(params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[619],"className":$s[855],"resourceName":$s[580],"httpMethod":$s[0],"signature":$s[105],"queryParams":[$s[38],$s[94],$s[209],$s[328]]});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.communications.Collaboration
 * to simplify use of the comments resource.
 * This method will execute a GET for comments resources
 */ /*

 osapi.jive.corev3.communications.Collaboration.prototype.getComments = function(params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[357],"className":$s[855],"resourceName":$s[192],"httpMethod":$s[0],"signature":$s[105],"queryParams":[$s[82],$s[84],$s[38],$s[511],$s[94],$s[95],$s[418],$s[99],$s[27],$s[328]]});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.communications.Collaboration
 * to simplify use of the extprops resource.
 * This method will execute a GET for extprops resources
 */ /*

 osapi.jive.corev3.communications.Collaboration.prototype.getExtProps = function(params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[359],"className":$s[855],"resourceName":$s[198],"httpMethod":$s[0],"signature":$s[105],"queryParams":[$s[94]]});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.communications.Collaboration
 * to simplify use of the interactions resource.
 * This method will execute a GET for interactions resources
 */ /*

 osapi.jive.corev3.communications.Collaboration.prototype.getInteractions = function(params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[543],"className":$s[855],"resourceName":$s[423],"httpMethod":$s[0],"signature":$s[105],"queryParams":[$s[36],$s[87],$s[38],$s[94],$s[95]]});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.communications.Collaboration
 * to simplify use of the outcomeTypes resource.
 * This method will execute a GET for outcomeTypes resources
 */ /*

 osapi.jive.corev3.communications.Collaboration.prototype.getOutcomeTypes = function(params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[544],"className":$s[855],"resourceName":$s[433],"httpMethod":$s[0],"signature":$s[105],"queryParams":[$s[38],$s[94],$s[328]]});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.communications.Collaboration
 * to simplify use of the outcomes resource.
 * This method will execute a GET for outcomes resources
 */ /*

 osapi.jive.corev3.communications.Collaboration.prototype.getOutcomes = function(params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[361],"className":$s[855],"resourceName":$s[218],"httpMethod":$s[0],"signature":$s[105],"queryParams":[$s[38],$s[94],$s[632],$s[328]]});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.communications.Collaboration
 * to simplify use of the subject resource.
 * This method will execute a POST for subject resources
 */ /*

 osapi.jive.corev3.communications.Collaboration.prototype.setSubject = function(data, params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[327],"className":$s[855],"resourceName":$s[175],"httpMethod":$s[12],"signature":"data, params","queryParams":[$s[94]]});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.communications.Collaboration
 * to simplify use of the self resource.
 * This method will execute a PUT for self resources
 */ /*

 osapi.jive.corev3.communications.Collaboration.prototype.update = function(params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[124],"className":$s[855],"resourceName":$s[25],"httpMethod":$s[1],"signature":$s[105],"queryParams":[$s[94]]});
/**
 * define class osapi.jive.corev3.contents.Comment, to extend osapi.jive.corev3.AbstractObject
 */
defineClass($s[733], osapi.jive.corev3.AbstractObject, {"type":$s[136]}, [{"name":$s[66]}]);

/**
 * Describe the fields of osapi.jive.corev3.contents.Comment
 * @type {Array}
 */
osapi.jive.corev3.contents.Comment.fields = [
defineFieldMetadata($s[279],$s[129]),
defineFieldMetadata($s[84],$s[78],$s[108]),
defineFieldMetadata($s[503],$s[127]),
defineFieldMetadata($s[559],$s[127]),
defineFieldMetadata($s[454],$s[129]),
defineFieldMetadata($s[137],$s[337],$s[345],true,true),
defineFieldMetadata($s[244],$s[79]),
defineFieldMetadata($s[457],"Image[]",$s[44],false,false,true),
defineFieldMetadata($s[458],"ContentVideo[]",$s[400],false,false,true),
defineFieldMetadata($s[296],$s[79]),
defineFieldMetadata($s[467],$s[129]),
defineFieldMetadata($s[201],$s[127]),
defineFieldMetadata($s[468],$s[129]),
defineFieldMetadata($s[548],$s[127]),
defineFieldMetadata($s[592],$s[127]),
defineFieldMetadata($s[417],$s[129]),
defineFieldMetadata($s[471],$s[79]),
defineFieldMetadata($s[566],$s[79]),
defineFieldMetadata($s[472],$s[79]),
defineFieldMetadata($s[152],$s[79]),
defineFieldMetadata("id",$s[79]),
defineFieldMetadata($s[45],$s[79]),
defineFieldMetadata($s[425],$s[129]),
defineFieldMetadata($s[568],$s[11]),
defineFieldMetadata($s[259],$s[129]),
defineFieldMetadata($s[317],$s[277],$s[317],true),
defineFieldMetadata($s[480],$s[77]),
defineFieldMetadata($s[574],"String[]",null,false,false,true),
defineFieldMetadata($s[433],"OutcomeType[]",$s[375],true,false,true),
defineFieldMetadata($s[319],$s[129]),
defineFieldMetadata($s[106],$s[79],null,true,true),
defineFieldMetadata($s[481],$s[131],$s[176]),
defineFieldMetadata($s[621],$s[127]),
defineFieldMetadata($s[220],$s[129]),
defineFieldMetadata($s[376],$s[131],$s[176]),
defineFieldMetadata($s[482],$s[127]),
defineFieldMetadata($s[528],$s[127]),
defineFieldMetadata($s[263],$s[11]),
defineFieldMetadata($s[626],$s[79]),
defineFieldMetadata($s[484],$s[79]),
defineFieldMetadata($s[323],$s[129]),
defineFieldMetadata($s[265],$s[77]),
defineFieldMetadata($s[325],$s[78],$s[108]),
defineFieldMetadata($s[530],$s[79]),
defineFieldMetadata($s[381],$s[79]),
defineFieldMetadata($s[231],$s[79]),
defineFieldMetadata($s[170],$s[79]),
defineFieldMetadata($s[531],$s[77]),
defineFieldMetadata($s[118],$s[79]),
defineFieldMetadata($s[175],$s[79]),
defineFieldMetadata($s[28],"String[]",null,false,false,true),
defineFieldMetadata($s[30],$s[79],null,false,true),
defineFieldMetadata($s[235],$s[129]),
defineFieldMetadata($s[577],$s[127]),
defineFieldMetadata($s[535],$s[129]),
defineFieldMetadata($s[179],$s[11]),
defineFieldMetadata($s[31],$s[79]),
defineFieldMetadata($s[10],$s[2],$s[10],true),
defineFieldMetadata($s[271],$s[129]),
defineFieldMetadata($s[664],$s[127])
];

/**
 * Add an entry to the type registry for
 * osapi.jive.corev3.contents.Comment
 * @type {Object}
 */
typeRegistry[$s[136]] = {
    name: $s[136],
    ctor: osapi.jive.corev3.contents.Comment
};
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.contents.Comment
 * to simplify use of the comments resource.
 * This method will execute a POST for comments resources
 */ /*

 osapi.jive.corev3.contents.Comment.prototype.createComment = function(data, params) { [generated code] }

 */ defineInstanceMethod({"signature":"data, params","queryParams":[$s[94],$s[263],$s[179]],"methodName":$s[460],"className":$s[733],"resourceName":$s[192],"httpMethod":$s[12],"paramOverrides":{"parent":"@this.resources.self.ref","type":$s[136]}});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.contents.Comment
 * to simplify use of the extprops resource.
 * This method will execute a POST for extprops resources
 */ /*

 osapi.jive.corev3.contents.Comment.prototype.createExtProps = function(data, params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[506],"className":$s[733],"resourceName":$s[198],"httpMethod":$s[12],"signature":"data, params","queryParams":[$s[94]]});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.contents.Comment
 * to simplify use of the outcomes resource.
 * This method will execute a POST for outcomes resources
 */ /*

 osapi.jive.corev3.contents.Comment.prototype.createOutcome = function(data, params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[463],"className":$s[733],"resourceName":$s[218],"httpMethod":$s[12],"signature":"data, params","queryParams":[$s[94]]});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.contents.Comment
 * to simplify use of the extprops resource.
 * This method will execute a DELETE for extprops resources
 */ /*

 osapi.jive.corev3.contents.Comment.prototype.deleteExtProps = function() { [generated code] }

 */ defineInstanceMethod({"methodName":$s[507],"className":$s[733],"resourceName":$s[198],"httpMethod":$s[74],"signature":""});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.contents.Comment
 * to simplify use of the self resource.
 * This method will execute a DELETE for self resources
 */ /*

 osapi.jive.corev3.contents.Comment.prototype.destroy = function() { [generated code] }

 */ defineInstanceMethod({"methodName":$s[141],"className":$s[733],"resourceName":$s[25],"httpMethod":$s[74],"signature":""});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.contents.Comment
 * to simplify use of the self resource.
 * This method will execute a GET for self resources
 */ /*

 osapi.jive.corev3.contents.Comment.prototype.get = function(params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[5],"className":$s[733],"resourceName":$s[25],"httpMethod":$s[0],"signature":$s[105],"queryParams":[$s[185],$s[94]]});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.contents.Comment
 * to simplify use of the childOutcomeTypes resource.
 * This method will execute a GET for childOutcomeTypes resources
 */ /*

 osapi.jive.corev3.contents.Comment.prototype.getChildOutcomeTypes = function(params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[619],"className":$s[733],"resourceName":$s[580],"httpMethod":$s[0],"signature":$s[105],"queryParams":[$s[38],$s[94],$s[209],$s[328]]});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.contents.Comment
 * to simplify use of the comments resource.
 * This method will execute a GET for comments resources
 */ /*

 osapi.jive.corev3.contents.Comment.prototype.getComments = function(params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[357],"className":$s[733],"resourceName":$s[192],"httpMethod":$s[0],"signature":$s[105],"queryParams":[$s[82],$s[38],$s[511],$s[94],$s[328]]});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.contents.Comment
 * to simplify use of the extprops resource.
 * This method will execute a GET for extprops resources
 */ /*

 osapi.jive.corev3.contents.Comment.prototype.getExtProps = function(params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[359],"className":$s[733],"resourceName":$s[198],"httpMethod":$s[0],"signature":$s[105],"queryParams":[$s[94]]});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.contents.Comment
 * to simplify use of the likes resource.
 * This method will execute a GET for likes resources
 */ /*

 osapi.jive.corev3.contents.Comment.prototype.getLikes = function(params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[203],"className":$s[733],"resourceName":$s[46],"httpMethod":$s[0],"signature":$s[105],"queryParams":[$s[38],$s[94],$s[328]]});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.contents.Comment
 * to simplify use of the markedHelpful resource.
 * This method will execute a GET for markedHelpful resources
 */ /*

 osapi.jive.corev3.contents.Comment.prototype.getMarkedHelpful = function(params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[564],"className":$s[733],"resourceName":$s[475],"httpMethod":$s[0],"signature":$s[105],"queryParams":[$s[38],$s[94],$s[328]]});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.contents.Comment
 * to simplify use of the markedUnhelpful resource.
 * This method will execute a GET for markedUnhelpful resources
 */ /*

 osapi.jive.corev3.contents.Comment.prototype.getMarkedUnhelpful = function(params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[604],"className":$s[733],"resourceName":$s[549],"httpMethod":$s[0],"signature":$s[105],"queryParams":[$s[38],$s[94],$s[328]]});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.contents.Comment
 * to simplify use of the outcomeTypes resource.
 * This method will execute a GET for outcomeTypes resources
 */ /*

 osapi.jive.corev3.contents.Comment.prototype.getOutcomeTypes = function(params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[544],"className":$s[733],"resourceName":$s[433],"httpMethod":$s[0],"signature":$s[105],"queryParams":[$s[38],$s[94],$s[328]]});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.contents.Comment
 * to simplify use of the outcomes resource.
 * This method will execute a GET for outcomes resources
 */ /*

 osapi.jive.corev3.contents.Comment.prototype.getOutcomes = function(params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[361],"className":$s[733],"resourceName":$s[218],"httpMethod":$s[0],"signature":$s[105],"queryParams":[$s[38],$s[94],$s[328]]});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.contents.Comment
 * to simplify use of the likes resource.
 * This method will execute a POST for likes resources
 */ /*

 osapi.jive.corev3.contents.Comment.prototype.like = function(params) { [generated code] }

 */ defineInstanceMethod({"signature":$s[105],"queryParams":[],"methodName":$s[20],"className":$s[733],"resourceName":$s[46],"httpMethod":$s[12],"hasBody":false});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.contents.Comment
 * to simplify use of the helpful resource.
 * This method will execute a POST for helpful resources
 */ /*

 osapi.jive.corev3.contents.Comment.prototype.markHelpful = function(params) { [generated code] }

 */ defineInstanceMethod({"signature":$s[105],"queryParams":[],"methodName":$s[370],"className":$s[733],"resourceName":$s[150],"httpMethod":$s[12],"hasBody":false});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.contents.Comment
 * to simplify use of the unhelpful resource.
 * This method will execute a POST for unhelpful resources
 */ /*

 osapi.jive.corev3.contents.Comment.prototype.markUnhelpful = function(params) { [generated code] }

 */ defineInstanceMethod({"signature":$s[105],"queryParams":[],"methodName":$s[474],"className":$s[733],"resourceName":$s[270],"httpMethod":$s[12],"hasBody":false});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.contents.Comment
 * to simplify use of the likes resource.
 * This method will execute a DELETE for likes resources
 */ /*

 osapi.jive.corev3.contents.Comment.prototype.unlike = function() { [generated code] }

 */ defineInstanceMethod({"methodName":$s[123],"className":$s[733],"resourceName":$s[46],"httpMethod":$s[74],"signature":""});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.contents.Comment
 * to simplify use of the helpful resource.
 * This method will execute a DELETE for helpful resources
 */ /*

 osapi.jive.corev3.contents.Comment.prototype.unmarkHelpful = function() { [generated code] }

 */ defineInstanceMethod({"methodName":$s[491],"className":$s[733],"resourceName":$s[150],"httpMethod":$s[74],"signature":""});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.contents.Comment
 * to simplify use of the unhelpful resource.
 * This method will execute a DELETE for unhelpful resources
 */ /*

 osapi.jive.corev3.contents.Comment.prototype.unmarkUnhelpful = function() { [generated code] }

 */ defineInstanceMethod({"methodName":$s[556],"className":$s[733],"resourceName":$s[270],"httpMethod":$s[74],"signature":""});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.contents.Comment
 * to simplify use of the self resource.
 * This method will execute a PUT for self resources
 */ /*

 osapi.jive.corev3.contents.Comment.prototype.update = function(params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[124],"className":$s[733],"resourceName":$s[25],"httpMethod":$s[1],"signature":$s[105],"queryParams":[$s[94],$s[179]]});
/**
 * define class osapi.jive.corev3.contents.ContentVersion, to extend osapi.jive.corev3.AbstractObject
 */
defineClass($s[816], osapi.jive.corev3.AbstractObject, {"type":$s[504]}, [{"name":$s[66]}]);

/**
 * Describe the fields of osapi.jive.corev3.contents.ContentVersion
 * @type {Array}
 */
osapi.jive.corev3.contents.ContentVersion.fields = [
defineFieldMetadata($s[84],$s[78],$s[108]),
defineFieldMetadata($s[242],$s[79]),
defineFieldMetadata($s[137],$s[128],$s[3]),
defineFieldMetadata($s[201],$s[127]),
defineFieldMetadata($s[468],$s[129]),
defineFieldMetadata("id",$s[79]),
defineFieldMetadata($s[259],$s[129]),
defineFieldMetadata($s[429],$s[127]),
defineFieldMetadata($s[263],$s[11]),
defineFieldMetadata($s[265],$s[77]),
defineFieldMetadata($s[118],$s[79],null,true),
defineFieldMetadata($s[28],"String[]",null,false,false,true),
defineFieldMetadata($s[30],$s[79]),
defineFieldMetadata($s[235],$s[129]),
defineFieldMetadata($s[179],$s[11]),
defineFieldMetadata($s[492],$s[129])
];

/**
 * Add an entry to the type registry for
 * osapi.jive.corev3.contents.ContentVersion
 * @type {Object}
 */
typeRegistry[$s[504]] = {
    name: $s[504],
    ctor: osapi.jive.corev3.contents.ContentVersion
};
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.contents.ContentVersion
 * to simplify use of the self resource.
 * This method will execute a GET for self resources
 */ /*

 osapi.jive.corev3.contents.ContentVersion.prototype.get = function(params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[5],"className":$s[816],"resourceName":$s[25],"httpMethod":$s[0],"signature":$s[105],"queryParams":[$s[94]]});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.contents.ContentVersion
 * to simplify use of the restore resource.
 * This method will execute a POST for restore resources
 */ /*

 osapi.jive.corev3.contents.ContentVersion.prototype.restore = function(params) { [generated code] }

 */ defineInstanceMethod({"signature":$s[105],"queryParams":[$s[94]],"methodName":$s[168],"className":$s[816],"resourceName":$s[168],"httpMethod":$s[12],"hasBody":false});
/**
 * define class osapi.jive.corev3.contents.Discussion, to extend osapi.jive.corev3.AbstractObject
 */
defineClass($s[779], osapi.jive.corev3.AbstractObject, {"type":$s[293]}, [{"name":$s[66]}]);

/**
 * Describe the fields of osapi.jive.corev3.contents.Discussion
 * @type {Array}
 */
osapi.jive.corev3.contents.Discussion.fields = [
defineFieldMetadata($s[279],$s[129]),
defineFieldMetadata($s[83],$s[79]),
defineFieldMetadata($s[187],$s[127]),
defineFieldMetadata($s[341],"Attachment[]",$s[281],true,false,true),
defineFieldMetadata($s[84],$s[78],$s[108]),
defineFieldMetadata($s[133],"Person[]",$s[108],false,false,true),
defineFieldMetadata($s[283],$s[79]),
defineFieldMetadata($s[395],$s[131],$s[176]),
defineFieldMetadata($s[285],$s[131],$s[176]),
defineFieldMetadata($s[286],"String[]",null,true,false,true),
defineFieldMetadata($s[137],$s[337],$s[345],true,true),
defineFieldMetadata($s[244],$s[79]),
defineFieldMetadata($s[457],"Image[]",$s[44],false,false,true),
defineFieldMetadata($s[458],"ContentVideo[]",$s[400],false,false,true),
defineFieldMetadata($s[539],"Person[]",$s[108],true,false,true),
defineFieldMetadata($s[467],$s[129]),
defineFieldMetadata($s[201],$s[127]),
defineFieldMetadata($s[468],$s[129]),
defineFieldMetadata($s[150],"String[]",null,false,false,true),
defineFieldMetadata($s[471],$s[79]),
defineFieldMetadata($s[566],$s[79]),
defineFieldMetadata($s[472],$s[79]),
defineFieldMetadata($s[152],$s[79]),
defineFieldMetadata("id",$s[79]),
defineFieldMetadata($s[45],$s[79]),
defineFieldMetadata($s[425],$s[129]),
defineFieldMetadata($s[568],$s[11]),
defineFieldMetadata($s[259],$s[129]),
defineFieldMetadata($s[317],$s[277],$s[317],true),
defineFieldMetadata($s[480],$s[77]),
defineFieldMetadata($s[574],"String[]",null,false,false,true),
defineFieldMetadata($s[433],"OutcomeType[]",$s[375],true,false,true),
defineFieldMetadata($s[106],$s[79],null,true),
defineFieldMetadata($s[481],$s[131],$s[176]),
defineFieldMetadata($s[621],$s[127]),
defineFieldMetadata($s[376],$s[131],$s[176]),
defineFieldMetadata($s[482],$s[127]),
defineFieldMetadata($s[223],$s[79],null,true),
defineFieldMetadata($s[528],$s[127]),
defineFieldMetadata($s[263],$s[11]),
defineFieldMetadata($s[227],$s[127]),
defineFieldMetadata($s[323],$s[129]),
defineFieldMetadata($s[229],$s[79],null,true),
defineFieldMetadata($s[265],$s[77]),
defineFieldMetadata($s[554],$s[127]),
defineFieldMetadata($s[593],$s[129]),
defineFieldMetadata($s[531],$s[77]),
defineFieldMetadata($s[118],$s[79]),
defineFieldMetadata($s[175],$s[79],null,true,true),
defineFieldMetadata($s[28],"String[]",null,true,false,true),
defineFieldMetadata($s[30],$s[79],null,false,true),
defineFieldMetadata($s[235],$s[129]),
defineFieldMetadata($s[179],$s[11]),
defineFieldMetadata($s[67],"Person[]",$s[108],true,false,true),
defineFieldMetadata($s[31],$s[79]),
defineFieldMetadata($s[10],$s[2],$s[10],true),
defineFieldMetadata($s[271],$s[129]),
defineFieldMetadata($s[335],$s[79],null,true),
defineFieldMetadata($s[664],$s[127])
];

/**
 * Add an entry to the type registry for
 * osapi.jive.corev3.contents.Discussion
 * @type {Object}
 */
typeRegistry[$s[293]] = {
    name: $s[293],
    ctor: osapi.jive.corev3.contents.Discussion
};
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.contents.Discussion
 * to simplify use of the extprops resource.
 * This method will execute a POST for extprops resources
 */ /*

 osapi.jive.corev3.contents.Discussion.prototype.createExtProps = function(data, params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[506],"className":$s[779],"resourceName":$s[198],"httpMethod":$s[12],"signature":"data, params","queryParams":[$s[94]]});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.contents.Discussion
 * to simplify use of the outcomes resource.
 * This method will execute a POST for outcomes resources
 */ /*

 osapi.jive.corev3.contents.Discussion.prototype.createOutcome = function(data, params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[463],"className":$s[779],"resourceName":$s[218],"httpMethod":$s[12],"signature":"data, params","queryParams":[$s[94]]});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.contents.Discussion
 * to simplify use of the messages resource.
 * This method will execute a POST for messages resources
 */ /*

 osapi.jive.corev3.contents.Discussion.prototype.createReply = function(data, params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[348],"className":$s[779],"resourceName":$s[217],"httpMethod":$s[12],"signature":"data, params","queryParams":[$s[94],$s[263],$s[179]]});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.contents.Discussion
 * to simplify use of the extprops resource.
 * This method will execute a DELETE for extprops resources
 */ /*

 osapi.jive.corev3.contents.Discussion.prototype.deleteExtProps = function() { [generated code] }

 */ defineInstanceMethod({"methodName":$s[507],"className":$s[779],"resourceName":$s[198],"httpMethod":$s[74],"signature":""});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.contents.Discussion
 * to simplify use of the self resource.
 * This method will execute a DELETE for self resources
 */ /*

 osapi.jive.corev3.contents.Discussion.prototype.destroy = function() { [generated code] }

 */ defineInstanceMethod({"methodName":$s[141],"className":$s[779],"resourceName":$s[25],"httpMethod":$s[74],"signature":""});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.contents.Discussion
 * to simplify use of the self resource.
 * This method will execute a GET for self resources
 */ /*

 osapi.jive.corev3.contents.Discussion.prototype.get = function(params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[5],"className":$s[779],"resourceName":$s[25],"httpMethod":$s[0],"signature":$s[105],"queryParams":[$s[185],$s[245],$s[94]]});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.contents.Discussion
 * to simplify use of the childOutcomeTypes resource.
 * This method will execute a GET for childOutcomeTypes resources
 */ /*

 osapi.jive.corev3.contents.Discussion.prototype.getChildOutcomeTypes = function(params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[619],"className":$s[779],"resourceName":$s[580],"httpMethod":$s[0],"signature":$s[105],"queryParams":[$s[38],$s[94],$s[209],$s[328]]});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.contents.Discussion
 * to simplify use of the extprops resource.
 * This method will execute a GET for extprops resources
 */ /*

 osapi.jive.corev3.contents.Discussion.prototype.getExtProps = function(params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[359],"className":$s[779],"resourceName":$s[198],"httpMethod":$s[0],"signature":$s[105],"queryParams":[$s[94]]});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.contents.Discussion
 * to simplify use of the followers resource.
 * This method will execute a GET for followers resources
 */ /*

 osapi.jive.corev3.contents.Discussion.prototype.getFollowers = function(params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[415],"className":$s[779],"resourceName":$s[250],"httpMethod":$s[0],"signature":$s[105],"queryParams":[$s[38],$s[94],$s[95],$s[328]]});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.contents.Discussion
 * to simplify use of the followingIn resource.
 * This method will execute a GET for followingIn resources
 */ /*

 osapi.jive.corev3.contents.Discussion.prototype.getFollowingIn = function(params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[518],"className":$s[779],"resourceName":$s[354],"httpMethod":$s[0],"signature":$s[105],"queryParams":[$s[94]]});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.contents.Discussion
 * to simplify use of the likes resource.
 * This method will execute a GET for likes resources
 */ /*

 osapi.jive.corev3.contents.Discussion.prototype.getLikes = function(params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[203],"className":$s[779],"resourceName":$s[46],"httpMethod":$s[0],"signature":$s[105],"queryParams":[$s[38],$s[94],$s[328]]});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.contents.Discussion
 * to simplify use of the outcomeTypes resource.
 * This method will execute a GET for outcomeTypes resources
 */ /*

 osapi.jive.corev3.contents.Discussion.prototype.getOutcomeTypes = function(params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[544],"className":$s[779],"resourceName":$s[433],"httpMethod":$s[0],"signature":$s[105],"queryParams":[$s[38],$s[94],$s[328]]});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.contents.Discussion
 * to simplify use of the outcomes resource.
 * This method will execute a GET for outcomes resources
 */ /*

 osapi.jive.corev3.contents.Discussion.prototype.getOutcomes = function(params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[361],"className":$s[779],"resourceName":$s[218],"httpMethod":$s[0],"signature":$s[105],"queryParams":[$s[38],$s[94],$s[632],$s[328]]});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.contents.Discussion
 * to simplify use of the messages resource.
 * This method will execute a GET for messages resources
 */ /*

 osapi.jive.corev3.contents.Discussion.prototype.getReplies = function(params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[305],"className":$s[779],"resourceName":$s[217],"httpMethod":$s[0],"signature":$s[105],"queryParams":[$s[82],$s[38],$s[511],$s[94],$s[95],$s[418],$s[476],$s[328]]});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.contents.Discussion
 * to simplify use of the sameQuestions resource.
 * This method will execute a GET for sameQuestions resources
 */ /*

 osapi.jive.corev3.contents.Discussion.prototype.getSameQuestions = function(params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[565],"className":$s[779],"resourceName":$s[487],"httpMethod":$s[0],"signature":$s[105]});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.contents.Discussion
 * to simplify use of the likes resource.
 * This method will execute a POST for likes resources
 */ /*

 osapi.jive.corev3.contents.Discussion.prototype.like = function(params) { [generated code] }

 */ defineInstanceMethod({"signature":$s[105],"queryParams":[],"methodName":$s[20],"className":$s[779],"resourceName":$s[46],"httpMethod":$s[12],"hasBody":false});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.contents.Discussion
 * to simplify use of the read resource.
 * This method will execute a POST for read resources
 */ /*

 osapi.jive.corev3.contents.Discussion.prototype.markRead = function(params) { [generated code] }

 */ defineInstanceMethod({"signature":$s[105],"queryParams":[],"methodName":$s[216],"className":$s[779],"resourceName":$s[24],"httpMethod":$s[12],"hasBody":false});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.contents.Discussion
 * to simplify use of the sameQuestion resource.
 * This method will execute a POST for sameQuestion resources
 */ /*

 osapi.jive.corev3.contents.Discussion.prototype.markSameQuestion = function(data, params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[570],"className":$s[779],"resourceName":$s[440],"httpMethod":$s[12],"signature":"data, params"});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.contents.Discussion
 * to simplify use of the read resource.
 * This method will execute a DELETE for read resources
 */ /*

 osapi.jive.corev3.contents.Discussion.prototype.markUnread = function() { [generated code] }

 */ defineInstanceMethod({"methodName":$s[313],"className":$s[779],"resourceName":$s[24],"httpMethod":$s[74],"signature":""});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.contents.Discussion
 * to simplify use of the likes resource.
 * This method will execute a DELETE for likes resources
 */ /*

 osapi.jive.corev3.contents.Discussion.prototype.unlike = function() { [generated code] }

 */ defineInstanceMethod({"methodName":$s[123],"className":$s[779],"resourceName":$s[46],"httpMethod":$s[74],"signature":""});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.contents.Discussion
 * to simplify use of the sameQuestion resource.
 * This method will execute a DELETE for sameQuestion resources
 */ /*

 osapi.jive.corev3.contents.Discussion.prototype.unmarkSameQuestion = function() { [generated code] }

 */ defineInstanceMethod({"methodName":$s[606],"className":$s[779],"resourceName":$s[440],"httpMethod":$s[74],"signature":""});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.contents.Discussion
 * to simplify use of the self resource.
 * This method will execute a PUT for self resources
 */ /*

 osapi.jive.corev3.contents.Discussion.prototype.update = function(params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[124],"className":$s[779],"resourceName":$s[25],"httpMethod":$s[1],"signature":$s[105],"queryParams":[$s[185],$s[94],$s[47],$s[179]]});
/**
 * define class osapi.jive.corev3.communications.DirectMessage, to extend osapi.jive.corev3.AbstractObject
 */
defineClass($s[856], osapi.jive.corev3.AbstractObject, {"type":"dm"}, [{"name":$s[66]}]);

/**
 * Describe the fields of osapi.jive.corev3.communications.DirectMessage
 * @type {Array}
 */
osapi.jive.corev3.communications.DirectMessage.fields = [
defineFieldMetadata($s[279],$s[129]),
defineFieldMetadata($s[84],$s[78],$s[108]),
defineFieldMetadata($s[137],$s[337],$s[345],true,true),
defineFieldMetadata($s[244],$s[79]),
defineFieldMetadata($s[457],"Image[]",$s[44],false,false,true),
defineFieldMetadata($s[458],"ContentVideo[]",$s[400],false,false,true),
defineFieldMetadata($s[467],$s[129]),
defineFieldMetadata($s[201],$s[127]),
defineFieldMetadata($s[468],$s[129]),
defineFieldMetadata($s[471],$s[79]),
defineFieldMetadata($s[566],$s[79]),
defineFieldMetadata($s[472],$s[79]),
defineFieldMetadata($s[152],$s[79]),
defineFieldMetadata("id",$s[79]),
defineFieldMetadata($s[45],$s[79]),
defineFieldMetadata($s[425],$s[129]),
defineFieldMetadata($s[568],$s[11]),
defineFieldMetadata($s[259],$s[129]),
defineFieldMetadata($s[106],$s[79]),
defineFieldMetadata($s[481],$s[131],$s[176]),
defineFieldMetadata($s[621],$s[127]),
defineFieldMetadata($s[376],$s[131],$s[176]),
defineFieldMetadata($s[482],$s[127]),
defineFieldMetadata($s[434],"Person[]",$s[108],true,true,true),
defineFieldMetadata($s[528],$s[127]),
defineFieldMetadata($s[263],$s[11]),
defineFieldMetadata($s[323],$s[129]),
defineFieldMetadata($s[265],$s[77]),
defineFieldMetadata($s[531],$s[77]),
defineFieldMetadata($s[118],$s[79]),
defineFieldMetadata($s[175],$s[79]),
defineFieldMetadata($s[28],"String[]",null,true,false,true),
defineFieldMetadata($s[30],$s[79]),
defineFieldMetadata($s[332],$s[79]),
defineFieldMetadata($s[235],$s[129]),
defineFieldMetadata($s[179],$s[11]),
defineFieldMetadata($s[31],$s[79]),
defineFieldMetadata($s[271],$s[129]),
defineFieldMetadata($s[664],$s[127])
];

/**
 * Add an entry to the type registry for
 * osapi.jive.corev3.communications.DirectMessage
 * @type {Object}
 */
typeRegistry["dm"] = {
    name: "dm",
    ctor: osapi.jive.corev3.communications.DirectMessage
};
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.communications.DirectMessage
 * to simplify use of the extprops resource.
 * This method will execute a POST for extprops resources
 */ /*

 osapi.jive.corev3.communications.DirectMessage.prototype.createExtProps = function(data, params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[506],"className":$s[856],"resourceName":$s[198],"httpMethod":$s[12],"signature":"data, params","queryParams":[$s[94]]});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.communications.DirectMessage
 * to simplify use of the outcomes resource.
 * This method will execute a POST for outcomes resources
 */ /*

 osapi.jive.corev3.communications.DirectMessage.prototype.createOutcome = function(data, params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[463],"className":$s[856],"resourceName":$s[218],"httpMethod":$s[12],"signature":"data, params","queryParams":[$s[94]]});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.communications.DirectMessage
 * to simplify use of the comments resource.
 * This method will execute a POST for comments resources
 */ /*

 osapi.jive.corev3.communications.DirectMessage.prototype.createReply = function(data, params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[348],"className":$s[856],"resourceName":$s[192],"httpMethod":$s[12],"signature":"data, params","queryParams":[$s[188],$s[94],$s[263],$s[326],$s[179]]});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.communications.DirectMessage
 * to simplify use of the extprops resource.
 * This method will execute a DELETE for extprops resources
 */ /*

 osapi.jive.corev3.communications.DirectMessage.prototype.deleteExtProps = function() { [generated code] }

 */ defineInstanceMethod({"methodName":$s[507],"className":$s[856],"resourceName":$s[198],"httpMethod":$s[74],"signature":""});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.communications.DirectMessage
 * to simplify use of the self resource.
 * This method will execute a DELETE for self resources
 */ /*

 osapi.jive.corev3.communications.DirectMessage.prototype.destroy = function() { [generated code] }

 */ defineInstanceMethod({"methodName":$s[141],"className":$s[856],"resourceName":$s[25],"httpMethod":$s[74],"signature":""});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.communications.DirectMessage
 * to simplify use of the self resource.
 * This method will execute a GET for self resources
 */ /*

 osapi.jive.corev3.communications.DirectMessage.prototype.get = function(params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[5],"className":$s[856],"resourceName":$s[25],"httpMethod":$s[0],"signature":$s[105],"queryParams":[$s[94]]});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.communications.DirectMessage
 * to simplify use of the childOutcomeTypes resource.
 * This method will execute a GET for childOutcomeTypes resources
 */ /*

 osapi.jive.corev3.communications.DirectMessage.prototype.getChildOutcomeTypes = function(params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[619],"className":$s[856],"resourceName":$s[580],"httpMethod":$s[0],"signature":$s[105],"queryParams":[$s[38],$s[94],$s[209],$s[328]]});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.communications.DirectMessage
 * to simplify use of the images resource.
 * This method will execute a GET for images resources
 */ /*

 osapi.jive.corev3.communications.DirectMessage.prototype.getContentImages = function(params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[563],"className":$s[856],"resourceName":$s[98],"httpMethod":$s[0],"signature":$s[105],"queryParams":[$s[94]]});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.communications.DirectMessage
 * to simplify use of the extprops resource.
 * This method will execute a GET for extprops resources
 */ /*

 osapi.jive.corev3.communications.DirectMessage.prototype.getExtProps = function(params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[359],"className":$s[856],"resourceName":$s[198],"httpMethod":$s[0],"signature":$s[105],"queryParams":[$s[94]]});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.communications.DirectMessage
 * to simplify use of the outcomeTypes resource.
 * This method will execute a GET for outcomeTypes resources
 */ /*

 osapi.jive.corev3.communications.DirectMessage.prototype.getOutcomeTypes = function(params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[544],"className":$s[856],"resourceName":$s[433],"httpMethod":$s[0],"signature":$s[105],"queryParams":[$s[38],$s[94],$s[328]]});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.communications.DirectMessage
 * to simplify use of the outcomes resource.
 * This method will execute a GET for outcomes resources
 */ /*

 osapi.jive.corev3.communications.DirectMessage.prototype.getOutcomes = function(params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[361],"className":$s[856],"resourceName":$s[218],"httpMethod":$s[0],"signature":$s[105],"queryParams":[$s[38],$s[94],$s[632],$s[328]]});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.communications.DirectMessage
 * to simplify use of the messages resource.
 * This method will execute a GET for messages resources
 */ /*

 osapi.jive.corev3.communications.DirectMessage.prototype.getReplies = function(params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[305],"className":$s[856],"resourceName":$s[217],"httpMethod":$s[0],"signature":$s[105],"queryParams":[$s[82],$s[38],$s[511],$s[94],$s[95],$s[418],$s[328]]});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.communications.DirectMessage
 * to simplify use of the read resource.
 * This method will execute a POST for read resources
 */ /*

 osapi.jive.corev3.communications.DirectMessage.prototype.markRead = function(params) { [generated code] }

 */ defineInstanceMethod({"signature":$s[105],"queryParams":[],"methodName":$s[216],"className":$s[856],"resourceName":$s[24],"httpMethod":$s[12],"hasBody":false});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.communications.DirectMessage
 * to simplify use of the read resource.
 * This method will execute a DELETE for read resources
 */ /*

 osapi.jive.corev3.communications.DirectMessage.prototype.markUnread = function() { [generated code] }

 */ defineInstanceMethod({"methodName":$s[313],"className":$s[856],"resourceName":$s[24],"httpMethod":$s[74],"signature":""});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.communications.DirectMessage
 * to simplify use of the subject resource.
 * This method will execute a POST for subject resources
 */ /*

 osapi.jive.corev3.communications.DirectMessage.prototype.setSubject = function(data, params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[327],"className":$s[856],"resourceName":$s[175],"httpMethod":$s[12],"signature":"data, params","queryParams":[$s[94]]});
/**
 * define class osapi.jive.corev3.contents.Document, to extend osapi.jive.corev3.AbstractObject
 */
defineClass($s[750], osapi.jive.corev3.AbstractObject, {"type":$s[195]}, [{"name":$s[66]}]);

/**
 * Describe the fields of osapi.jive.corev3.contents.Document
 * @type {Array}
 */
osapi.jive.corev3.contents.Document.fields = [
defineFieldMetadata($s[279],$s[129]),
defineFieldMetadata($s[241],"Person[]",$s[108],true,false,true),
defineFieldMetadata($s[341],"Attachment[]",$s[281],true,false,true),
defineFieldMetadata($s[84],$s[78],$s[108]),
defineFieldMetadata($s[133],"Person[]",$s[108],true,false,true),
defineFieldMetadata($s[283],$s[79],null,true),
defineFieldMetadata($s[503],$s[127]),
defineFieldMetadata($s[559],$s[127]),
defineFieldMetadata($s[286],"String[]",null,true,false,true),
defineFieldMetadata($s[137],$s[337],$s[345],true,true),
defineFieldMetadata($s[244],$s[79]),
defineFieldMetadata($s[457],"Image[]",$s[44],false,false,true),
defineFieldMetadata($s[458],"ContentVideo[]",$s[400],false,false,true),
defineFieldMetadata($s[410],$s[127],null,true),
defineFieldMetadata($s[246],$s[78],$s[108]),
defineFieldMetadata($s[539],"Person[]",$s[108],true,false,true),
defineFieldMetadata($s[467],$s[129]),
defineFieldMetadata($s[201],$s[127]),
defineFieldMetadata($s[468],$s[129]),
defineFieldMetadata($s[253],$s[79],null,true),
defineFieldMetadata($s[548],$s[127]),
defineFieldMetadata($s[592],$s[127]),
defineFieldMetadata($s[417],$s[129]),
defineFieldMetadata($s[471],$s[79]),
defineFieldMetadata($s[566],$s[79]),
defineFieldMetadata($s[472],$s[79]),
defineFieldMetadata($s[152],$s[79]),
defineFieldMetadata("id",$s[79]),
defineFieldMetadata($s[45],$s[79]),
defineFieldMetadata($s[425],$s[129]),
defineFieldMetadata($s[568],$s[11]),
defineFieldMetadata($s[259],$s[129]),
defineFieldMetadata($s[317],$s[277],$s[317],true),
defineFieldMetadata($s[480],$s[77]),
defineFieldMetadata($s[574],"String[]",null,false,false,true),
defineFieldMetadata($s[433],"OutcomeType[]",$s[375],true,false,true),
defineFieldMetadata($s[106],$s[79],null,true),
defineFieldMetadata($s[481],$s[131],$s[176]),
defineFieldMetadata($s[621],$s[127]),
defineFieldMetadata($s[376],$s[131],$s[176]),
defineFieldMetadata($s[482],$s[127]),
defineFieldMetadata($s[528],$s[127]),
defineFieldMetadata($s[263],$s[11]),
defineFieldMetadata($s[323],$s[129]),
defineFieldMetadata($s[265],$s[77]),
defineFieldMetadata($s[575],$s[127],null,true),
defineFieldMetadata($s[266],"Person[]",$s[108],true,false,true),
defineFieldMetadata($s[531],$s[77]),
defineFieldMetadata($s[118],$s[79]),
defineFieldMetadata($s[175],$s[79],null,true,true),
defineFieldMetadata($s[28],"String[]",null,true,false,true),
defineFieldMetadata($s[30],$s[79],null,false,true),
defineFieldMetadata($s[235],$s[129]),
defineFieldMetadata($s[577],$s[127]),
defineFieldMetadata($s[535],$s[129]),
defineFieldMetadata($s[179],$s[11]),
defineFieldMetadata($s[596],$s[277],$s[317],true),
defineFieldMetadata($s[180],$s[78],$s[108]),
defineFieldMetadata($s[67],"Person[]",$s[108],true,false,true),
defineFieldMetadata($s[31],$s[79]),
defineFieldMetadata($s[182],$s[129]),
defineFieldMetadata($s[10],$s[2],$s[10],true),
defineFieldMetadata($s[271],$s[129]),
defineFieldMetadata($s[335],$s[79],null,true),
defineFieldMetadata($s[664],$s[127])
];

/**
 * Add an entry to the type registry for
 * osapi.jive.corev3.contents.Document
 * @type {Object}
 */
typeRegistry[$s[195]] = {
    name: $s[195],
    ctor: osapi.jive.corev3.contents.Document
};
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.contents.Document
 * to simplify use of the comments resource.
 * This method will execute a POST for comments resources
 */ /*

 osapi.jive.corev3.contents.Document.prototype.createComment = function(data, params) { [generated code] }

 */ defineInstanceMethod({"signature":"data, params","queryParams":[$s[84],$s[94],$s[263],$s[179]],"methodName":$s[460],"className":$s[750],"resourceName":$s[192],"httpMethod":$s[12],"paramOverrides":{"parent":"@this.resources.self.ref","type":$s[136]}});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.contents.Document
 * to simplify use of the extprops resource.
 * This method will execute a POST for extprops resources
 */ /*

 osapi.jive.corev3.contents.Document.prototype.createExtProps = function(data, params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[506],"className":$s[750],"resourceName":$s[198],"httpMethod":$s[12],"signature":"data, params","queryParams":[$s[94]]});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.contents.Document
 * to simplify use of the outcomes resource.
 * This method will execute a POST for outcomes resources
 */ /*

 osapi.jive.corev3.contents.Document.prototype.createOutcome = function(data, params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[463],"className":$s[750],"resourceName":$s[218],"httpMethod":$s[12],"signature":"data, params","queryParams":[$s[94]]});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.contents.Document
 * to simplify use of the extprops resource.
 * This method will execute a DELETE for extprops resources
 */ /*

 osapi.jive.corev3.contents.Document.prototype.deleteExtProps = function() { [generated code] }

 */ defineInstanceMethod({"methodName":$s[507],"className":$s[750],"resourceName":$s[198],"httpMethod":$s[74],"signature":""});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.contents.Document
 * to simplify use of the self resource.
 * This method will execute a DELETE for self resources
 */ /*

 osapi.jive.corev3.contents.Document.prototype.destroy = function() { [generated code] }

 */ defineInstanceMethod({"methodName":$s[141],"className":$s[750],"resourceName":$s[25],"httpMethod":$s[74],"signature":""});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.contents.Document
 * to simplify use of the self resource.
 * This method will execute a GET for self resources
 */ /*

 osapi.jive.corev3.contents.Document.prototype.get = function(params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[5],"className":$s[750],"resourceName":$s[25],"httpMethod":$s[0],"signature":$s[105],"queryParams":[$s[185],$s[245],$s[94]]});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.contents.Document
 * to simplify use of the attachments resource.
 * This method will execute a GET for attachments resources
 */ /*

 osapi.jive.corev3.contents.Document.prototype.getAttachments = function(params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[516],"className":$s[750],"resourceName":$s[341],"httpMethod":$s[0],"signature":$s[105],"queryParams":[$s[94]]});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.contents.Document
 * to simplify use of the childOutcomeTypes resource.
 * This method will execute a GET for childOutcomeTypes resources
 */ /*

 osapi.jive.corev3.contents.Document.prototype.getChildOutcomeTypes = function(params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[619],"className":$s[750],"resourceName":$s[580],"httpMethod":$s[0],"signature":$s[105],"queryParams":[$s[38],$s[94],$s[209],$s[328]]});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.contents.Document
 * to simplify use of the comments resource.
 * This method will execute a GET for comments resources
 */ /*

 osapi.jive.corev3.contents.Document.prototype.getComments = function(params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[357],"className":$s[750],"resourceName":$s[192],"httpMethod":$s[0],"signature":$s[105],"queryParams":[$s[82],$s[84],$s[38],$s[511],$s[94],$s[95],$s[418],$s[99],$s[27],$s[328]]});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.contents.Document
 * to simplify use of the extprops resource.
 * This method will execute a GET for extprops resources
 */ /*

 osapi.jive.corev3.contents.Document.prototype.getExtProps = function(params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[359],"className":$s[750],"resourceName":$s[198],"httpMethod":$s[0],"signature":$s[105],"queryParams":[$s[94]]});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.contents.Document
 * to simplify use of the followers resource.
 * This method will execute a GET for followers resources
 */ /*

 osapi.jive.corev3.contents.Document.prototype.getFollowers = function(params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[415],"className":$s[750],"resourceName":$s[250],"httpMethod":$s[0],"signature":$s[105],"queryParams":[$s[38],$s[94],$s[95],$s[328]]});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.contents.Document
 * to simplify use of the followingIn resource.
 * This method will execute a GET for followingIn resources
 */ /*

 osapi.jive.corev3.contents.Document.prototype.getFollowingIn = function(params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[518],"className":$s[750],"resourceName":$s[354],"httpMethod":$s[0],"signature":$s[105],"queryParams":[$s[94]]});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.contents.Document
 * to simplify use of the likes resource.
 * This method will execute a GET for likes resources
 */ /*

 osapi.jive.corev3.contents.Document.prototype.getLikes = function(params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[203],"className":$s[750],"resourceName":$s[46],"httpMethod":$s[0],"signature":$s[105],"queryParams":[$s[38],$s[94],$s[328]]});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.contents.Document
 * to simplify use of the markedHelpful resource.
 * This method will execute a GET for markedHelpful resources
 */ /*

 osapi.jive.corev3.contents.Document.prototype.getMarkedHelpful = function(params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[564],"className":$s[750],"resourceName":$s[475],"httpMethod":$s[0],"signature":$s[105],"queryParams":[$s[38],$s[94],$s[328]]});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.contents.Document
 * to simplify use of the markedUnhelpful resource.
 * This method will execute a GET for markedUnhelpful resources
 */ /*

 osapi.jive.corev3.contents.Document.prototype.getMarkedUnhelpful = function(params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[604],"className":$s[750],"resourceName":$s[549],"httpMethod":$s[0],"signature":$s[105]});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.contents.Document
 * to simplify use of the outcomeTypes resource.
 * This method will execute a GET for outcomeTypes resources
 */ /*

 osapi.jive.corev3.contents.Document.prototype.getOutcomeTypes = function(params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[544],"className":$s[750],"resourceName":$s[433],"httpMethod":$s[0],"signature":$s[105],"queryParams":[$s[38],$s[94],$s[328]]});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.contents.Document
 * to simplify use of the outcomes resource.
 * This method will execute a GET for outcomes resources
 */ /*

 osapi.jive.corev3.contents.Document.prototype.getOutcomes = function(params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[361],"className":$s[750],"resourceName":$s[218],"httpMethod":$s[0],"signature":$s[105],"queryParams":[$s[38],$s[94],$s[632],$s[328]]});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.contents.Document
 * to simplify use of the versions resource.
 * This method will execute a GET for versions resources
 */ /*

 osapi.jive.corev3.contents.Document.prototype.getVersions = function(params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[363],"className":$s[750],"resourceName":$s[236],"httpMethod":$s[0],"signature":$s[105],"queryParams":[$s[38],$s[94],$s[328]]});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.contents.Document
 * to simplify use of the likes resource.
 * This method will execute a POST for likes resources
 */ /*

 osapi.jive.corev3.contents.Document.prototype.like = function(params) { [generated code] }

 */ defineInstanceMethod({"signature":$s[105],"queryParams":[],"methodName":$s[20],"className":$s[750],"resourceName":$s[46],"httpMethod":$s[12],"hasBody":false});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.contents.Document
 * to simplify use of the helpful resource.
 * This method will execute a POST for helpful resources
 */ /*

 osapi.jive.corev3.contents.Document.prototype.markHelpful = function(params) { [generated code] }

 */ defineInstanceMethod({"signature":$s[105],"queryParams":[],"methodName":$s[370],"className":$s[750],"resourceName":$s[150],"httpMethod":$s[12],"hasBody":false});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.contents.Document
 * to simplify use of the read resource.
 * This method will execute a POST for read resources
 */ /*

 osapi.jive.corev3.contents.Document.prototype.markRead = function(params) { [generated code] }

 */ defineInstanceMethod({"signature":$s[105],"queryParams":[],"methodName":$s[216],"className":$s[750],"resourceName":$s[24],"httpMethod":$s[12],"hasBody":false});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.contents.Document
 * to simplify use of the unhelpful resource.
 * This method will execute a POST for unhelpful resources
 */ /*

 osapi.jive.corev3.contents.Document.prototype.markUnhelpful = function(params) { [generated code] }

 */ defineInstanceMethod({"signature":$s[105],"queryParams":[],"methodName":$s[474],"className":$s[750],"resourceName":$s[270],"httpMethod":$s[12],"hasBody":false});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.contents.Document
 * to simplify use of the read resource.
 * This method will execute a DELETE for read resources
 */ /*

 osapi.jive.corev3.contents.Document.prototype.markUnread = function() { [generated code] }

 */ defineInstanceMethod({"methodName":$s[313],"className":$s[750],"resourceName":$s[24],"httpMethod":$s[74],"signature":""});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.contents.Document
 * to simplify use of the likes resource.
 * This method will execute a DELETE for likes resources
 */ /*

 osapi.jive.corev3.contents.Document.prototype.unlike = function() { [generated code] }

 */ defineInstanceMethod({"methodName":$s[123],"className":$s[750],"resourceName":$s[46],"httpMethod":$s[74],"signature":""});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.contents.Document
 * to simplify use of the helpful resource.
 * This method will execute a DELETE for helpful resources
 */ /*

 osapi.jive.corev3.contents.Document.prototype.unmarkHelpful = function() { [generated code] }

 */ defineInstanceMethod({"methodName":$s[491],"className":$s[750],"resourceName":$s[150],"httpMethod":$s[74],"signature":""});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.contents.Document
 * to simplify use of the unhelpful resource.
 * This method will execute a DELETE for unhelpful resources
 */ /*

 osapi.jive.corev3.contents.Document.prototype.unmarkUnhelpful = function() { [generated code] }

 */ defineInstanceMethod({"methodName":$s[556],"className":$s[750],"resourceName":$s[270],"httpMethod":$s[74],"signature":""});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.contents.Document
 * to simplify use of the self resource.
 * This method will execute a PUT for self resources
 */ /*

 osapi.jive.corev3.contents.Document.prototype.update = function(params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[124],"className":$s[750],"resourceName":$s[25],"httpMethod":$s[1],"signature":$s[105],"queryParams":[$s[185],$s[94],$s[47],$s[179]]});
/**
 * define class osapi.jive.corev3.contents.Event, to extend osapi.jive.corev3.AbstractObject
 */
defineClass($s[705], osapi.jive.corev3.AbstractObject, {"type":$s[40]}, [{"name":$s[66]}]);

/**
 * Describe the fields of osapi.jive.corev3.contents.Event
 * @type {Array}
 */
osapi.jive.corev3.contents.Event.fields = [
defineFieldMetadata($s[279],$s[129]),
defineFieldMetadata($s[341],"Attachment[]",$s[281],true,false,true),
defineFieldMetadata($s[282],$s[275],null,true),
defineFieldMetadata($s[84],$s[78],$s[108]),
defineFieldMetadata($s[133],"Person[]",$s[108],true,false,true),
defineFieldMetadata($s[283],$s[79],null,true),
defineFieldMetadata($s[86],$s[449],$s[456],true),
defineFieldMetadata($s[286],"String[]",null,true,false,true),
defineFieldMetadata("city",$s[79],null,true),
defineFieldMetadata($s[137],$s[337],$s[345],true,true),
defineFieldMetadata($s[244],$s[79]),
defineFieldMetadata($s[457],"Image[]",$s[44],false,false,true),
defineFieldMetadata($s[458],"ContentVideo[]",$s[400],false,false,true),
defineFieldMetadata($s[138],$s[79],null,true),
defineFieldMetadata($s[347],$s[79]),
defineFieldMetadata($s[39],$s[79],null,true),
defineFieldMetadata($s[143],$s[11],null,true,true),
defineFieldMetadata($s[352],$s[79],null,true),
defineFieldMetadata($s[465],$s[129],null,true),
defineFieldMetadata($s[466],$s[578],$s[586],true),
defineFieldMetadata($s[248],$s[79],null,true),
defineFieldMetadata($s[353],$s[129],null,true),
defineFieldMetadata($s[539],"Person[]",$s[108],true,false,true),
defineFieldMetadata($s[467],$s[129]),
defineFieldMetadata($s[514],"EventFeaturedGuest[]",null,true,false,true),
defineFieldMetadata($s[201],$s[127]),
defineFieldMetadata($s[468],$s[129]),
defineFieldMetadata($s[471],$s[79]),
defineFieldMetadata($s[566],$s[79]),
defineFieldMetadata($s[472],$s[79]),
defineFieldMetadata($s[152],$s[79]),
defineFieldMetadata("id",$s[79]),
defineFieldMetadata($s[45],$s[79]),
defineFieldMetadata($s[521],$s[79],null,true),
defineFieldMetadata($s[211],$s[79],null,true),
defineFieldMetadata($s[425],$s[129]),
defineFieldMetadata($s[568],$s[11]),
defineFieldMetadata($s[259],$s[129]),
defineFieldMetadata($s[215],$s[79],null,true),
defineFieldMetadata($s[369],$s[79],null,true),
defineFieldMetadata($s[428],$s[129],null,true),
defineFieldMetadata($s[480],$s[77]),
defineFieldMetadata($s[574],"String[]",null,false,false,true),
defineFieldMetadata($s[433],"OutcomeType[]",$s[375],true,false,true),
defineFieldMetadata($s[106],$s[79],null,true),
defineFieldMetadata($s[481],$s[131],$s[176]),
defineFieldMetadata($s[621],$s[127]),
defineFieldMetadata($s[376],$s[131],$s[176]),
defineFieldMetadata($s[482],$s[127]),
defineFieldMetadata($s[51],$s[79],null,true),
defineFieldMetadata($s[528],$s[127]),
defineFieldMetadata($s[263],$s[11]),
defineFieldMetadata($s[323],$s[129]),
defineFieldMetadata($s[265],$s[77]),
defineFieldMetadata($s[531],$s[77]),
defineFieldMetadata($s[594],$s[127]),
defineFieldMetadata($s[268],$s[11],null,true,true),
defineFieldMetadata($s[118],$s[79]),
defineFieldMetadata($s[120],$s[79],null,true),
defineFieldMetadata($s[175],$s[79],null,true,true),
defineFieldMetadata($s[28],"String[]",null,true,false,true),
defineFieldMetadata($s[30],$s[79],null,false,true),
defineFieldMetadata($s[235],$s[129]),
defineFieldMetadata($s[179],$s[11]),
defineFieldMetadata($s[9],$s[79],null,true),
defineFieldMetadata($s[67],"Person[]",$s[108],true,false,true),
defineFieldMetadata($s[31],$s[79]),
defineFieldMetadata($s[271],$s[129]),
defineFieldMetadata($s[335],$s[79],null,true),
defineFieldMetadata($s[664],$s[127])
];

/**
 * Add an entry to the type registry for
 * osapi.jive.corev3.contents.Event
 * @type {Object}
 */
typeRegistry[$s[40]] = {
    name: $s[40],
    ctor: osapi.jive.corev3.contents.Event
};
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.contents.Event
 * to simplify use of the comments resource.
 * This method will execute a POST for comments resources
 */ /*

 osapi.jive.corev3.contents.Event.prototype.createComment = function(data, params) { [generated code] }

 */ defineInstanceMethod({"signature":"data, params","queryParams":[$s[84],$s[94],$s[263],$s[179]],"methodName":$s[460],"className":$s[705],"resourceName":$s[192],"httpMethod":$s[12],"paramOverrides":{"parent":"@this.resources.self.ref"}});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.contents.Event
 * to simplify use of the extprops resource.
 * This method will execute a POST for extprops resources
 */ /*

 osapi.jive.corev3.contents.Event.prototype.createExtProps = function(data, params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[506],"className":$s[705],"resourceName":$s[198],"httpMethod":$s[12],"signature":"data, params","queryParams":[$s[94]]});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.contents.Event
 * to simplify use of the outcomes resource.
 * This method will execute a POST for outcomes resources
 */ /*

 osapi.jive.corev3.contents.Event.prototype.createOutcome = function(data, params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[463],"className":$s[705],"resourceName":$s[218],"httpMethod":$s[12],"signature":"data, params","queryParams":[$s[94]]});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.contents.Event
 * to simplify use of the extprops resource.
 * This method will execute a DELETE for extprops resources
 */ /*

 osapi.jive.corev3.contents.Event.prototype.deleteExtProps = function() { [generated code] }

 */ defineInstanceMethod({"methodName":$s[507],"className":$s[705],"resourceName":$s[198],"httpMethod":$s[74],"signature":""});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.contents.Event
 * to simplify use of the self resource.
 * This method will execute a DELETE for self resources
 */ /*

 osapi.jive.corev3.contents.Event.prototype.destroy = function() { [generated code] }

 */ defineInstanceMethod({"methodName":$s[141],"className":$s[705],"resourceName":$s[25],"httpMethod":$s[74],"signature":""});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.contents.Event
 * to simplify use of the self resource.
 * This method will execute a GET for self resources
 */ /*

 osapi.jive.corev3.contents.Event.prototype.get = function(params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[5],"className":$s[705],"resourceName":$s[25],"httpMethod":$s[0],"signature":$s[105],"queryParams":[$s[185],$s[245],$s[94]]});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.contents.Event
 * to simplify use of the attachments resource.
 * This method will execute a GET for attachments resources
 */ /*

 osapi.jive.corev3.contents.Event.prototype.getAttachments = function(params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[516],"className":$s[705],"resourceName":$s[341],"httpMethod":$s[0],"signature":$s[105],"queryParams":[$s[94]]});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.contents.Event
 * to simplify use of the childOutcomeTypes resource.
 * This method will execute a GET for childOutcomeTypes resources
 */ /*

 osapi.jive.corev3.contents.Event.prototype.getChildOutcomeTypes = function(params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[619],"className":$s[705],"resourceName":$s[580],"httpMethod":$s[0],"signature":$s[105],"queryParams":[$s[38],$s[94],$s[209],$s[328]]});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.contents.Event
 * to simplify use of the comments resource.
 * This method will execute a GET for comments resources
 */ /*

 osapi.jive.corev3.contents.Event.prototype.getComments = function(params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[357],"className":$s[705],"resourceName":$s[192],"httpMethod":$s[0],"signature":$s[105],"queryParams":[$s[82],$s[84],$s[38],$s[511],$s[94],$s[95],$s[418],$s[99],$s[27],$s[328]]});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.contents.Event
 * to simplify use of the extprops resource.
 * This method will execute a GET for extprops resources
 */ /*

 osapi.jive.corev3.contents.Event.prototype.getExtProps = function(params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[359],"className":$s[705],"resourceName":$s[198],"httpMethod":$s[0],"signature":$s[105],"queryParams":[$s[94]]});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.contents.Event
 * to simplify use of the followingIn resource.
 * This method will execute a GET for followingIn resources
 */ /*

 osapi.jive.corev3.contents.Event.prototype.getFollowingIn = function(params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[518],"className":$s[705],"resourceName":$s[354],"httpMethod":$s[0],"signature":$s[105],"queryParams":[$s[94]]});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.contents.Event
 * to simplify use of the likes resource.
 * This method will execute a GET for likes resources
 */ /*

 osapi.jive.corev3.contents.Event.prototype.getLikes = function(params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[203],"className":$s[705],"resourceName":$s[46],"httpMethod":$s[0],"signature":$s[105],"queryParams":[$s[38],$s[94],$s[328]]});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.contents.Event
 * to simplify use of the maybeAttendees resource.
 * This method will execute a GET for maybeAttendees resources
 */ /*

 osapi.jive.corev3.contents.Event.prototype.getMaybeAttendees = function(params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[590],"className":$s[705],"resourceName":$s[522],"httpMethod":$s[0],"signature":$s[105],"queryParams":[$s[38],$s[328]]});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.contents.Event
 * to simplify use of the noAttendees resource.
 * This method will execute a GET for noAttendees resources
 */ /*

 osapi.jive.corev3.contents.Event.prototype.getNoAttendees = function(params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[519],"className":$s[705],"resourceName":$s[374],"httpMethod":$s[0],"signature":$s[105],"queryParams":[$s[38],$s[328]]});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.contents.Event
 * to simplify use of the outcomeTypes resource.
 * This method will execute a GET for outcomeTypes resources
 */ /*

 osapi.jive.corev3.contents.Event.prototype.getOutcomeTypes = function(params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[544],"className":$s[705],"resourceName":$s[433],"httpMethod":$s[0],"signature":$s[105],"queryParams":[$s[38],$s[94],$s[328]]});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.contents.Event
 * to simplify use of the outcomes resource.
 * This method will execute a GET for outcomes resources
 */ /*

 osapi.jive.corev3.contents.Event.prototype.getOutcomes = function(params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[361],"className":$s[705],"resourceName":$s[218],"httpMethod":$s[0],"signature":$s[105],"queryParams":[$s[38],$s[94],$s[632],$s[328]]});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.contents.Event
 * to simplify use of the invitees resource.
 * This method will execute a GET for invitees resources
 */ /*

 osapi.jive.corev3.contents.Event.prototype.getUnansweredInvitees = function(params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[625],"className":$s[705],"resourceName":$s[208],"httpMethod":$s[0],"signature":$s[105],"queryParams":[$s[38],$s[328]]});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.contents.Event
 * to simplify use of the yesAttendees resource.
 * This method will execute a GET for yesAttendees resources
 */ /*

 osapi.jive.corev3.contents.Event.prototype.getYesAttendees = function(params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[547],"className":$s[705],"resourceName":$s[448],"httpMethod":$s[0],"signature":$s[105],"queryParams":[$s[38],$s[328]]});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.contents.Event
 * to simplify use of the invitations resource.
 * This method will execute a POST for invitations resources
 */ /*

 osapi.jive.corev3.contents.Event.prototype.inviteUsers = function(data, params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[367],"className":$s[705],"resourceName":$s[366],"httpMethod":$s[12],"signature":"data, params","queryParams":[$s[94]]});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.contents.Event
 * to simplify use of the likes resource.
 * This method will execute a POST for likes resources
 */ /*

 osapi.jive.corev3.contents.Event.prototype.like = function(params) { [generated code] }

 */ defineInstanceMethod({"signature":$s[105],"queryParams":[],"methodName":$s[20],"className":$s[705],"resourceName":$s[46],"httpMethod":$s[12],"hasBody":false});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.contents.Event
 * to simplify use of the rsvps resource.
 * This method will execute a POST for rsvps resources
 */ /*

 osapi.jive.corev3.contents.Event.prototype.rsvp = function(data, params) { [generated code] }

 */ defineInstanceMethod({"methodName":"rsvp","className":$s[705],"resourceName":$s[56],"httpMethod":$s[12],"signature":"data, params","queryParams":[]});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.contents.Event
 * to simplify use of the likes resource.
 * This method will execute a DELETE for likes resources
 */ /*

 osapi.jive.corev3.contents.Event.prototype.unlike = function() { [generated code] }

 */ defineInstanceMethod({"methodName":$s[123],"className":$s[705],"resourceName":$s[46],"httpMethod":$s[74],"signature":""});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.contents.Event
 * to simplify use of the self resource.
 * This method will execute a PUT for self resources
 */ /*

 osapi.jive.corev3.contents.Event.prototype.update = function(params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[124],"className":$s[705],"resourceName":$s[25],"httpMethod":$s[1],"signature":$s[105],"queryParams":[$s[185],$s[94],$s[47],$s[179]]});
/**
 * define class osapi.jive.corev3.contents.EventCalendarCount, to extend osapi.jive.corev3.AbstractObject
 */
defineClass($s[848], osapi.jive.corev3.AbstractObject, {"type":$s[601]}, []);

/**
 * Describe the fields of osapi.jive.corev3.contents.EventCalendarCount
 * @type {Array}
 */
osapi.jive.corev3.contents.EventCalendarCount.fields = [
defineFieldMetadata($s[396],$s[11]),
defineFieldMetadata($s[38],$s[129]),
defineFieldMetadata("id",$s[79]),
defineFieldMetadata($s[265],$s[77])
];

/**
 * Add an entry to the type registry for
 * osapi.jive.corev3.contents.EventCalendarCount
 * @type {Object}
 */
typeRegistry[$s[601]] = {
    name: $s[601],
    ctor: osapi.jive.corev3.contents.EventCalendarCount
};
/**
 * define class osapi.jive.corev3.contents.EventCategoryType, to extend osapi.jive.corev3.AbstractObject
 */
defineClass($s[840], osapi.jive.corev3.AbstractObject, {"type":$s[586]}, []);

/**
 * Describe the fields of osapi.jive.corev3.contents.EventCategoryType
 * @type {Array}
 */
osapi.jive.corev3.contents.EventCategoryType.fields = [
defineFieldMetadata($s[201],$s[127]),
defineFieldMetadata($s[468],$s[129]),
defineFieldMetadata($s[206],$s[79]),
defineFieldMetadata("id",$s[79]),
defineFieldMetadata($s[259],$s[129]),
defineFieldMetadata($s[620],$s[79]),
defineFieldMetadata($s[21],$s[79]),
defineFieldMetadata($s[263],$s[11]),
defineFieldMetadata($s[265],$s[77]),
defineFieldMetadata($s[28],"String[]",null,true,false,true),
defineFieldMetadata($s[30],$s[79],null,false,true),
defineFieldMetadata($s[235],$s[129]),
defineFieldMetadata($s[179],$s[11])
];

/**
 * Add an entry to the type registry for
 * osapi.jive.corev3.contents.EventCategoryType
 * @type {Object}
 */
typeRegistry[$s[586]] = {
    name: $s[586],
    ctor: osapi.jive.corev3.contents.EventCategoryType
};
/**
 * define class osapi.jive.corev3.contents.ExternalStreamActivity, to extend osapi.jive.corev3.AbstractObject
 */
defineClass($s[879], osapi.jive.corev3.AbstractObject, {"type":$s[587]}, [{"name":$s[66]}]);

/**
 * Describe the fields of osapi.jive.corev3.contents.ExternalStreamActivity
 * @type {Array}
 */
osapi.jive.corev3.contents.ExternalStreamActivity.fields = [
defineFieldMetadata($s[279],$s[129]),
defineFieldMetadata($s[81],$s[276],null,false,true),
defineFieldMetadata($s[35],$s[276]),
defineFieldMetadata($s[341],"Attachment[]",$s[281],true,false,true),
defineFieldMetadata($s[84],$s[78],$s[108]),
defineFieldMetadata($s[137],$s[337],$s[345],true,true),
defineFieldMetadata($s[244],$s[79]),
defineFieldMetadata($s[457],"Image[]",$s[44],false,false,true),
defineFieldMetadata($s[458],"ContentVideo[]",$s[400],false,false,true),
defineFieldMetadata($s[296],$s[79]),
defineFieldMetadata($s[561],$s[129]),
defineFieldMetadata($s[467],$s[129]),
defineFieldMetadata($s[201],$s[127]),
defineFieldMetadata($s[468],$s[129]),
defineFieldMetadata($s[471],$s[79]),
defineFieldMetadata($s[566],$s[79]),
defineFieldMetadata($s[472],$s[79]),
defineFieldMetadata($s[152],$s[79]),
defineFieldMetadata("id",$s[79]),
defineFieldMetadata($s[45],$s[79]),
defineFieldMetadata($s[18],$s[276],null,true),
defineFieldMetadata($s[425],$s[129]),
defineFieldMetadata($s[568],$s[11]),
defineFieldMetadata($s[259],$s[129]),
defineFieldMetadata($s[103],$s[276]),
defineFieldMetadata($s[480],$s[77]),
defineFieldMetadata($s[574],"String[]",null,false,false,true),
defineFieldMetadata($s[433],"OutcomeType[]",$s[375],true,false,true),
defineFieldMetadata($s[106],$s[79],null,true,true),
defineFieldMetadata($s[481],$s[131],$s[176]),
defineFieldMetadata($s[621],$s[127]),
defineFieldMetadata($s[376],$s[131],$s[176]),
defineFieldMetadata($s[482],$s[127]),
defineFieldMetadata($s[528],$s[127]),
defineFieldMetadata($s[322],$s[276]),
defineFieldMetadata($s[263],$s[11]),
defineFieldMetadata($s[323],$s[129]),
defineFieldMetadata($s[265],$s[77]),
defineFieldMetadata($s[531],$s[77]),
defineFieldMetadata($s[118],$s[79]),
defineFieldMetadata($s[175],$s[79],null,true,true),
defineFieldMetadata($s[28],"String[]",null,true,false,true),
defineFieldMetadata($s[30],$s[79],null,false,true),
defineFieldMetadata($s[235],$s[129]),
defineFieldMetadata($s[179],$s[11]),
defineFieldMetadata($s[31],$s[79]),
defineFieldMetadata($s[271],$s[129]),
defineFieldMetadata($s[664],$s[127])
];

/**
 * Add an entry to the type registry for
 * osapi.jive.corev3.contents.ExternalStreamActivity
 * @type {Object}
 */
typeRegistry[$s[587]] = {
    name: $s[587],
    ctor: osapi.jive.corev3.contents.ExternalStreamActivity
};
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.contents.ExternalStreamActivity
 * to simplify use of the comments resource.
 * This method will execute a POST for comments resources
 */ /*

 osapi.jive.corev3.contents.ExternalStreamActivity.prototype.createComment = function(data, params) { [generated code] }

 */ defineInstanceMethod({"signature":"data, params","queryParams":[$s[84],$s[94],$s[263],$s[179]],"methodName":$s[460],"className":$s[879],"resourceName":$s[192],"httpMethod":$s[12],"paramOverrides":{"parent":"@this.resources.self.ref","type":$s[136]}});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.contents.ExternalStreamActivity
 * to simplify use of the extprops resource.
 * This method will execute a POST for extprops resources
 */ /*

 osapi.jive.corev3.contents.ExternalStreamActivity.prototype.createExtProps = function(data, params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[506],"className":$s[879],"resourceName":$s[198],"httpMethod":$s[12],"signature":"data, params","queryParams":[$s[94]]});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.contents.ExternalStreamActivity
 * to simplify use of the outcomes resource.
 * This method will execute a POST for outcomes resources
 */ /*

 osapi.jive.corev3.contents.ExternalStreamActivity.prototype.createOutcome = function(data, params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[463],"className":$s[879],"resourceName":$s[218],"httpMethod":$s[12],"signature":"data, params","queryParams":[$s[94]]});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.contents.ExternalStreamActivity
 * to simplify use of the extprops resource.
 * This method will execute a DELETE for extprops resources
 */ /*

 osapi.jive.corev3.contents.ExternalStreamActivity.prototype.deleteExtProps = function() { [generated code] }

 */ defineInstanceMethod({"methodName":$s[507],"className":$s[879],"resourceName":$s[198],"httpMethod":$s[74],"signature":""});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.contents.ExternalStreamActivity
 * to simplify use of the self resource.
 * This method will execute a DELETE for self resources
 */ /*

 osapi.jive.corev3.contents.ExternalStreamActivity.prototype.destroy = function() { [generated code] }

 */ defineInstanceMethod({"methodName":$s[141],"className":$s[879],"resourceName":$s[25],"httpMethod":$s[74],"signature":""});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.contents.ExternalStreamActivity
 * to simplify use of the self resource.
 * This method will execute a GET for self resources
 */ /*

 osapi.jive.corev3.contents.ExternalStreamActivity.prototype.get = function(params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[5],"className":$s[879],"resourceName":$s[25],"httpMethod":$s[0],"signature":$s[105],"queryParams":[$s[185],$s[245],$s[94]]});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.contents.ExternalStreamActivity
 * to simplify use of the childOutcomeTypes resource.
 * This method will execute a GET for childOutcomeTypes resources
 */ /*

 osapi.jive.corev3.contents.ExternalStreamActivity.prototype.getChildOutcomeTypes = function(params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[619],"className":$s[879],"resourceName":$s[580],"httpMethod":$s[0],"signature":$s[105],"queryParams":[$s[38],$s[94],$s[209],$s[328]]});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.contents.ExternalStreamActivity
 * to simplify use of the comments resource.
 * This method will execute a GET for comments resources
 */ /*

 osapi.jive.corev3.contents.ExternalStreamActivity.prototype.getComments = function(params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[357],"className":$s[879],"resourceName":$s[192],"httpMethod":$s[0],"signature":$s[105],"queryParams":[$s[82],$s[84],$s[38],$s[511],$s[94],$s[95],$s[418],$s[99],$s[27],$s[328]]});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.contents.ExternalStreamActivity
 * to simplify use of the images resource.
 * This method will execute a GET for images resources
 */ /*

 osapi.jive.corev3.contents.ExternalStreamActivity.prototype.getContentImages = function(params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[563],"className":$s[879],"resourceName":$s[98],"httpMethod":$s[0],"signature":$s[105],"queryParams":[$s[94]]});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.contents.ExternalStreamActivity
 * to simplify use of the extprops resource.
 * This method will execute a GET for extprops resources
 */ /*

 osapi.jive.corev3.contents.ExternalStreamActivity.prototype.getExtProps = function(params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[359],"className":$s[879],"resourceName":$s[198],"httpMethod":$s[0],"signature":$s[105],"queryParams":[$s[94]]});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.contents.ExternalStreamActivity
 * to simplify use of the followingIn resource.
 * This method will execute a GET for followingIn resources
 */ /*

 osapi.jive.corev3.contents.ExternalStreamActivity.prototype.getFollowingIn = function(params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[518],"className":$s[879],"resourceName":$s[354],"httpMethod":$s[0],"signature":$s[105],"queryParams":[$s[94]]});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.contents.ExternalStreamActivity
 * to simplify use of the likes resource.
 * This method will execute a GET for likes resources
 */ /*

 osapi.jive.corev3.contents.ExternalStreamActivity.prototype.getLikes = function(params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[203],"className":$s[879],"resourceName":$s[46],"httpMethod":$s[0],"signature":$s[105],"queryParams":[$s[38],$s[94],$s[328]]});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.contents.ExternalStreamActivity
 * to simplify use of the outcomeTypes resource.
 * This method will execute a GET for outcomeTypes resources
 */ /*

 osapi.jive.corev3.contents.ExternalStreamActivity.prototype.getOutcomeTypes = function(params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[544],"className":$s[879],"resourceName":$s[433],"httpMethod":$s[0],"signature":$s[105],"queryParams":[$s[38],$s[94],$s[328]]});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.contents.ExternalStreamActivity
 * to simplify use of the outcomes resource.
 * This method will execute a GET for outcomes resources
 */ /*

 osapi.jive.corev3.contents.ExternalStreamActivity.prototype.getOutcomes = function(params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[361],"className":$s[879],"resourceName":$s[218],"httpMethod":$s[0],"signature":$s[105],"queryParams":[$s[38],$s[94],$s[632],$s[328]]});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.contents.ExternalStreamActivity
 * to simplify use of the likes resource.
 * This method will execute a POST for likes resources
 */ /*

 osapi.jive.corev3.contents.ExternalStreamActivity.prototype.like = function(params) { [generated code] }

 */ defineInstanceMethod({"signature":$s[105],"queryParams":[],"methodName":$s[20],"className":$s[879],"resourceName":$s[46],"httpMethod":$s[12],"hasBody":false});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.contents.ExternalStreamActivity
 * to simplify use of the read resource.
 * This method will execute a POST for read resources
 */ /*

 osapi.jive.corev3.contents.ExternalStreamActivity.prototype.markRead = function(params) { [generated code] }

 */ defineInstanceMethod({"signature":$s[105],"queryParams":[],"methodName":$s[216],"className":$s[879],"resourceName":$s[24],"httpMethod":$s[12],"hasBody":false});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.contents.ExternalStreamActivity
 * to simplify use of the read resource.
 * This method will execute a DELETE for read resources
 */ /*

 osapi.jive.corev3.contents.ExternalStreamActivity.prototype.markUnread = function() { [generated code] }

 */ defineInstanceMethod({"methodName":$s[313],"className":$s[879],"resourceName":$s[24],"httpMethod":$s[74],"signature":""});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.contents.ExternalStreamActivity
 * to simplify use of the likes resource.
 * This method will execute a DELETE for likes resources
 */ /*

 osapi.jive.corev3.contents.ExternalStreamActivity.prototype.unlike = function() { [generated code] }

 */ defineInstanceMethod({"methodName":$s[123],"className":$s[879],"resourceName":$s[46],"httpMethod":$s[74],"signature":""});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.contents.ExternalStreamActivity
 * to simplify use of the self resource.
 * This method will execute a PUT for self resources
 */ /*

 osapi.jive.corev3.contents.ExternalStreamActivity.prototype.update = function(params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[124],"className":$s[879],"resourceName":$s[25],"httpMethod":$s[1],"signature":$s[105],"queryParams":[$s[185],$s[94],$s[47],$s[179]]});
/**
 * define class osapi.jive.corev3.extstreams.ExternalStreamInstance, to extend osapi.jive.corev3.AbstractObject
 */
defineClass($s[897], osapi.jive.corev3.AbstractObject, {"type":$s[629]}, []);

/**
 * Describe the fields of osapi.jive.corev3.extstreams.ExternalStreamInstance
 * @type {Array}
 */
osapi.jive.corev3.extstreams.ExternalStreamInstance.fields = [
defineFieldMetadata($s[89],$s[129],null,true),
defineFieldMetadata($s[90],$s[276],null,true),
defineFieldMetadata($s[291],$s[608],$s[612],false,true),
defineFieldMetadata($s[351],$s[79],null,true),
defineFieldMetadata($s[297],$s[79],null,true),
defineFieldMetadata($s[201],$s[127]),
defineFieldMetadata($s[468],$s[129]),
defineFieldMetadata("id",$s[79]),
defineFieldMetadata($s[569],$s[11]),
defineFieldMetadata($s[427],$s[11]),
defineFieldMetadata($s[259],$s[129]),
defineFieldMetadata($s[106],$s[79]),
defineFieldMetadata($s[439],$s[389],$s[439]),
defineFieldMetadata($s[263],$s[11]),
defineFieldMetadata($s[265],$s[77]),
defineFieldMetadata($s[63],$s[79],null,true),
defineFieldMetadata($s[118],$s[276]),
defineFieldMetadata($s[28],"String[]",null,true,false,true),
defineFieldMetadata($s[30],$s[79]),
defineFieldMetadata($s[235],$s[129]),
defineFieldMetadata($s[179],$s[11])
];

/**
 * Add an entry to the type registry for
 * osapi.jive.corev3.extstreams.ExternalStreamInstance
 * @type {Object}
 */
typeRegistry[$s[629]] = {
    name: $s[629],
    ctor: osapi.jive.corev3.extstreams.ExternalStreamInstance
};
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.extstreams.ExternalStreamInstance
 * to simplify use of the privateprops resource.
 * This method will execute a GET for privateprops resources
 */ /*

 osapi.jive.corev3.extstreams.ExternalStreamInstance.prototype.getPrivateProps = function(params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[546],"className":$s[897],"resourceName":$s[437],"httpMethod":$s[0],"signature":$s[105]});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.extstreams.ExternalStreamInstance
 * to simplify use of the privateprops resource.
 * This method will execute a POST for privateprops resources
 */ /*

 osapi.jive.corev3.extstreams.ExternalStreamInstance.prototype.updatePrivateProps = function(data, params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[607],"className":$s[897],"resourceName":$s[437],"httpMethod":$s[12],"signature":"data, params","queryParams":[]});
/**
 * define class osapi.jive.corev3.extprops.ExtProps, to extend osapi.jive.corev3.AbstractObject
 */
defineClass($s[752], osapi.jive.corev3.AbstractObject, {"type":$s[146]}, []);

/**
 * Describe the fields of osapi.jive.corev3.extprops.ExtProps
 * @type {Array}
 */
osapi.jive.corev3.extprops.ExtProps.fields = [
defineFieldMetadata("id",$s[79]),
defineFieldMetadata($s[106],$s[79]),
defineFieldMetadata($s[54],$s[77]),
defineFieldMetadata($s[265],$s[77]),
defineFieldMetadata($s[30],$s[79])
];

/**
 * Add an entry to the type registry for
 * osapi.jive.corev3.extprops.ExtProps
 * @type {Object}
 */
typeRegistry[$s[146]] = {
    name: $s[146],
    ctor: osapi.jive.corev3.extprops.ExtProps
};
/**
 * define class osapi.jive.corev3.contents.Favorite, to extend osapi.jive.corev3.AbstractObject
 */
defineClass($s[751], osapi.jive.corev3.AbstractObject, {"type":$s[199]}, [{"name":$s[66]}]);

/**
 * Describe the fields of osapi.jive.corev3.contents.Favorite
 * @type {Array}
 */
osapi.jive.corev3.contents.Favorite.fields = [
defineFieldMetadata($s[279],$s[129]),
defineFieldMetadata($s[84],$s[78],$s[108]),
defineFieldMetadata($s[137],$s[337],$s[345],true,true),
defineFieldMetadata($s[244],$s[79]),
defineFieldMetadata($s[457],"Image[]",$s[44],false,false,true),
defineFieldMetadata($s[458],"ContentVideo[]",$s[400],false,false,true),
defineFieldMetadata($s[467],$s[129]),
defineFieldMetadata($s[513],$s[77],$s[3],true,true),
defineFieldMetadata($s[201],$s[127]),
defineFieldMetadata($s[468],$s[129]),
defineFieldMetadata($s[471],$s[79]),
defineFieldMetadata($s[566],$s[79]),
defineFieldMetadata($s[472],$s[79]),
defineFieldMetadata($s[152],$s[79]),
defineFieldMetadata("id",$s[79]),
defineFieldMetadata($s[45],$s[79]),
defineFieldMetadata($s[425],$s[129]),
defineFieldMetadata($s[568],$s[11]),
defineFieldMetadata($s[259],$s[129]),
defineFieldMetadata($s[106],$s[79]),
defineFieldMetadata($s[481],$s[131],$s[176]),
defineFieldMetadata($s[621],$s[127]),
defineFieldMetadata($s[376],$s[131],$s[176]),
defineFieldMetadata($s[482],$s[127]),
defineFieldMetadata($s[164],$s[127],null,true),
defineFieldMetadata($s[528],$s[127]),
defineFieldMetadata($s[263],$s[11]),
defineFieldMetadata($s[323],$s[129]),
defineFieldMetadata($s[265],$s[77]),
defineFieldMetadata($s[531],$s[77]),
defineFieldMetadata($s[118],$s[79]),
defineFieldMetadata($s[175],$s[79],null,true,true),
defineFieldMetadata($s[28],"String[]",null,true,false,true),
defineFieldMetadata($s[30],$s[79],null,false,true),
defineFieldMetadata($s[235],$s[129]),
defineFieldMetadata($s[179],$s[11]),
defineFieldMetadata($s[31],$s[79]),
defineFieldMetadata($s[271],$s[129]),
defineFieldMetadata($s[664],$s[127])
];

/**
 * Add an entry to the type registry for
 * osapi.jive.corev3.contents.Favorite
 * @type {Object}
 */
typeRegistry[$s[199]] = {
    name: $s[199],
    ctor: osapi.jive.corev3.contents.Favorite
};
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.contents.Favorite
 * to simplify use of the extprops resource.
 * This method will execute a POST for extprops resources
 */ /*

 osapi.jive.corev3.contents.Favorite.prototype.createExtProps = function(data, params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[506],"className":$s[751],"resourceName":$s[198],"httpMethod":$s[12],"signature":"data, params","queryParams":[$s[94]]});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.contents.Favorite
 * to simplify use of the outcomes resource.
 * This method will execute a POST for outcomes resources
 */ /*

 osapi.jive.corev3.contents.Favorite.prototype.createOutcome = function(data, params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[463],"className":$s[751],"resourceName":$s[218],"httpMethod":$s[12],"signature":"data, params","queryParams":[$s[94]]});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.contents.Favorite
 * to simplify use of the extprops resource.
 * This method will execute a DELETE for extprops resources
 */ /*

 osapi.jive.corev3.contents.Favorite.prototype.deleteExtProps = function() { [generated code] }

 */ defineInstanceMethod({"methodName":$s[507],"className":$s[751],"resourceName":$s[198],"httpMethod":$s[74],"signature":""});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.contents.Favorite
 * to simplify use of the self resource.
 * This method will execute a DELETE for self resources
 */ /*

 osapi.jive.corev3.contents.Favorite.prototype.destroy = function() { [generated code] }

 */ defineInstanceMethod({"methodName":$s[141],"className":$s[751],"resourceName":$s[25],"httpMethod":$s[74],"signature":""});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.contents.Favorite
 * to simplify use of the self resource.
 * This method will execute a GET for self resources
 */ /*

 osapi.jive.corev3.contents.Favorite.prototype.get = function(params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[5],"className":$s[751],"resourceName":$s[25],"httpMethod":$s[0],"signature":$s[105],"queryParams":[$s[185],$s[245],$s[94]]});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.contents.Favorite
 * to simplify use of the childOutcomeTypes resource.
 * This method will execute a GET for childOutcomeTypes resources
 */ /*

 osapi.jive.corev3.contents.Favorite.prototype.getChildOutcomeTypes = function(params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[619],"className":$s[751],"resourceName":$s[580],"httpMethod":$s[0],"signature":$s[105],"queryParams":[$s[38],$s[94],$s[209],$s[328]]});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.contents.Favorite
 * to simplify use of the extprops resource.
 * This method will execute a GET for extprops resources
 */ /*

 osapi.jive.corev3.contents.Favorite.prototype.getExtProps = function(params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[359],"className":$s[751],"resourceName":$s[198],"httpMethod":$s[0],"signature":$s[105],"queryParams":[$s[94]]});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.contents.Favorite
 * to simplify use of the outcomeTypes resource.
 * This method will execute a GET for outcomeTypes resources
 */ /*

 osapi.jive.corev3.contents.Favorite.prototype.getOutcomeTypes = function(params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[544],"className":$s[751],"resourceName":$s[433],"httpMethod":$s[0],"signature":$s[105],"queryParams":[$s[38],$s[94],$s[328]]});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.contents.Favorite
 * to simplify use of the outcomes resource.
 * This method will execute a GET for outcomes resources
 */ /*

 osapi.jive.corev3.contents.Favorite.prototype.getOutcomes = function(params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[361],"className":$s[751],"resourceName":$s[218],"httpMethod":$s[0],"signature":$s[105],"queryParams":[$s[38],$s[94],$s[632],$s[328]]});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.contents.Favorite
 * to simplify use of the self resource.
 * This method will execute a PUT for self resources
 */ /*

 osapi.jive.corev3.contents.Favorite.prototype.update = function(params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[124],"className":$s[751],"resourceName":$s[25],"httpMethod":$s[1],"signature":$s[105],"queryParams":[$s[185],$s[94],$s[47],$s[179]]});
/**
 * define class osapi.jive.corev3.metadata.Field, to extend osapi.jive.corev3.AbstractObject
 */
defineClass($s[713], osapi.jive.corev3.AbstractObject, {"type":$s[41]}, []);

/**
 * Describe the fields of osapi.jive.corev3.metadata.Field
 * @type {Array}
 */
osapi.jive.corev3.metadata.Field.fields = [
defineFieldMetadata($s[37],$s[127]),
defineFieldMetadata($s[394],$s[79]),
defineFieldMetadata($s[350],$s[79]),
defineFieldMetadata($s[351],$s[79]),
defineFieldMetadata($s[196],$s[127]),
defineFieldMetadata($s[294],$s[79]),
defineFieldMetadata($s[298],$s[127]),
defineFieldMetadata("id",$s[79]),
defineFieldMetadata($s[21],$s[79]),
defineFieldMetadata($s[373],$s[127]),
defineFieldMetadata($s[161],"String[]",null,false,false,true),
defineFieldMetadata($s[263],$s[11]),
defineFieldMetadata($s[228],$s[127]),
defineFieldMetadata($s[265],$s[77]),
defineFieldMetadata($s[59],$s[79]),
defineFieldMetadata($s[30],$s[79]),
defineFieldMetadata($s[388],$s[127]),
defineFieldMetadata($s[179],$s[11])
];

/**
 * Add an entry to the type registry for
 * osapi.jive.corev3.metadata.Field
 * @type {Object}
 */
typeRegistry[$s[41]] = {
    name: $s[41],
    ctor: osapi.jive.corev3.metadata.Field
};
/**
 * define class osapi.jive.corev3.contents.File, to extend osapi.jive.corev3.AbstractObject
 */
defineClass($s[681], osapi.jive.corev3.AbstractObject, {"type":$s[15]}, [{"name":$s[66]}]);

/**
 * Describe the fields of osapi.jive.corev3.contents.File
 * @type {Array}
 */
osapi.jive.corev3.contents.File.fields = [
defineFieldMetadata($s[279],$s[129]),
defineFieldMetadata($s[84],$s[78],$s[108]),
defineFieldMetadata($s[133],"Person[]",$s[108],true,false,true),
defineFieldMetadata($s[283],$s[79],null,true),
defineFieldMetadata($s[242],$s[79]),
defineFieldMetadata($s[286],"String[]",null,true,false,true),
defineFieldMetadata($s[137],$s[337],$s[345],true,true),
defineFieldMetadata($s[244],$s[79]),
defineFieldMetadata($s[457],"Image[]",$s[44],false,false,true),
defineFieldMetadata($s[346],$s[79]),
defineFieldMetadata($s[458],"ContentVideo[]",$s[400],false,false,true),
defineFieldMetadata($s[410],$s[127],null,true),
defineFieldMetadata($s[246],$s[78],$s[108]),
defineFieldMetadata($s[539],"Person[]",$s[108],true,false,true),
defineFieldMetadata($s[467],$s[129]),
defineFieldMetadata($s[201],$s[127]),
defineFieldMetadata($s[468],$s[129]),
defineFieldMetadata($s[471],$s[79]),
defineFieldMetadata($s[566],$s[79]),
defineFieldMetadata($s[472],$s[79]),
defineFieldMetadata($s[152],$s[79]),
defineFieldMetadata("id",$s[79]),
defineFieldMetadata($s[45],$s[79]),
defineFieldMetadata($s[425],$s[129]),
defineFieldMetadata($s[568],$s[11]),
defineFieldMetadata($s[259],$s[129]),
defineFieldMetadata($s[21],$s[79]),
defineFieldMetadata($s[317],$s[277],$s[317],true),
defineFieldMetadata($s[480],$s[77]),
defineFieldMetadata($s[574],"String[]",null,false,false,true),
defineFieldMetadata($s[433],"OutcomeType[]",$s[375],true,false,true),
defineFieldMetadata($s[106],$s[79],null,true),
defineFieldMetadata($s[481],$s[131],$s[176]),
defineFieldMetadata($s[621],$s[127]),
defineFieldMetadata($s[376],$s[131],$s[176]),
defineFieldMetadata($s[482],$s[127]),
defineFieldMetadata($s[528],$s[127]),
defineFieldMetadata($s[263],$s[11]),
defineFieldMetadata($s[323],$s[129]),
defineFieldMetadata($s[265],$s[77]),
defineFieldMetadata($s[575],$s[127],null,true),
defineFieldMetadata($s[531],$s[77]),
defineFieldMetadata($s[26],$s[129]),
defineFieldMetadata($s[118],$s[79]),
defineFieldMetadata($s[175],$s[79],null,true),
defineFieldMetadata($s[28],"String[]",null,true,false,true),
defineFieldMetadata($s[30],$s[79],null,false,true),
defineFieldMetadata($s[235],$s[129]),
defineFieldMetadata($s[179],$s[11]),
defineFieldMetadata($s[596],$s[277],$s[317],true),
defineFieldMetadata($s[180],$s[78],$s[108]),
defineFieldMetadata($s[67],"Person[]",$s[108],true,false,true),
defineFieldMetadata($s[31],$s[79]),
defineFieldMetadata($s[182],$s[129]),
defineFieldMetadata($s[10],$s[2],$s[10],true),
defineFieldMetadata($s[271],$s[129]),
defineFieldMetadata($s[335],$s[79],null,true),
defineFieldMetadata($s[664],$s[127])
];

/**
 * Add an entry to the type registry for
 * osapi.jive.corev3.contents.File
 * @type {Object}
 */
typeRegistry[$s[15]] = {
    name: $s[15],
    ctor: osapi.jive.corev3.contents.File
};
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.contents.File
 * to simplify use of the comments resource.
 * This method will execute a POST for comments resources
 */ /*

 osapi.jive.corev3.contents.File.prototype.createComment = function(data, params) { [generated code] }

 */ defineInstanceMethod({"signature":"data, params","queryParams":[$s[84],$s[94],$s[263],$s[179]],"methodName":$s[460],"className":$s[681],"resourceName":$s[192],"httpMethod":$s[12],"paramOverrides":{"parent":"@this.resources.self.ref","type":$s[136]}});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.contents.File
 * to simplify use of the extprops resource.
 * This method will execute a POST for extprops resources
 */ /*

 osapi.jive.corev3.contents.File.prototype.createExtProps = function(data, params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[506],"className":$s[681],"resourceName":$s[198],"httpMethod":$s[12],"signature":"data, params","queryParams":[$s[94]]});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.contents.File
 * to simplify use of the outcomes resource.
 * This method will execute a POST for outcomes resources
 */ /*

 osapi.jive.corev3.contents.File.prototype.createOutcome = function(data, params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[463],"className":$s[681],"resourceName":$s[218],"httpMethod":$s[12],"signature":"data, params","queryParams":[$s[94]]});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.contents.File
 * to simplify use of the extprops resource.
 * This method will execute a DELETE for extprops resources
 */ /*

 osapi.jive.corev3.contents.File.prototype.deleteExtProps = function() { [generated code] }

 */ defineInstanceMethod({"methodName":$s[507],"className":$s[681],"resourceName":$s[198],"httpMethod":$s[74],"signature":""});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.contents.File
 * to simplify use of the self resource.
 * This method will execute a DELETE for self resources
 */ /*

 osapi.jive.corev3.contents.File.prototype.destroy = function() { [generated code] }

 */ defineInstanceMethod({"methodName":$s[141],"className":$s[681],"resourceName":$s[25],"httpMethod":$s[74],"signature":""});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.contents.File
 * to simplify use of the self resource.
 * This method will execute a GET for self resources
 */ /*

 osapi.jive.corev3.contents.File.prototype.get = function(params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[5],"className":$s[681],"resourceName":$s[25],"httpMethod":$s[0],"signature":$s[105],"queryParams":[$s[185],$s[245],$s[94]]});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.contents.File
 * to simplify use of the childOutcomeTypes resource.
 * This method will execute a GET for childOutcomeTypes resources
 */ /*

 osapi.jive.corev3.contents.File.prototype.getChildOutcomeTypes = function(params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[619],"className":$s[681],"resourceName":$s[580],"httpMethod":$s[0],"signature":$s[105],"queryParams":[$s[38],$s[94],$s[209],$s[328]]});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.contents.File
 * to simplify use of the comments resource.
 * This method will execute a GET for comments resources
 */ /*

 osapi.jive.corev3.contents.File.prototype.getComments = function(params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[357],"className":$s[681],"resourceName":$s[192],"httpMethod":$s[0],"signature":$s[105],"queryParams":[$s[82],$s[84],$s[38],$s[511],$s[94],$s[95],$s[418],$s[99],$s[27],$s[328]]});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.contents.File
 * to simplify use of the extprops resource.
 * This method will execute a GET for extprops resources
 */ /*

 osapi.jive.corev3.contents.File.prototype.getExtProps = function(params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[359],"className":$s[681],"resourceName":$s[198],"httpMethod":$s[0],"signature":$s[105],"queryParams":[$s[94]]});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.contents.File
 * to simplify use of the followers resource.
 * This method will execute a GET for followers resources
 */ /*

 osapi.jive.corev3.contents.File.prototype.getFollowers = function(params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[415],"className":$s[681],"resourceName":$s[250],"httpMethod":$s[0],"signature":$s[105],"queryParams":[$s[38],$s[94],$s[95],$s[328]]});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.contents.File
 * to simplify use of the followingIn resource.
 * This method will execute a GET for followingIn resources
 */ /*

 osapi.jive.corev3.contents.File.prototype.getFollowingIn = function(params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[518],"className":$s[681],"resourceName":$s[354],"httpMethod":$s[0],"signature":$s[105],"queryParams":[$s[94]]});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.contents.File
 * to simplify use of the likes resource.
 * This method will execute a GET for likes resources
 */ /*

 osapi.jive.corev3.contents.File.prototype.getLikes = function(params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[203],"className":$s[681],"resourceName":$s[46],"httpMethod":$s[0],"signature":$s[105],"queryParams":[$s[38],$s[94],$s[328]]});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.contents.File
 * to simplify use of the outcomeTypes resource.
 * This method will execute a GET for outcomeTypes resources
 */ /*

 osapi.jive.corev3.contents.File.prototype.getOutcomeTypes = function(params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[544],"className":$s[681],"resourceName":$s[433],"httpMethod":$s[0],"signature":$s[105],"queryParams":[$s[38],$s[94],$s[328]]});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.contents.File
 * to simplify use of the outcomes resource.
 * This method will execute a GET for outcomes resources
 */ /*

 osapi.jive.corev3.contents.File.prototype.getOutcomes = function(params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[361],"className":$s[681],"resourceName":$s[218],"httpMethod":$s[0],"signature":$s[105],"queryParams":[$s[38],$s[94],$s[632],$s[328]]});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.contents.File
 * to simplify use of the versions resource.
 * This method will execute a GET for versions resources
 */ /*

 osapi.jive.corev3.contents.File.prototype.getVersions = function(params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[363],"className":$s[681],"resourceName":$s[236],"httpMethod":$s[0],"signature":$s[105],"queryParams":[$s[38],$s[94],$s[328]]});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.contents.File
 * to simplify use of the likes resource.
 * This method will execute a POST for likes resources
 */ /*

 osapi.jive.corev3.contents.File.prototype.like = function(params) { [generated code] }

 */ defineInstanceMethod({"signature":$s[105],"queryParams":[],"methodName":$s[20],"className":$s[681],"resourceName":$s[46],"httpMethod":$s[12],"hasBody":false});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.contents.File
 * to simplify use of the read resource.
 * This method will execute a POST for read resources
 */ /*

 osapi.jive.corev3.contents.File.prototype.markRead = function(params) { [generated code] }

 */ defineInstanceMethod({"signature":$s[105],"queryParams":[],"methodName":$s[216],"className":$s[681],"resourceName":$s[24],"httpMethod":$s[12],"hasBody":false});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.contents.File
 * to simplify use of the read resource.
 * This method will execute a DELETE for read resources
 */ /*

 osapi.jive.corev3.contents.File.prototype.markUnread = function() { [generated code] }

 */ defineInstanceMethod({"methodName":$s[313],"className":$s[681],"resourceName":$s[24],"httpMethod":$s[74],"signature":""});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.contents.File
 * to simplify use of the likes resource.
 * This method will execute a DELETE for likes resources
 */ /*

 osapi.jive.corev3.contents.File.prototype.unlike = function() { [generated code] }

 */ defineInstanceMethod({"methodName":$s[123],"className":$s[681],"resourceName":$s[46],"httpMethod":$s[74],"signature":""});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.contents.File
 * to simplify use of the self resource.
 * This method will execute a PUT for self resources
 */ /*

 osapi.jive.corev3.contents.File.prototype.update = function(params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[124],"className":$s[681],"resourceName":$s[25],"httpMethod":$s[1],"signature":$s[105],"queryParams":[$s[185],$s[94],$s[47],$s[179]]});
/**
 * define class osapi.jive.corev3.places.Group, to extend osapi.jive.corev3.AbstractObject
 */
defineClass($s[673], osapi.jive.corev3.AbstractObject, {"type":$s[43]}, [{"name":$s[66]}]);

/**
 * Describe the fields of osapi.jive.corev3.places.Group
 * @type {Array}
 */
osapi.jive.corev3.places.Group.fields = [
defineFieldMetadata($s[636],$s[127]),
defineFieldMetadata($s[637],$s[129]),
defineFieldMetadata($s[399],"String[]",null,true,false,true),
defineFieldMetadata($s[139],$s[78],$s[108]),
defineFieldMetadata($s[350],$s[79],null,true),
defineFieldMetadata($s[351],$s[79],null,true,true),
defineFieldMetadata($s[628],$s[127],null,true),
defineFieldMetadata($s[201],$s[127]),
defineFieldMetadata($s[468],$s[129]),
defineFieldMetadata($s[257],$s[79],null,true,true),
defineFieldMetadata($s[364],$s[79]),
defineFieldMetadata($s[471],$s[79]),
defineFieldMetadata($s[566],$s[79]),
defineFieldMetadata($s[472],$s[79]),
defineFieldMetadata($s[152],$s[79]),
defineFieldMetadata("id",$s[79]),
defineFieldMetadata($s[45],$s[79]),
defineFieldMetadata($s[259],$s[129]),
defineFieldMetadata($s[371],$s[129]),
defineFieldMetadata($s[21],$s[79],null,true,true),
defineFieldMetadata($s[106],$s[79]),
defineFieldMetadata($s[481],$s[131],$s[176]),
defineFieldMetadata($s[376],$s[131],$s[176]),
defineFieldMetadata($s[163],$s[79]),
defineFieldMetadata($s[377],"PlaceTopic[]",$s[321],true,false,true),
defineFieldMetadata($s[528],$s[127]),
defineFieldMetadata($s[263],$s[11]),
defineFieldMetadata($s[265],$s[77]),
defineFieldMetadata($s[531],$s[77]),
defineFieldMetadata($s[118],$s[79]),
defineFieldMetadata($s[28],"String[]",null,true,false,true),
defineFieldMetadata($s[30],$s[79],null,false,true),
defineFieldMetadata($s[235],$s[129]),
defineFieldMetadata($s[179],$s[11]),
defineFieldMetadata($s[31],$s[79]),
defineFieldMetadata($s[271],$s[129]),
defineFieldMetadata($s[664],$s[127],null,true)
];

/**
 * Add an entry to the type registry for
 * osapi.jive.corev3.places.Group
 * @type {Object}
 */
typeRegistry[$s[43]] = {
    name: $s[43],
    ctor: osapi.jive.corev3.places.Group
};
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.places.Group
 * to simplify use of the announcements resource.
 * This method will execute a POST for announcements resources
 */ /*

 osapi.jive.corev3.places.Group.prototype.createAnnouncement = function(data, params) { [generated code] }

 */ defineInstanceMethod({"signature":"data, params","queryParams":[$s[94]],"methodName":$s[599],"className":$s[673],"resourceName":$s[452],"httpMethod":$s[12],"paramOverrides":{"type":$s[391]}});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.places.Group
 * to simplify use of the avatar resource.
 * This method will execute a POST for avatar resources
 */ /*

 osapi.jive.corev3.places.Group.prototype.createAvatar = function(params) { [generated code] }

 */ defineInstanceMethod({"signature":$s[105],"queryParams":[$s[8]],"methodName":$s[401],"className":$s[673],"resourceName":$s[85],"httpMethod":$s[12],"hasBody":false});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.places.Group
 * to simplify use of the categories resource.
 * This method will execute a POST for categories resources
 */ /*

 osapi.jive.corev3.places.Group.prototype.createCategory = function(data, params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[505],"className":$s[673],"resourceName":$s[286],"httpMethod":$s[12],"signature":"data, params","queryParams":[$s[501],$s[94]]});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.places.Group
 * to simplify use of the extprops resource.
 * This method will execute a POST for extprops resources
 */ /*

 osapi.jive.corev3.places.Group.prototype.createExtProps = function(data, params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[506],"className":$s[673],"resourceName":$s[198],"httpMethod":$s[12],"signature":"data, params","queryParams":[$s[94]]});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.places.Group
 * to simplify use of the invites resource.
 * This method will execute a POST for invites resources
 */ /*

 osapi.jive.corev3.places.Group.prototype.createInvites = function(data, params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[461],"className":$s[673],"resourceName":$s[156],"httpMethod":$s[12],"signature":"data, params","queryParams":[$s[94]]});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.places.Group
 * to simplify use of the members resource.
 * This method will execute a POST for members resources
 */ /*

 osapi.jive.corev3.places.Group.prototype.createMember = function(data, params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[402],"className":$s[673],"resourceName":$s[158],"httpMethod":$s[12],"signature":"data, params","queryParams":[$s[94],$s[263]]});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.places.Group
 * to simplify use of the statics resource.
 * This method will execute a POST for statics resources
 */ /*

 osapi.jive.corev3.places.Group.prototype.createStatic = function(data, params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[403],"className":$s[673],"resourceName":$s[173],"httpMethod":$s[12],"signature":"data, params","queryParams":[$s[94]]});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.places.Group
 * to simplify use of the extprops resource.
 * This method will execute a DELETE for extprops resources
 */ /*

 osapi.jive.corev3.places.Group.prototype.deleteExtProps = function() { [generated code] }

 */ defineInstanceMethod({"methodName":$s[507],"className":$s[673],"resourceName":$s[198],"httpMethod":$s[74],"signature":""});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.places.Group
 * to simplify use of the self resource.
 * This method will execute a DELETE for self resources
 */ /*

 osapi.jive.corev3.places.Group.prototype.destroy = function() { [generated code] }

 */ defineInstanceMethod({"methodName":$s[141],"className":$s[673],"resourceName":$s[25],"httpMethod":$s[74],"signature":""});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.places.Group
 * to simplify use of the avatar resource.
 * This method will execute a DELETE for avatar resources
 */ /*

 osapi.jive.corev3.places.Group.prototype.destroyAvatar = function() { [generated code] }

 */ defineInstanceMethod({"methodName":$s[464],"className":$s[673],"resourceName":$s[85],"httpMethod":$s[74],"signature":""});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.places.Group
 * to simplify use of the self resource.
 * This method will execute a GET for self resources
 */ /*

 osapi.jive.corev3.places.Group.prototype.get = function(params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[5],"className":$s[673],"resourceName":$s[25],"httpMethod":$s[0],"signature":$s[105],"queryParams":[$s[94]]});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.places.Group
 * to simplify use of the activity resource.
 * This method will execute a GET for activity resources
 */ /*

 osapi.jive.corev3.places.Group.prototype.getActivity = function(params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[356],"className":$s[673],"resourceName":$s[186],"httpMethod":$s[0],"signature":$s[105],"queryParams":[$s[36],$s[87],$s[191],$s[397],$s[38],$s[94],$s[95],$s[432]]});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.places.Group
 * to simplify use of the announcements resource.
 * This method will execute a GET for announcements resources
 */ /*

 osapi.jive.corev3.places.Group.prototype.getAnnouncements = function(params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[562],"className":$s[673],"resourceName":$s[452],"httpMethod":$s[0],"signature":$s[105],"queryParams":[$s[280],$s[38],$s[413],$s[94],$s[328]]});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.places.Group
 * to simplify use of the blog resource.
 * This method will execute a GET for blog resources
 */ /*

 osapi.jive.corev3.places.Group.prototype.getBlog = function(params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[148],"className":$s[673],"resourceName":$s[13],"httpMethod":$s[0],"signature":$s[105],"queryParams":[$s[94]]});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.places.Group
 * to simplify use of the categories resource.
 * This method will execute a GET for categories resources
 */ /*

 osapi.jive.corev3.places.Group.prototype.getCategories = function(params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[469],"className":$s[673],"resourceName":$s[286],"httpMethod":$s[0],"signature":$s[105],"queryParams":[$s[94]]});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.places.Group
 * to simplify use of the contents resource.
 * This method will execute a GET for contents resources
 */ /*

 osapi.jive.corev3.places.Group.prototype.getContents = function(params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[358],"className":$s[673],"resourceName":$s[193],"httpMethod":$s[0],"signature":$s[105],"queryParams":[$s[185],$s[38],$s[94],$s[95],$s[420],$s[27],$s[328]]});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.places.Group
 * to simplify use of the extprops resource.
 * This method will execute a GET for extprops resources
 */ /*

 osapi.jive.corev3.places.Group.prototype.getExtProps = function(params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[359],"className":$s[673],"resourceName":$s[198],"httpMethod":$s[0],"signature":$s[105],"queryParams":[$s[94]]});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.places.Group
 * to simplify use of the featuredContent resource.
 * This method will execute a GET for featuredContent resources
 */ /*

 osapi.jive.corev3.places.Group.prototype.getFeaturedContent = function(params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[603],"className":$s[673],"resourceName":$s[540],"httpMethod":$s[0],"signature":$s[105],"queryParams":[$s[185],$s[94],$s[95]]});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.places.Group
 * to simplify use of the followers resource.
 * This method will execute a GET for followers resources
 */ /*

 osapi.jive.corev3.places.Group.prototype.getFollowers = function(params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[415],"className":$s[673],"resourceName":$s[250],"httpMethod":$s[0],"signature":$s[105],"queryParams":[$s[38],$s[94],$s[95],$s[328]]});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.places.Group
 * to simplify use of the followingIn resource.
 * This method will execute a GET for followingIn resources
 */ /*

 osapi.jive.corev3.places.Group.prototype.getFollowingIn = function(params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[518],"className":$s[673],"resourceName":$s[354],"httpMethod":$s[0],"signature":$s[105],"queryParams":[$s[94]]});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.places.Group
 * to simplify use of the invites resource.
 * This method will execute a GET for invites resources
 */ /*

 osapi.jive.corev3.places.Group.prototype.getInvites = function(params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[302],"className":$s[673],"resourceName":$s[156],"httpMethod":$s[0],"signature":$s[105],"queryParams":[$s[38],$s[94],$s[154],$s[155],$s[328]]});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.places.Group
 * to simplify use of the members resource.
 * This method will execute a GET for members resources
 */ /*

 osapi.jive.corev3.places.Group.prototype.getMembers = function(params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[304],"className":$s[673],"resourceName":$s[158],"httpMethod":$s[0],"signature":$s[105],"queryParams":[$s[38],$s[94],$s[95],$s[328],$s[63]]});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.places.Group
 * to simplify use of the places resource.
 * This method will execute a GET for places resources
 */ /*

 osapi.jive.corev3.places.Group.prototype.getPlaces = function(params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[256],"className":$s[673],"resourceName":$s[110],"httpMethod":$s[0],"signature":$s[105],"queryParams":[$s[38],$s[94],$s[95],$s[27],$s[328]]});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.places.Group
 * to simplify use of the statics resource.
 * This method will execute a GET for statics resources
 */ /*

 osapi.jive.corev3.places.Group.prototype.getStatics = function(params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[307],"className":$s[673],"resourceName":$s[173],"httpMethod":$s[0],"signature":$s[105],"queryParams":[$s[94],$s[329]]});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.places.Group
 * to simplify use of the self resource.
 * This method will execute a PUT for self resources
 */ /*

 osapi.jive.corev3.places.Group.prototype.update = function(params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[124],"className":$s[673],"resourceName":$s[25],"httpMethod":$s[1],"signature":$s[105],"queryParams":[$s[94],$s[179]]});
/**
 * define class osapi.jive.corev3.contents.Idea, to extend osapi.jive.corev3.AbstractObject
 */
defineClass($s[682], osapi.jive.corev3.AbstractObject, {"type":$s[17]}, [{"name":$s[66]}]);

/**
 * Describe the fields of osapi.jive.corev3.contents.Idea
 * @type {Array}
 */
osapi.jive.corev3.contents.Idea.fields = [
defineFieldMetadata($s[279],$s[129]),
defineFieldMetadata($s[84],$s[78],$s[108]),
defineFieldMetadata($s[133],"Person[]",$s[108],true,false,true),
defineFieldMetadata($s[283],$s[79],null,true),
defineFieldMetadata($s[558],$s[79],null,true),
defineFieldMetadata($s[286],"String[]",null,true,false,true),
defineFieldMetadata($s[398],$s[129]),
defineFieldMetadata($s[137],$s[337],$s[345],true,true),
defineFieldMetadata($s[244],$s[79]),
defineFieldMetadata($s[457],"Image[]",$s[44],false,false,true),
defineFieldMetadata($s[458],"ContentVideo[]",$s[400],false,false,true),
defineFieldMetadata($s[539],"Person[]",$s[108],true,false,true),
defineFieldMetadata($s[467],$s[129]),
defineFieldMetadata($s[201],$s[127]),
defineFieldMetadata($s[468],$s[129]),
defineFieldMetadata($s[471],$s[79]),
defineFieldMetadata($s[566],$s[79]),
defineFieldMetadata($s[472],$s[79]),
defineFieldMetadata($s[152],$s[79]),
defineFieldMetadata("id",$s[79]),
defineFieldMetadata($s[45],$s[79]),
defineFieldMetadata($s[425],$s[129]),
defineFieldMetadata($s[568],$s[11]),
defineFieldMetadata($s[259],$s[129]),
defineFieldMetadata($s[480],$s[77]),
defineFieldMetadata($s[574],"String[]",null,false,false,true),
defineFieldMetadata($s[433],"OutcomeType[]",$s[375],true,false,true),
defineFieldMetadata($s[106],$s[79],null,true),
defineFieldMetadata($s[481],$s[131],$s[176]),
defineFieldMetadata($s[621],$s[127]),
defineFieldMetadata($s[376],$s[131],$s[176]),
defineFieldMetadata($s[482],$s[127]),
defineFieldMetadata($s[166],$s[127]),
defineFieldMetadata($s[528],$s[127]),
defineFieldMetadata($s[263],$s[11]),
defineFieldMetadata($s[323],$s[129]),
defineFieldMetadata($s[265],$s[77]),
defineFieldMetadata($s[57],$s[129]),
defineFieldMetadata($s[531],$s[77]),
defineFieldMetadata($s[62],$s[79],null,true),
defineFieldMetadata($s[118],$s[79]),
defineFieldMetadata($s[175],$s[79],null,true,true),
defineFieldMetadata($s[28],"String[]",null,true,false,true),
defineFieldMetadata($s[30],$s[79],null,false,true),
defineFieldMetadata($s[235],$s[129]),
defineFieldMetadata($s[179],$s[11]),
defineFieldMetadata($s[67],"Person[]",$s[108],true,false,true),
defineFieldMetadata($s[31],$s[79]),
defineFieldMetadata($s[271],$s[129]),
defineFieldMetadata($s[335],$s[79],null,true),
defineFieldMetadata($s[664],$s[127]),
defineFieldMetadata($s[273],$s[129]),
defineFieldMetadata($s[70],$s[127])
];

/**
 * Add an entry to the type registry for
 * osapi.jive.corev3.contents.Idea
 * @type {Object}
 */
typeRegistry[$s[17]] = {
    name: $s[17],
    ctor: osapi.jive.corev3.contents.Idea
};
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.contents.Idea
 * to simplify use of the comments resource.
 * This method will execute a POST for comments resources
 */ /*

 osapi.jive.corev3.contents.Idea.prototype.createComment = function(data, params) { [generated code] }

 */ defineInstanceMethod({"signature":"data, params","queryParams":[$s[84],$s[94],$s[263],$s[179]],"methodName":$s[460],"className":$s[682],"resourceName":$s[192],"httpMethod":$s[12],"paramOverrides":{"parent":"@this.resources.self.ref","type":$s[136]}});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.contents.Idea
 * to simplify use of the extprops resource.
 * This method will execute a POST for extprops resources
 */ /*

 osapi.jive.corev3.contents.Idea.prototype.createExtProps = function(data, params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[506],"className":$s[682],"resourceName":$s[198],"httpMethod":$s[12],"signature":"data, params","queryParams":[$s[94]]});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.contents.Idea
 * to simplify use of the outcomes resource.
 * This method will execute a POST for outcomes resources
 */ /*

 osapi.jive.corev3.contents.Idea.prototype.createOutcome = function(data, params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[463],"className":$s[682],"resourceName":$s[218],"httpMethod":$s[12],"signature":"data, params","queryParams":[$s[94]]});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.contents.Idea
 * to simplify use of the extprops resource.
 * This method will execute a DELETE for extprops resources
 */ /*

 osapi.jive.corev3.contents.Idea.prototype.deleteExtProps = function() { [generated code] }

 */ defineInstanceMethod({"methodName":$s[507],"className":$s[682],"resourceName":$s[198],"httpMethod":$s[74],"signature":""});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.contents.Idea
 * to simplify use of the self resource.
 * This method will execute a DELETE for self resources
 */ /*

 osapi.jive.corev3.contents.Idea.prototype.destroy = function() { [generated code] }

 */ defineInstanceMethod({"methodName":$s[141],"className":$s[682],"resourceName":$s[25],"httpMethod":$s[74],"signature":""});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.contents.Idea
 * to simplify use of the self resource.
 * This method will execute a GET for self resources
 */ /*

 osapi.jive.corev3.contents.Idea.prototype.get = function(params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[5],"className":$s[682],"resourceName":$s[25],"httpMethod":$s[0],"signature":$s[105],"queryParams":[$s[185],$s[245],$s[94]]});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.contents.Idea
 * to simplify use of the childOutcomeTypes resource.
 * This method will execute a GET for childOutcomeTypes resources
 */ /*

 osapi.jive.corev3.contents.Idea.prototype.getChildOutcomeTypes = function(params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[619],"className":$s[682],"resourceName":$s[580],"httpMethod":$s[0],"signature":$s[105],"queryParams":[$s[38],$s[94],$s[209],$s[328]]});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.contents.Idea
 * to simplify use of the comments resource.
 * This method will execute a GET for comments resources
 */ /*

 osapi.jive.corev3.contents.Idea.prototype.getComments = function(params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[357],"className":$s[682],"resourceName":$s[192],"httpMethod":$s[0],"signature":$s[105],"queryParams":[$s[82],$s[84],$s[38],$s[511],$s[94],$s[95],$s[418],$s[99],$s[27],$s[328]]});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.contents.Idea
 * to simplify use of the demotes resource.
 * This method will execute a GET for demotes resources
 */ /*

 osapi.jive.corev3.contents.Idea.prototype.getDemotes = function(params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[300],"className":$s[682],"resourceName":$s[140],"httpMethod":$s[0],"signature":$s[105],"queryParams":[$s[38],$s[94],$s[328]]});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.contents.Idea
 * to simplify use of the extprops resource.
 * This method will execute a GET for extprops resources
 */ /*

 osapi.jive.corev3.contents.Idea.prototype.getExtProps = function(params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[359],"className":$s[682],"resourceName":$s[198],"httpMethod":$s[0],"signature":$s[105],"queryParams":[$s[94]]});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.contents.Idea
 * to simplify use of the followingIn resource.
 * This method will execute a GET for followingIn resources
 */ /*

 osapi.jive.corev3.contents.Idea.prototype.getFollowingIn = function(params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[518],"className":$s[682],"resourceName":$s[354],"httpMethod":$s[0],"signature":$s[105],"queryParams":[$s[94]]});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.contents.Idea
 * to simplify use of the outcomeTypes resource.
 * This method will execute a GET for outcomeTypes resources
 */ /*

 osapi.jive.corev3.contents.Idea.prototype.getOutcomeTypes = function(params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[544],"className":$s[682],"resourceName":$s[433],"httpMethod":$s[0],"signature":$s[105],"queryParams":[$s[38],$s[94],$s[328]]});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.contents.Idea
 * to simplify use of the outcomes resource.
 * This method will execute a GET for outcomes resources
 */ /*

 osapi.jive.corev3.contents.Idea.prototype.getOutcomes = function(params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[361],"className":$s[682],"resourceName":$s[218],"httpMethod":$s[0],"signature":$s[105],"queryParams":[$s[38],$s[94],$s[632],$s[328]]});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.contents.Idea
 * to simplify use of the promotes resource.
 * This method will execute a GET for promotes resources
 */ /*

 osapi.jive.corev3.contents.Idea.prototype.getPromotes = function(params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[362],"className":$s[682],"resourceName":$s[224],"httpMethod":$s[0],"signature":$s[105],"queryParams":[$s[38],$s[94],$s[328]]});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.contents.Idea
 * to simplify use of the votes resource.
 * This method will execute a GET for votes resources
 */ /*

 osapi.jive.corev3.contents.Idea.prototype.getVotes = function(params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[205],"className":$s[682],"resourceName":$s[72],"httpMethod":$s[0],"signature":$s[105],"queryParams":[$s[38],$s[94],$s[328]]});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.contents.Idea
 * to simplify use of the read resource.
 * This method will execute a POST for read resources
 */ /*

 osapi.jive.corev3.contents.Idea.prototype.markRead = function(params) { [generated code] }

 */ defineInstanceMethod({"signature":$s[105],"queryParams":[],"methodName":$s[216],"className":$s[682],"resourceName":$s[24],"httpMethod":$s[12],"hasBody":false});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.contents.Idea
 * to simplify use of the read resource.
 * This method will execute a DELETE for read resources
 */ /*

 osapi.jive.corev3.contents.Idea.prototype.markUnread = function() { [generated code] }

 */ defineInstanceMethod({"methodName":$s[313],"className":$s[682],"resourceName":$s[24],"httpMethod":$s[74],"signature":""});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.contents.Idea
 * to simplify use of the self resource.
 * This method will execute a PUT for self resources
 */ /*

 osapi.jive.corev3.contents.Idea.prototype.update = function(params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[124],"className":$s[682],"resourceName":$s[25],"httpMethod":$s[1],"signature":$s[105],"queryParams":[$s[185],$s[94],$s[47],$s[179]]});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.contents.Idea
 * to simplify use of the votes resource.
 * This method will execute a POST for votes resources
 */ /*

 osapi.jive.corev3.contents.Idea.prototype.voteDown = function(data, params) { [generated code] }

 */ defineInstanceMethod({"signature":"data, params","queryParams":[],"methodName":$s[237],"className":$s[682],"resourceName":$s[72],"httpMethod":$s[12],"paramOverrides":{"promote":"@false"}});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.contents.Idea
 * to simplify use of the votes resource.
 * This method will execute a POST for votes resources
 */ /*

 osapi.jive.corev3.contents.Idea.prototype.voteUp = function(data, params) { [generated code] }

 */ defineInstanceMethod({"signature":"data, params","queryParams":[],"methodName":$s[126],"className":$s[682],"resourceName":$s[72],"httpMethod":$s[12],"paramOverrides":{"promote":"@true"}});
/**
 * define class osapi.jive.corev3.contents.Vote, to extend osapi.jive.corev3.AbstractObject
 */
defineClass($s[686], osapi.jive.corev3.AbstractObject, {"type":$s[207]}, []);

/**
 * Describe the fields of osapi.jive.corev3.contents.Vote
 * @type {Array}
 */
osapi.jive.corev3.contents.Vote.fields = [
defineFieldMetadata("id",$s[79]),
defineFieldMetadata($s[17],"Idea",$s[17]),
defineFieldMetadata($s[166],$s[127],null,true,true),
defineFieldMetadata($s[265],$s[77]),
defineFieldMetadata($s[30],$s[79],null,false,true),
defineFieldMetadata($s[71],$s[78],$s[108])
];

/**
 * Add an entry to the type registry for
 * osapi.jive.corev3.contents.Vote
 * @type {Object}
 */
typeRegistry[$s[207]] = {
    name: $s[207],
    ctor: osapi.jive.corev3.contents.Vote
};
/**
 * define class osapi.jive.corev3.contents.Image, to extend osapi.jive.corev3.AbstractObject
 */
defineClass($s[706], osapi.jive.corev3.AbstractObject, {"type":$s[44]}, []);

/**
 * Describe the fields of osapi.jive.corev3.contents.Image
 * @type {Array}
 */
osapi.jive.corev3.contents.Image.fields = [
defineFieldMetadata($s[346],$s[79]),
defineFieldMetadata($s[350],$s[79]),
defineFieldMetadata($s[201],$s[127]),
defineFieldMetadata($s[468],$s[129]),
defineFieldMetadata($s[96],$s[129]),
defineFieldMetadata("id",$s[79]),
defineFieldMetadata($s[259],$s[129]),
defineFieldMetadata($s[21],$s[79]),
defineFieldMetadata($s[263],$s[11]),
defineFieldMetadata($s[7],$s[79]),
defineFieldMetadata($s[265],$s[77]),
defineFieldMetadata($s[26],$s[129]),
defineFieldMetadata($s[28],"String[]",null,true,false,true),
defineFieldMetadata($s[30],$s[79]),
defineFieldMetadata($s[235],$s[129]),
defineFieldMetadata($s[179],$s[11]),
defineFieldMetadata($s[73],$s[129])
];

/**
 * Add an entry to the type registry for
 * osapi.jive.corev3.contents.Image
 * @type {Object}
 */
typeRegistry[$s[44]] = {
    name: $s[44],
    ctor: osapi.jive.corev3.contents.Image
};
/**
 * define class osapi.jive.corev3.inbox.InboxEntry, to extend osapi.jive.corev3.AbstractObject
 */
defineClass($s[739], osapi.jive.corev3.AbstractObject, {"type":$s[311]}, [{"name":$s[66],"params":{"for":$s[494]}}]);

/**
 * Describe the fields of osapi.jive.corev3.inbox.InboxEntry
 * @type {Array}
 */
osapi.jive.corev3.inbox.InboxEntry.fields = [
defineFieldMetadata($s[35],$s[496],$s[525]),
defineFieldMetadata($s[137],$s[79],null,true,true),
defineFieldMetadata($s[254],$s[495],$s[498]),
defineFieldMetadata($s[16],$s[238],$s[261],true),
defineFieldMetadata("id",$s[79]),
defineFieldMetadata($s[18],$s[450],$s[473],true),
defineFieldMetadata($s[103],$s[495],$s[498],true),
defineFieldMetadata($s[318],$s[278],$s[318],true),
defineFieldMetadata($s[436],$s[238],$s[261]),
defineFieldMetadata($s[226],$s[495],$s[498]),
defineFieldMetadata($s[263],$s[11]),
defineFieldMetadata($s[265],$s[77]),
defineFieldMetadata($s[122],$s[495],$s[498],true),
defineFieldMetadata($s[65],$s[79],null,true,true),
defineFieldMetadata($s[30],$s[79]),
defineFieldMetadata($s[179],$s[11]),
defineFieldMetadata($s[9],$s[79],null,true),
defineFieldMetadata($s[32],$s[79],null,true),
defineFieldMetadata($s[271],$s[129])
];

/**
 * Add an entry to the type registry for
 * osapi.jive.corev3.inbox.InboxEntry
 * @type {Object}
 */
typeRegistry[$s[311]] = {
    name: $s[311],
    ctor: osapi.jive.corev3.inbox.InboxEntry
};
/**
 * define class osapi.jive.corev3.communications.interaction, to extend osapi.jive.corev3.AbstractObject
 */
defineClass($s[839], osapi.jive.corev3.AbstractObject, {"type":$s[365]}, [{"name":$s[66]}]);

/**
 * Describe the fields of osapi.jive.corev3.communications.interaction
 * @type {Array}
 */
osapi.jive.corev3.communications.interaction.fields = [
defineFieldMetadata($s[279],$s[129]),
defineFieldMetadata($s[84],$s[78],$s[108]),
defineFieldMetadata($s[137],$s[337],$s[345],true,true),
defineFieldMetadata($s[244],$s[79]),
defineFieldMetadata($s[457],"Image[]",$s[44],false,false,true),
defineFieldMetadata($s[458],"ContentVideo[]",$s[400],false,false,true),
defineFieldMetadata($s[467],$s[129]),
defineFieldMetadata($s[201],$s[127]),
defineFieldMetadata($s[468],$s[129]),
defineFieldMetadata($s[471],$s[79]),
defineFieldMetadata($s[566],$s[79]),
defineFieldMetadata($s[472],$s[79]),
defineFieldMetadata($s[152],$s[79]),
defineFieldMetadata("id",$s[79]),
defineFieldMetadata($s[45],$s[79]),
defineFieldMetadata($s[425],$s[129]),
defineFieldMetadata($s[568],$s[11]),
defineFieldMetadata($s[259],$s[129]),
defineFieldMetadata($s[106],$s[79],null,true,true),
defineFieldMetadata($s[481],$s[131],$s[176]),
defineFieldMetadata($s[621],$s[127]),
defineFieldMetadata($s[376],$s[131],$s[176]),
defineFieldMetadata($s[482],$s[127]),
defineFieldMetadata($s[528],$s[127]),
defineFieldMetadata($s[263],$s[11]),
defineFieldMetadata($s[626],$s[79]),
defineFieldMetadata($s[484],$s[79]),
defineFieldMetadata($s[323],$s[129]),
defineFieldMetadata($s[265],$s[77]),
defineFieldMetadata($s[531],$s[77]),
defineFieldMetadata($s[118],$s[79]),
defineFieldMetadata($s[175],$s[79],null,true,true),
defineFieldMetadata($s[28],"String[]",null,true,false,true),
defineFieldMetadata($s[30],$s[79],null,false,true),
defineFieldMetadata($s[235],$s[129]),
defineFieldMetadata($s[179],$s[11]),
defineFieldMetadata($s[31],$s[79]),
defineFieldMetadata($s[271],$s[129]),
defineFieldMetadata($s[664],$s[127])
];

/**
 * Add an entry to the type registry for
 * osapi.jive.corev3.communications.interaction
 * @type {Object}
 */
typeRegistry[$s[365]] = {
    name: $s[365],
    ctor: osapi.jive.corev3.communications.interaction
};
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.communications.interaction
 * to simplify use of the participants resource.
 * This method will execute a POST for participants resources
 */ /*

 osapi.jive.corev3.communications.interaction.prototype.addParticipant = function(data, params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[499],"className":$s[839],"resourceName":$s[434],"httpMethod":$s[12],"signature":"data, params","queryParams":[$s[94]]});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.communications.interaction
 * to simplify use of the comments resource.
 * This method will execute a POST for comments resources
 */ /*

 osapi.jive.corev3.communications.interaction.prototype.createComment = function(data, params) { [generated code] }

 */ defineInstanceMethod({"signature":"data, params","queryParams":[$s[84],$s[94],$s[263],$s[179]],"methodName":$s[460],"className":$s[839],"resourceName":$s[192],"httpMethod":$s[12],"paramOverrides":{"parent":"@this.resources.self.ref","type":$s[136]}});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.communications.interaction
 * to simplify use of the extprops resource.
 * This method will execute a POST for extprops resources
 */ /*

 osapi.jive.corev3.communications.interaction.prototype.createExtProps = function(data, params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[506],"className":$s[839],"resourceName":$s[198],"httpMethod":$s[12],"signature":"data, params","queryParams":[$s[94]]});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.communications.interaction
 * to simplify use of the interactions resource.
 * This method will execute a POST for interactions resources
 */ /*

 osapi.jive.corev3.communications.interaction.prototype.createInteraction = function(data, params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[583],"className":$s[839],"resourceName":$s[423],"httpMethod":$s[12],"signature":"data, params","queryParams":[$s[94]]});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.communications.interaction
 * to simplify use of the outcomes resource.
 * This method will execute a POST for outcomes resources
 */ /*

 osapi.jive.corev3.communications.interaction.prototype.createOutcome = function(data, params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[463],"className":$s[839],"resourceName":$s[218],"httpMethod":$s[12],"signature":"data, params","queryParams":[$s[94]]});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.communications.interaction
 * to simplify use of the extprops resource.
 * This method will execute a DELETE for extprops resources
 */ /*

 osapi.jive.corev3.communications.interaction.prototype.deleteExtProps = function() { [generated code] }

 */ defineInstanceMethod({"methodName":$s[507],"className":$s[839],"resourceName":$s[198],"httpMethod":$s[74],"signature":""});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.communications.interaction
 * to simplify use of the self resource.
 * This method will execute a DELETE for self resources
 */ /*

 osapi.jive.corev3.communications.interaction.prototype.destroy = function() { [generated code] }

 */ defineInstanceMethod({"methodName":$s[141],"className":$s[839],"resourceName":$s[25],"httpMethod":$s[74],"signature":""});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.communications.interaction
 * to simplify use of the self resource.
 * This method will execute a GET for self resources
 */ /*

 osapi.jive.corev3.communications.interaction.prototype.get = function(params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[5],"className":$s[839],"resourceName":$s[25],"httpMethod":$s[0],"signature":$s[105],"queryParams":[$s[94]]});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.communications.interaction
 * to simplify use of the childOutcomeTypes resource.
 * This method will execute a GET for childOutcomeTypes resources
 */ /*

 osapi.jive.corev3.communications.interaction.prototype.getChildOutcomeTypes = function(params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[619],"className":$s[839],"resourceName":$s[580],"httpMethod":$s[0],"signature":$s[105],"queryParams":[$s[38],$s[94],$s[209],$s[328]]});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.communications.interaction
 * to simplify use of the comments resource.
 * This method will execute a GET for comments resources
 */ /*

 osapi.jive.corev3.communications.interaction.prototype.getComments = function(params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[357],"className":$s[839],"resourceName":$s[192],"httpMethod":$s[0],"signature":$s[105],"queryParams":[$s[82],$s[84],$s[38],$s[511],$s[94],$s[95],$s[418],$s[99],$s[27],$s[328]]});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.communications.interaction
 * to simplify use of the extprops resource.
 * This method will execute a GET for extprops resources
 */ /*

 osapi.jive.corev3.communications.interaction.prototype.getExtProps = function(params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[359],"className":$s[839],"resourceName":$s[198],"httpMethod":$s[0],"signature":$s[105],"queryParams":[$s[94]]});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.communications.interaction
 * to simplify use of the interactions resource.
 * This method will execute a GET for interactions resources
 */ /*

 osapi.jive.corev3.communications.interaction.prototype.getInteractions = function(params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[543],"className":$s[839],"resourceName":$s[423],"httpMethod":$s[0],"signature":$s[105],"queryParams":[$s[36],$s[87],$s[38],$s[94],$s[95]]});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.communications.interaction
 * to simplify use of the outcomeTypes resource.
 * This method will execute a GET for outcomeTypes resources
 */ /*

 osapi.jive.corev3.communications.interaction.prototype.getOutcomeTypes = function(params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[544],"className":$s[839],"resourceName":$s[433],"httpMethod":$s[0],"signature":$s[105],"queryParams":[$s[38],$s[94],$s[328]]});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.communications.interaction
 * to simplify use of the outcomes resource.
 * This method will execute a GET for outcomes resources
 */ /*

 osapi.jive.corev3.communications.interaction.prototype.getOutcomes = function(params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[361],"className":$s[839],"resourceName":$s[218],"httpMethod":$s[0],"signature":$s[105],"queryParams":[$s[38],$s[94],$s[632],$s[328]]});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.communications.interaction
 * to simplify use of the subject resource.
 * This method will execute a POST for subject resources
 */ /*

 osapi.jive.corev3.communications.interaction.prototype.setSubject = function(data, params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[327],"className":$s[839],"resourceName":$s[175],"httpMethod":$s[12],"signature":"data, params","queryParams":[$s[94]]});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.communications.interaction
 * to simplify use of the self resource.
 * This method will execute a PUT for self resources
 */ /*

 osapi.jive.corev3.communications.interaction.prototype.update = function(params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[124],"className":$s[839],"resourceName":$s[25],"httpMethod":$s[1],"signature":$s[105],"queryParams":[$s[94]]});
/**
 * define class osapi.jive.corev3.places.Invite, to extend osapi.jive.corev3.AbstractObject
 */
defineClass($s[695], osapi.jive.corev3.AbstractObject, {"type":$s[100]}, [{"name":$s[66]}]);

/**
 * Describe the fields of osapi.jive.corev3.places.Invite
 * @type {Array}
 */
osapi.jive.corev3.places.Invite.fields = [
defineFieldMetadata($s[14],$s[79]),
defineFieldMetadata($s[39],$s[79]),
defineFieldMetadata($s[201],$s[127]),
defineFieldMetadata($s[468],$s[129]),
defineFieldMetadata("id",$s[79]),
defineFieldMetadata($s[154],$s[78],$s[108]),
defineFieldMetadata($s[155],$s[78],$s[108]),
defineFieldMetadata($s[259],$s[129]),
defineFieldMetadata($s[53],$s[34],$s[3]),
defineFieldMetadata($s[263],$s[11]),
defineFieldMetadata($s[265],$s[77]),
defineFieldMetadata($s[324],$s[11]),
defineFieldMetadata($s[169],$s[78],$s[108]),
defineFieldMetadata($s[232],$s[11]),
defineFieldMetadata($s[63],$s[79]),
defineFieldMetadata($s[28],"String[]",null,false,false,true),
defineFieldMetadata($s[30],$s[79]),
defineFieldMetadata($s[235],$s[129]),
defineFieldMetadata($s[179],$s[11])
];

/**
 * Add an entry to the type registry for
 * osapi.jive.corev3.places.Invite
 * @type {Object}
 */
typeRegistry[$s[100]] = {
    name: $s[100],
    ctor: osapi.jive.corev3.places.Invite
};
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.places.Invite
 * to simplify use of the self resource.
 * This method will execute a DELETE for self resources
 */ /*

 osapi.jive.corev3.places.Invite.prototype.destroy = function() { [generated code] }

 */ defineInstanceMethod({"methodName":$s[141],"className":$s[695],"resourceName":$s[25],"httpMethod":$s[74],"signature":""});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.places.Invite
 * to simplify use of the self resource.
 * This method will execute a GET for self resources
 */ /*

 osapi.jive.corev3.places.Invite.prototype.get = function(params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[5],"className":$s[695],"resourceName":$s[25],"httpMethod":$s[0],"signature":$s[105],"queryParams":[$s[94]]});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.places.Invite
 * to simplify use of the self resource.
 * This method will execute a PUT for self resources
 */ /*

 osapi.jive.corev3.places.Invite.prototype.update = function(params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[124],"className":$s[695],"resourceName":$s[25],"httpMethod":$s[1],"signature":$s[105],"queryParams":[$s[94],$s[523]]});
/**
 * define class osapi.jive.corev3.admin.JiveProperty, to extend osapi.jive.corev3.AbstractObject
 */
defineClass($s[763], osapi.jive.corev3.AbstractObject, {"type":$s[424]}, []);

/**
 * Describe the fields of osapi.jive.corev3.admin.JiveProperty
 * @type {Array}
 */
osapi.jive.corev3.admin.JiveProperty.fields = [
defineFieldMetadata("id",$s[79]),
defineFieldMetadata($s[21],$s[79],null,true,true),
defineFieldMetadata($s[265],$s[77]),
defineFieldMetadata($s[30],$s[79]),
defineFieldMetadata($s[68],$s[79],null,true,true)
];

/**
 * Add an entry to the type registry for
 * osapi.jive.corev3.admin.JiveProperty
 * @type {Object}
 */
typeRegistry[$s[424]] = {
    name: $s[424],
    ctor: osapi.jive.corev3.admin.JiveProperty
};
/**
 * define class osapi.jive.corev3.metadata.Locale, to extend osapi.jive.corev3.AbstractObject
 */
defineClass($s[721], osapi.jive.corev3.AbstractObject, {"type":$s[101]}, []);

/**
 * Describe the fields of osapi.jive.corev3.metadata.Locale
 * @type {Array}
 */
osapi.jive.corev3.metadata.Locale.fields = [
defineFieldMetadata($s[138],$s[79]),
defineFieldMetadata($s[509],$s[79]),
defineFieldMetadata($s[538],$s[79]),
defineFieldMetadata($s[510],$s[79]),
defineFieldMetadata("id",$s[79]),
defineFieldMetadata($s[211],$s[79]),
defineFieldMetadata($s[265],$s[77]),
defineFieldMetadata($s[181],$s[79])
];

/**
 * Add an entry to the type registry for
 * osapi.jive.corev3.metadata.Locale
 * @type {Object}
 */
typeRegistry[$s[101]] = {
    name: $s[101],
    ctor: osapi.jive.corev3.metadata.Locale
};
/**
 * define class osapi.jive.corev3.places.Member, to extend osapi.jive.corev3.AbstractObject
 */
defineClass($s[696], osapi.jive.corev3.AbstractObject, {"type":$s[102]}, [{"name":$s[66]}]);

/**
 * Describe the fields of osapi.jive.corev3.places.Member
 * @type {Array}
 */
osapi.jive.corev3.places.Member.fields = [
defineFieldMetadata($s[201],$s[127]),
defineFieldMetadata($s[468],$s[129]),
defineFieldMetadata($s[43],$s[33],$s[43]),
defineFieldMetadata("id",$s[79]),
defineFieldMetadata($s[259],$s[129]),
defineFieldMetadata($s[108],$s[78],$s[108]),
defineFieldMetadata($s[263],$s[11]),
defineFieldMetadata($s[265],$s[77]),
defineFieldMetadata($s[63],$s[79],null,true,true),
defineFieldMetadata($s[28],"String[]",null,false,false,true),
defineFieldMetadata($s[30],$s[79]),
defineFieldMetadata($s[235],$s[129]),
defineFieldMetadata($s[179],$s[11])
];

/**
 * Add an entry to the type registry for
 * osapi.jive.corev3.places.Member
 * @type {Object}
 */
typeRegistry[$s[102]] = {
    name: $s[102],
    ctor: osapi.jive.corev3.places.Member
};
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.places.Member
 * to simplify use of the self resource.
 * This method will execute a DELETE for self resources
 */ /*

 osapi.jive.corev3.places.Member.prototype.destroy = function() { [generated code] }

 */ defineInstanceMethod({"methodName":$s[141],"className":$s[696],"resourceName":$s[25],"httpMethod":$s[74],"signature":""});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.places.Member
 * to simplify use of the self resource.
 * This method will execute a GET for self resources
 */ /*

 osapi.jive.corev3.places.Member.prototype.get = function(params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[5],"className":$s[696],"resourceName":$s[25],"httpMethod":$s[0],"signature":$s[105],"queryParams":[$s[94]]});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.places.Member
 * to simplify use of the self resource.
 * This method will execute a PUT for self resources
 */ /*

 osapi.jive.corev3.places.Member.prototype.update = function(params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[124],"className":$s[696],"resourceName":$s[25],"httpMethod":$s[1],"signature":$s[105],"queryParams":[$s[94]]});
/**
 * define class osapi.jive.corev3.communications.Mention, to extend osapi.jive.corev3.AbstractObject
 */
defineClass($s[813], osapi.jive.corev3.AbstractObject, {"type":$s[159]}, []);

/**
 * Describe the fields of osapi.jive.corev3.communications.Mention
 * @type {Array}
 */
osapi.jive.corev3.communications.Mention.fields = [
defineFieldMetadata($s[201],$s[127]),
defineFieldMetadata($s[468],$s[129]),
defineFieldMetadata("id",$s[79]),
defineFieldMetadata($s[259],$s[129]),
defineFieldMetadata($s[571],$s[128],$s[3]),
defineFieldMetadata($s[550],$s[77],$s[3]),
defineFieldMetadata($s[263],$s[11]),
defineFieldMetadata($s[265],$s[77]),
defineFieldMetadata($s[28],"String[]",null,false,false,true),
defineFieldMetadata($s[30],$s[79]),
defineFieldMetadata($s[235],$s[129]),
defineFieldMetadata($s[179],$s[11])
];

/**
 * Add an entry to the type registry for
 * osapi.jive.corev3.communications.Mention
 * @type {Object}
 */
typeRegistry[$s[159]] = {
    name: $s[159],
    ctor: osapi.jive.corev3.communications.Mention
};
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.communications.Mention
 * to simplify use of the self resource.
 * This method will execute a GET for self resources
 */ /*

 osapi.jive.corev3.communications.Mention.prototype.get = function(params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[5],"className":$s[813],"resourceName":$s[25],"httpMethod":$s[0],"signature":$s[105],"queryParams":[$s[94]]});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.communications.Mention
 * to simplify use of the read resource.
 * This method will execute a POST for read resources
 */ /*

 osapi.jive.corev3.communications.Mention.prototype.markRead = function(params) { [generated code] }

 */ defineInstanceMethod({"signature":$s[105],"queryParams":[],"methodName":$s[216],"className":$s[813],"resourceName":$s[24],"httpMethod":$s[12],"hasBody":false});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.communications.Mention
 * to simplify use of the read resource.
 * This method will execute a DELETE for read resources
 */ /*

 osapi.jive.corev3.communications.Mention.prototype.markUnread = function() { [generated code] }

 */ defineInstanceMethod({"methodName":$s[313],"className":$s[813],"resourceName":$s[24],"httpMethod":$s[74],"signature":""});
/**
 * define class osapi.jive.corev3.contents.Message, to extend osapi.jive.corev3.AbstractObject
 */
defineClass($s[734], osapi.jive.corev3.AbstractObject, {"type":$s[160]}, [{"name":$s[66]}]);

/**
 * Describe the fields of osapi.jive.corev3.contents.Message
 * @type {Array}
 */
osapi.jive.corev3.contents.Message.fields = [
defineFieldMetadata($s[279],$s[129]),
defineFieldMetadata($s[83],$s[127],null,true),
defineFieldMetadata($s[624],$s[129]),
defineFieldMetadata($s[341],"Attachment[]",$s[281],true,false,true),
defineFieldMetadata($s[84],$s[78],$s[108]),
defineFieldMetadata($s[503],$s[127]),
defineFieldMetadata($s[559],$s[127]),
defineFieldMetadata($s[137],$s[337],$s[345],true,true),
defineFieldMetadata($s[244],$s[79]),
defineFieldMetadata($s[457],"Image[]",$s[44],false,false,true),
defineFieldMetadata($s[458],"ContentVideo[]",$s[400],false,false,true),
defineFieldMetadata($s[293],$s[79]),
defineFieldMetadata($s[467],$s[129]),
defineFieldMetadata($s[201],$s[127]),
defineFieldMetadata($s[468],$s[129]),
defineFieldMetadata($s[253],$s[79],null,true),
defineFieldMetadata($s[548],$s[127]),
defineFieldMetadata($s[592],$s[127]),
defineFieldMetadata($s[150],$s[127],null,true),
defineFieldMetadata($s[417],$s[129]),
defineFieldMetadata($s[471],$s[79]),
defineFieldMetadata($s[566],$s[79]),
defineFieldMetadata($s[472],$s[79]),
defineFieldMetadata($s[152],$s[79]),
defineFieldMetadata("id",$s[79]),
defineFieldMetadata($s[45],$s[79]),
defineFieldMetadata($s[425],$s[129]),
defineFieldMetadata($s[568],$s[11]),
defineFieldMetadata($s[259],$s[129]),
defineFieldMetadata($s[476],$s[79]),
defineFieldMetadata($s[317],$s[277],$s[317],true),
defineFieldMetadata($s[480],$s[77]),
defineFieldMetadata($s[574],"String[]",null,false,false,true),
defineFieldMetadata($s[433],"OutcomeType[]",$s[375],true,false,true),
defineFieldMetadata($s[106],$s[79],null,true),
defineFieldMetadata($s[481],$s[131],$s[176]),
defineFieldMetadata($s[621],$s[127]),
defineFieldMetadata($s[376],$s[131],$s[176]),
defineFieldMetadata($s[482],$s[127]),
defineFieldMetadata($s[223],$s[79],null,true),
defineFieldMetadata($s[528],$s[127]),
defineFieldMetadata($s[263],$s[11]),
defineFieldMetadata($s[227],$s[127],null,true),
defineFieldMetadata($s[323],$s[129]),
defineFieldMetadata($s[265],$s[77]),
defineFieldMetadata($s[531],$s[77]),
defineFieldMetadata($s[118],$s[79]),
defineFieldMetadata($s[175],$s[79]),
defineFieldMetadata($s[28],"String[]",null,true,false,true),
defineFieldMetadata($s[30],$s[79],null,false,true),
defineFieldMetadata($s[235],$s[129]),
defineFieldMetadata($s[577],$s[127]),
defineFieldMetadata($s[535],$s[129]),
defineFieldMetadata($s[179],$s[11]),
defineFieldMetadata($s[31],$s[79]),
defineFieldMetadata($s[10],$s[2],$s[10],true),
defineFieldMetadata($s[271],$s[129]),
defineFieldMetadata($s[664],$s[127])
];

/**
 * Add an entry to the type registry for
 * osapi.jive.corev3.contents.Message
 * @type {Object}
 */
typeRegistry[$s[160]] = {
    name: $s[160],
    ctor: osapi.jive.corev3.contents.Message
};
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.contents.Message
 * to simplify use of the answeredQuestion resource.
 * This method will execute a POST for answeredQuestion resources
 */ /*

 osapi.jive.corev3.contents.Message.prototype.answeredQuestion = function(data, params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[557],"className":$s[734],"resourceName":$s[557],"httpMethod":$s[12],"signature":"data, params"});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.contents.Message
 * to simplify use of the correctAnswer resource.
 * This method will execute a PUT for correctAnswer resources
 */ /*

 osapi.jive.corev3.contents.Message.prototype.correctAnswer = function(params) { [generated code] }

 */ defineInstanceMethod({"signature":$s[105],"queryParams":[],"methodName":$s[459],"className":$s[734],"resourceName":$s[459],"httpMethod":$s[1],"hasBody":false});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.contents.Message
 * to simplify use of the extprops resource.
 * This method will execute a POST for extprops resources
 */ /*

 osapi.jive.corev3.contents.Message.prototype.createExtProps = function(data, params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[506],"className":$s[734],"resourceName":$s[198],"httpMethod":$s[12],"signature":"data, params","queryParams":[$s[94]]});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.contents.Message
 * to simplify use of the outcomes resource.
 * This method will execute a POST for outcomes resources
 */ /*

 osapi.jive.corev3.contents.Message.prototype.createOutcome = function(data, params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[463],"className":$s[734],"resourceName":$s[218],"httpMethod":$s[12],"signature":"data, params","queryParams":[$s[94]]});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.contents.Message
 * to simplify use of the messages resource.
 * This method will execute a POST for messages resources
 */ /*

 osapi.jive.corev3.contents.Message.prototype.createReply = function(data, params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[348],"className":$s[734],"resourceName":$s[217],"httpMethod":$s[12],"signature":"data, params","queryParams":[$s[94],$s[263],$s[179]]});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.contents.Message
 * to simplify use of the extprops resource.
 * This method will execute a DELETE for extprops resources
 */ /*

 osapi.jive.corev3.contents.Message.prototype.deleteExtProps = function() { [generated code] }

 */ defineInstanceMethod({"methodName":$s[507],"className":$s[734],"resourceName":$s[198],"httpMethod":$s[74],"signature":""});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.contents.Message
 * to simplify use of the self resource.
 * This method will execute a DELETE for self resources
 */ /*

 osapi.jive.corev3.contents.Message.prototype.destroy = function() { [generated code] }

 */ defineInstanceMethod({"methodName":$s[141],"className":$s[734],"resourceName":$s[25],"httpMethod":$s[74],"signature":""});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.contents.Message
 * to simplify use of the self resource.
 * This method will execute a GET for self resources
 */ /*

 osapi.jive.corev3.contents.Message.prototype.get = function(params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[5],"className":$s[734],"resourceName":$s[25],"httpMethod":$s[0],"signature":$s[105],"queryParams":[$s[185],$s[94]]});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.contents.Message
 * to simplify use of the answeredQuestions resource.
 * This method will execute a GET for answeredQuestions resources
 */ /*

 osapi.jive.corev3.contents.Message.prototype.getAnsweredQuestions = function(params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[618],"className":$s[734],"resourceName":$s[579],"httpMethod":$s[0],"signature":$s[105]});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.contents.Message
 * to simplify use of the attachments resource.
 * This method will execute a GET for attachments resources
 */ /*

 osapi.jive.corev3.contents.Message.prototype.getAttachments = function(params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[516],"className":$s[734],"resourceName":$s[341],"httpMethod":$s[0],"signature":$s[105],"queryParams":[$s[94]]});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.contents.Message
 * to simplify use of the childOutcomeTypes resource.
 * This method will execute a GET for childOutcomeTypes resources
 */ /*

 osapi.jive.corev3.contents.Message.prototype.getChildOutcomeTypes = function(params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[619],"className":$s[734],"resourceName":$s[580],"httpMethod":$s[0],"signature":$s[105],"queryParams":[$s[38],$s[94],$s[209],$s[328]]});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.contents.Message
 * to simplify use of the extprops resource.
 * This method will execute a GET for extprops resources
 */ /*

 osapi.jive.corev3.contents.Message.prototype.getExtProps = function(params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[359],"className":$s[734],"resourceName":$s[198],"httpMethod":$s[0],"signature":$s[105],"queryParams":[$s[94]]});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.contents.Message
 * to simplify use of the likes resource.
 * This method will execute a GET for likes resources
 */ /*

 osapi.jive.corev3.contents.Message.prototype.getLikes = function(params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[203],"className":$s[734],"resourceName":$s[46],"httpMethod":$s[0],"signature":$s[105],"queryParams":[$s[38],$s[94],$s[328]]});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.contents.Message
 * to simplify use of the markedHelpful resource.
 * This method will execute a GET for markedHelpful resources
 */ /*

 osapi.jive.corev3.contents.Message.prototype.getMarkedHelpful = function(params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[564],"className":$s[734],"resourceName":$s[475],"httpMethod":$s[0],"signature":$s[105],"queryParams":[$s[38],$s[94],$s[328]]});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.contents.Message
 * to simplify use of the markedUnhelpful resource.
 * This method will execute a GET for markedUnhelpful resources
 */ /*

 osapi.jive.corev3.contents.Message.prototype.getMarkedUnhelpful = function(params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[604],"className":$s[734],"resourceName":$s[549],"httpMethod":$s[0],"signature":$s[105],"queryParams":[$s[38],$s[94],$s[328]]});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.contents.Message
 * to simplify use of the outcomeTypes resource.
 * This method will execute a GET for outcomeTypes resources
 */ /*

 osapi.jive.corev3.contents.Message.prototype.getOutcomeTypes = function(params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[544],"className":$s[734],"resourceName":$s[433],"httpMethod":$s[0],"signature":$s[105],"queryParams":[$s[38],$s[94],$s[328]]});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.contents.Message
 * to simplify use of the outcomes resource.
 * This method will execute a GET for outcomes resources
 */ /*

 osapi.jive.corev3.contents.Message.prototype.getOutcomes = function(params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[361],"className":$s[734],"resourceName":$s[218],"httpMethod":$s[0],"signature":$s[105],"queryParams":[$s[38],$s[94],$s[328]]});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.contents.Message
 * to simplify use of the messages resource.
 * This method will execute a GET for messages resources
 */ /*

 osapi.jive.corev3.contents.Message.prototype.getReplies = function(params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[305],"className":$s[734],"resourceName":$s[217],"httpMethod":$s[0],"signature":$s[105],"queryParams":[$s[82],$s[38],$s[511],$s[94],$s[95],$s[418],$s[476],$s[328]]});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.contents.Message
 * to simplify use of the likes resource.
 * This method will execute a POST for likes resources
 */ /*

 osapi.jive.corev3.contents.Message.prototype.like = function(params) { [generated code] }

 */ defineInstanceMethod({"signature":$s[105],"queryParams":[],"methodName":$s[20],"className":$s[734],"resourceName":$s[46],"httpMethod":$s[12],"hasBody":false});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.contents.Message
 * to simplify use of the helpful resource.
 * This method will execute a POST for helpful resources
 */ /*

 osapi.jive.corev3.contents.Message.prototype.markHelpful = function(params) { [generated code] }

 */ defineInstanceMethod({"signature":$s[105],"queryParams":[],"methodName":$s[370],"className":$s[734],"resourceName":$s[150],"httpMethod":$s[12],"hasBody":false});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.contents.Message
 * to simplify use of the unhelpful resource.
 * This method will execute a POST for unhelpful resources
 */ /*

 osapi.jive.corev3.contents.Message.prototype.markUnhelpful = function(params) { [generated code] }

 */ defineInstanceMethod({"signature":$s[105],"queryParams":[],"methodName":$s[474],"className":$s[734],"resourceName":$s[270],"httpMethod":$s[12],"hasBody":false});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.contents.Message
 * to simplify use of the correctAnswer resource.
 * This method will execute a DELETE for correctAnswer resources
 */ /*

 osapi.jive.corev3.contents.Message.prototype.removeCorrectAnswer = function() { [generated code] }

 */ defineInstanceMethod({"methodName":$s[613],"className":$s[734],"resourceName":$s[459],"httpMethod":$s[74],"signature":""});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.contents.Message
 * to simplify use of the likes resource.
 * This method will execute a DELETE for likes resources
 */ /*

 osapi.jive.corev3.contents.Message.prototype.unlike = function() { [generated code] }

 */ defineInstanceMethod({"methodName":$s[123],"className":$s[734],"resourceName":$s[46],"httpMethod":$s[74],"signature":""});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.contents.Message
 * to simplify use of the answeredQuestion resource.
 * This method will execute a DELETE for answeredQuestion resources
 */ /*

 osapi.jive.corev3.contents.Message.prototype.unmarkAnsweredQuestion = function() { [generated code] }

 */ defineInstanceMethod({"methodName":$s[631],"className":$s[734],"resourceName":$s[557],"httpMethod":$s[74],"signature":""});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.contents.Message
 * to simplify use of the helpful resource.
 * This method will execute a DELETE for helpful resources
 */ /*

 osapi.jive.corev3.contents.Message.prototype.unmarkHelpful = function() { [generated code] }

 */ defineInstanceMethod({"methodName":$s[491],"className":$s[734],"resourceName":$s[150],"httpMethod":$s[74],"signature":""});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.contents.Message
 * to simplify use of the unhelpful resource.
 * This method will execute a DELETE for unhelpful resources
 */ /*

 osapi.jive.corev3.contents.Message.prototype.unmarkUnhelpful = function() { [generated code] }

 */ defineInstanceMethod({"methodName":$s[556],"className":$s[734],"resourceName":$s[270],"httpMethod":$s[74],"signature":""});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.contents.Message
 * to simplify use of the self resource.
 * This method will execute a PUT for self resources
 */ /*

 osapi.jive.corev3.contents.Message.prototype.update = function(params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[124],"className":$s[734],"resourceName":$s[25],"httpMethod":$s[1],"signature":$s[105],"queryParams":[$s[94],$s[179]]});
/**
 * define class osapi.jive.corev3.metadata.Object, to extend osapi.jive.corev3.AbstractObject
 */
defineClass($s[722], osapi.jive.corev3.AbstractObject, {"type":$s[103]}, []);

/**
 * Describe the fields of osapi.jive.corev3.metadata.Object
 * @type {Array}
 */
osapi.jive.corev3.metadata.Object.fields = [
defineFieldMetadata($s[392],$s[127]),
defineFieldMetadata($s[394],$s[79]),
defineFieldMetadata($s[344],$s[127]),
defineFieldMetadata($s[137],$s[127]),
defineFieldMetadata($s[350],$s[79]),
defineFieldMetadata($s[144],$s[79]),
defineFieldMetadata($s[94],"Field[]",$s[41],false,false,true),
defineFieldMetadata("id",$s[79]),
defineFieldMetadata($s[213],$s[127]),
defineFieldMetadata($s[21],$s[79]),
defineFieldMetadata($s[316],$s[129]),
defineFieldMetadata($s[433],"OutcomeType[]",$s[375],false,false,true),
defineFieldMetadata($s[53],$s[127]),
defineFieldMetadata($s[112],$s[79]),
defineFieldMetadata($s[486],"Resource[]",$s[230],false,false,true),
defineFieldMetadata($s[265],$s[77]),
defineFieldMetadata($s[59],$s[79])
];

/**
 * Add an entry to the type registry for
 * osapi.jive.corev3.metadata.Object
 * @type {Object}
 */
typeRegistry[$s[103]] = {
    name: $s[103],
    ctor: osapi.jive.corev3.metadata.Object
};
/**
 * define class osapi.jive.corev3.contents.Outcome, to extend osapi.jive.corev3.AbstractObject
 */
defineClass($s[735], osapi.jive.corev3.AbstractObject, {"type":$s[162]}, [{"name":$s[66]}]);

/**
 * Describe the fields of osapi.jive.corev3.contents.Outcome
 * @type {Array}
 */
osapi.jive.corev3.contents.Outcome.fields = [
defineFieldMetadata($s[405],$s[11]),
defineFieldMetadata($s[201],$s[127]),
defineFieldMetadata($s[468],$s[129]),
defineFieldMetadata("id",$s[79]),
defineFieldMetadata($s[259],$s[129]),
defineFieldMetadata("note",$s[79]),
defineFieldMetadata($s[375],$s[338],$s[375],false,true),
defineFieldMetadata($s[106],$s[79]),
defineFieldMetadata($s[605],$s[79]),
defineFieldMetadata($s[322],$s[77],null,true),
defineFieldMetadata($s[263],$s[11]),
defineFieldMetadata($s[265],$s[77]),
defineFieldMetadata("root",$s[79]),
defineFieldMetadata($s[118],$s[79]),
defineFieldMetadata($s[627],"OutcomeType[]",$s[375],false,false,true),
defineFieldMetadata($s[28],"String[]",null,false,false,true),
defineFieldMetadata($s[30],$s[79]),
defineFieldMetadata($s[235],$s[129]),
defineFieldMetadata($s[179],$s[11]),
defineFieldMetadata("user",$s[78],$s[108])
];

/**
 * Add an entry to the type registry for
 * osapi.jive.corev3.contents.Outcome
 * @type {Object}
 */
typeRegistry[$s[162]] = {
    name: $s[162],
    ctor: osapi.jive.corev3.contents.Outcome
};
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.contents.Outcome
 * to simplify use of the outcome resource.
 * This method will execute a POST for outcome resources
 */ /*

 osapi.jive.corev3.contents.Outcome.prototype.createOutcome = function(data, params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[463],"className":$s[735],"resourceName":$s[162],"httpMethod":$s[12],"signature":"data, params","queryParams":[$s[94]]});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.contents.Outcome
 * to simplify use of the self resource.
 * This method will execute a DELETE for self resources
 */ /*

 osapi.jive.corev3.contents.Outcome.prototype.destroy = function() { [generated code] }

 */ defineInstanceMethod({"methodName":$s[141],"className":$s[735],"resourceName":$s[25],"httpMethod":$s[74],"signature":""});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.contents.Outcome
 * to simplify use of the history resource.
 * This method will execute a GET for history resources
 */ /*

 osapi.jive.corev3.contents.Outcome.prototype.getHistory = function(params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[301],"className":$s[735],"resourceName":$s[151],"httpMethod":$s[0],"signature":$s[105],"queryParams":[$s[38],$s[94],$s[328]]});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.contents.Outcome
 * to simplify use of the self resource.
 * This method will execute a PUT for self resources
 */ /*

 osapi.jive.corev3.contents.Outcome.prototype.update = function(params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[124],"className":$s[735],"resourceName":$s[25],"httpMethod":$s[1],"signature":$s[105],"queryParams":[$s[94]]});
/**
 * define class osapi.jive.corev3.contents.OutcomeType, to extend osapi.jive.corev3.AbstractObject
 */
defineClass($s[791], osapi.jive.corev3.AbstractObject, {"type":$s[375]}, []);

/**
 * Describe the fields of osapi.jive.corev3.contents.OutcomeType
 * @type {Array}
 */
osapi.jive.corev3.contents.OutcomeType.fields = [
defineFieldMetadata($s[609],$s[79]),
defineFieldMetadata($s[582],$s[79]),
defineFieldMetadata($s[598],$s[79]),
defineFieldMetadata($s[560],$s[127]),
defineFieldMetadata($s[455],$s[127]),
defineFieldMetadata($s[94],"Field[]",$s[41],false,false,true),
defineFieldMetadata($s[355],$s[127]),
defineFieldMetadata("id",$s[79]),
defineFieldMetadata($s[21],$s[79]),
defineFieldMetadata($s[430],$s[127]),
defineFieldMetadata($s[265],$s[77]),
defineFieldMetadata($s[267],$s[127]),
defineFieldMetadata($s[30],$s[79]),
defineFieldMetadata($s[333],$s[127])
];

/**
 * Add an entry to the type registry for
 * osapi.jive.corev3.contents.OutcomeType
 * @type {Object}
 */
typeRegistry[$s[375]] = {
    name: $s[375],
    ctor: osapi.jive.corev3.contents.OutcomeType
};
/**
 * define class osapi.jive.corev3.people.Person, to extend osapi.jive.corev3.AbstractObject
 */
defineClass($s[691], osapi.jive.corev3.AbstractObject, {"type":$s[108]}, [{"name":$s[66]}]);

/**
 * Describe the fields of osapi.jive.corev3.people.Person
 * @type {Array}
 */
osapi.jive.corev3.people.Person.fields = [
defineFieldMetadata($s[240],"Addresses[]",$s[240],true,false,true),
defineFieldMetadata($s[584],$s[129]),
defineFieldMetadata($s[351],$s[79]),
defineFieldMetadata($s[92],"Emails[]",$s[92],true,true,true),
defineFieldMetadata($s[201],$s[127]),
defineFieldMetadata($s[468],$s[129]),
defineFieldMetadata($s[515],$s[129]),
defineFieldMetadata($s[471],$s[79]),
defineFieldMetadata($s[566],$s[79]),
defineFieldMetadata($s[472],$s[79]),
defineFieldMetadata($s[152],$s[79]),
defineFieldMetadata("id",$s[79]),
defineFieldMetadata($s[45],$s[79]),
defineFieldMetadata($s[422],$s[11],null,true),
defineFieldMetadata($s[18],"Jive",$s[18],true,true),
defineFieldMetadata($s[259],$s[129]),
defineFieldMetadata($s[215],$s[79],null,true),
defineFieldMetadata($s[372],$s[79]),
defineFieldMetadata($s[21],"Name",$s[21],true,true),
defineFieldMetadata($s[481],$s[131],$s[176]),
defineFieldMetadata($s[376],$s[131],$s[176]),
defineFieldMetadata($s[435],"PhoneNumbers[]",$s[435],true,false,true),
defineFieldMetadata($s[109],"Photos[]",$s[109],false,false,true),
defineFieldMetadata($s[528],$s[127]),
defineFieldMetadata($s[263],$s[11]),
defineFieldMetadata($s[265],$s[77]),
defineFieldMetadata($s[531],$s[77]),
defineFieldMetadata($s[118],$s[79],null,true),
defineFieldMetadata($s[28],"String[]",null,true,false,true),
defineFieldMetadata($s[386],$s[79]),
defineFieldMetadata($s[446],$s[79]),
defineFieldMetadata($s[30],$s[79]),
defineFieldMetadata($s[235],$s[129]),
defineFieldMetadata($s[179],$s[11]),
defineFieldMetadata($s[31],$s[79])
];

/**
 * Add an entry to the type registry for
 * osapi.jive.corev3.people.Person
 * @type {Object}
 */
typeRegistry[$s[108]] = {
    name: $s[108],
    ctor: osapi.jive.corev3.people.Person
};
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.people.Person
 * to simplify use of the extprops resource.
 * This method will execute a POST for extprops resources
 */ /*

 osapi.jive.corev3.people.Person.prototype.createExtProps = function(data, params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[506],"className":$s[691],"resourceName":$s[198],"httpMethod":$s[12],"signature":"data, params","queryParams":[$s[94]]});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.people.Person
 * to simplify use of the streams resource.
 * This method will execute a POST for streams resources
 */ /*

 osapi.jive.corev3.people.Person.prototype.createStream = function(data, params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[404],"className":$s[691],"resourceName":$s[174],"httpMethod":$s[12],"signature":"data, params","queryParams":[$s[94]]});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.people.Person
 * to simplify use of the tasks resource.
 * This method will execute a POST for tasks resources
 */ /*

 osapi.jive.corev3.people.Person.prototype.createTask = function(data, params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[290],"className":$s[691],"resourceName":$s[64],"httpMethod":$s[12],"signature":"data, params","queryParams":[$s[94]]});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.people.Person
 * to simplify use of the extprops resource.
 * This method will execute a DELETE for extprops resources
 */ /*

 osapi.jive.corev3.people.Person.prototype.deleteExtProps = function() { [generated code] }

 */ defineInstanceMethod({"methodName":$s[507],"className":$s[691],"resourceName":$s[198],"httpMethod":$s[74],"signature":""});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.people.Person
 * to simplify use of the self resource.
 * This method will execute a DELETE for self resources
 */ /*

 osapi.jive.corev3.people.Person.prototype.destroy = function() { [generated code] }

 */ defineInstanceMethod({"methodName":$s[141],"className":$s[691],"resourceName":$s[25],"httpMethod":$s[74],"signature":""});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.people.Person
 * to simplify use of the self resource.
 * This method will execute a GET for self resources
 */ /*

 osapi.jive.corev3.people.Person.prototype.get = function(params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[5],"className":$s[691],"resourceName":$s[25],"httpMethod":$s[0],"signature":$s[105],"queryParams":[$s[94],$s[115]]});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.people.Person
 * to simplify use of the activity resource.
 * This method will execute a GET for activity resources
 */ /*

 osapi.jive.corev3.people.Person.prototype.getActivity = function(params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[356],"className":$s[691],"resourceName":$s[186],"httpMethod":$s[0],"signature":$s[105],"queryParams":[$s[36],$s[87],$s[191],$s[397],$s[38],$s[94],$s[95],$s[432]]});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.people.Person
 * to simplify use of the blog resource.
 * This method will execute a GET for blog resources
 */ /*

 osapi.jive.corev3.people.Person.prototype.getBlog = function(params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[148],"className":$s[691],"resourceName":$s[13],"httpMethod":$s[0],"signature":$s[105],"queryParams":[$s[94]]});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.people.Person
 * to simplify use of the colleagues resource.
 * This method will execute a GET for colleagues resources
 */ /*

 osapi.jive.corev3.people.Person.prototype.getColleagues = function(params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[470],"className":$s[691],"resourceName":$s[289],"httpMethod":$s[0],"signature":$s[105],"queryParams":[$s[38],$s[94],$s[328]]});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.people.Person
 * to simplify use of the extprops resource.
 * This method will execute a GET for extprops resources
 */ /*

 osapi.jive.corev3.people.Person.prototype.getExtProps = function(params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[359],"className":$s[691],"resourceName":$s[198],"httpMethod":$s[0],"signature":$s[105],"queryParams":[$s[94]]});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.people.Person
 * to simplify use of the followers resource.
 * This method will execute a GET for followers resources
 */ /*

 osapi.jive.corev3.people.Person.prototype.getFollowers = function(params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[415],"className":$s[691],"resourceName":$s[250],"httpMethod":$s[0],"signature":$s[105],"queryParams":[$s[38],$s[94],$s[328]]});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.people.Person
 * to simplify use of the following resource.
 * This method will execute a GET for following resources
 */ /*

 osapi.jive.corev3.people.Person.prototype.getFollowing = function(params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[416],"className":$s[691],"resourceName":$s[251],"httpMethod":$s[0],"signature":$s[105],"queryParams":[$s[38],$s[94],$s[328]]});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.people.Person
 * to simplify use of the followingIn resource.
 * This method will execute a GET for followingIn resources
 */ /*

 osapi.jive.corev3.people.Person.prototype.getFollowingIn = function(params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[518],"className":$s[691],"resourceName":$s[354],"httpMethod":$s[0],"signature":$s[105],"queryParams":[$s[94]]});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.people.Person
 * to simplify use of the images resource.
 * This method will execute a GET for images resources
 */ /*

 osapi.jive.corev3.people.Person.prototype.getImages = function(params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[255],"className":$s[691],"resourceName":$s[98],"httpMethod":$s[0],"signature":$s[105],"queryParams":[$s[94]]});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.people.Person
 * to simplify use of the manager resource.
 * This method will execute a GET for manager resources
 */ /*

 osapi.jive.corev3.people.Person.prototype.getManager = function(params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[303],"className":$s[691],"resourceName":$s[157],"httpMethod":$s[0],"signature":$s[105],"queryParams":[$s[94]]});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.people.Person
 * to simplify use of the members resource.
 * This method will execute a GET for members resources
 */ /*

 osapi.jive.corev3.people.Person.prototype.getMembers = function(params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[304],"className":$s[691],"resourceName":$s[158],"httpMethod":$s[0],"signature":$s[105],"queryParams":[$s[38],$s[94],$s[95],$s[328],$s[63]]});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.people.Person
 * to simplify use of the profilePrivacy resource.
 * This method will execute a GET for profilePrivacy resources
 */ /*

 osapi.jive.corev3.people.Person.prototype.getProfilePrivacy = function(params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[591],"className":$s[691],"resourceName":$s[527],"httpMethod":$s[0],"signature":$s[105],"queryParams":[$s[38],$s[94],$s[328]]});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.people.Person
 * to simplify use of the reports resource.
 * This method will execute a GET for reports resources
 */ /*

 osapi.jive.corev3.people.Person.prototype.getReports = function(params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[306],"className":$s[691],"resourceName":$s[167],"httpMethod":$s[0],"signature":$s[105],"queryParams":[$s[38],$s[94],$s[328]]});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.people.Person
 * to simplify use of the streams resource.
 * This method will execute a GET for streams resources
 */ /*

 osapi.jive.corev3.people.Person.prototype.getStreams = function(params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[308],"className":$s[691],"resourceName":$s[174],"httpMethod":$s[0],"signature":$s[105],"queryParams":[$s[94]]});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.people.Person
 * to simplify use of the tasks resource.
 * This method will execute a GET for tasks resources
 */ /*

 osapi.jive.corev3.people.Person.prototype.getTasks = function(params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[204],"className":$s[691],"resourceName":$s[64],"httpMethod":$s[0],"signature":$s[105],"queryParams":[$s[185],$s[38],$s[94],$s[95],$s[27],$s[328]]});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.people.Person
 * to simplify use of the self resource.
 * This method will execute a PUT for self resources
 */ /*

 osapi.jive.corev3.people.Person.prototype.update = function(params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[124],"className":$s[691],"resourceName":$s[25],"httpMethod":$s[1],"signature":$s[105],"queryParams":[$s[508]]});
/**
 * define class osapi.jive.corev3.contents.Photo, to extend osapi.jive.corev3.AbstractObject
 */
defineClass($s[707], osapi.jive.corev3.AbstractObject, {"type":$s[52]}, [{"name":$s[66]}]);

/**
 * Describe the fields of osapi.jive.corev3.contents.Photo
 * @type {Array}
 */
osapi.jive.corev3.contents.Photo.fields = [
defineFieldMetadata($s[279],$s[129]),
defineFieldMetadata($s[84],$s[78],$s[108]),
defineFieldMetadata($s[133],"Person[]",$s[108],true,false,true),
defineFieldMetadata($s[283],$s[79],null,true),
defineFieldMetadata($s[86],$s[449],$s[456],true),
defineFieldMetadata($s[242],$s[79]),
defineFieldMetadata($s[286],"String[]",null,true,false,true),
defineFieldMetadata($s[137],$s[337],$s[345],true,true),
defineFieldMetadata($s[244],$s[79]),
defineFieldMetadata($s[457],"Image[]",$s[44],false,false,true),
defineFieldMetadata($s[346],$s[79]),
defineFieldMetadata($s[458],"ContentVideo[]",$s[400],false,false,true),
defineFieldMetadata($s[410],$s[127],null,true),
defineFieldMetadata($s[246],$s[78],$s[108]),
defineFieldMetadata("exif","Exif"),
defineFieldMetadata($s[539],"Person[]",$s[108],true,false,true),
defineFieldMetadata($s[467],$s[129]),
defineFieldMetadata($s[201],$s[127]),
defineFieldMetadata($s[468],$s[129]),
defineFieldMetadata($s[471],$s[79]),
defineFieldMetadata($s[566],$s[79]),
defineFieldMetadata($s[472],$s[79]),
defineFieldMetadata($s[152],$s[79]),
defineFieldMetadata("id",$s[79]),
defineFieldMetadata($s[45],$s[79]),
defineFieldMetadata($s[425],$s[129]),
defineFieldMetadata($s[568],$s[11]),
defineFieldMetadata($s[259],$s[129]),
defineFieldMetadata($s[21],$s[79]),
defineFieldMetadata($s[317],$s[277],$s[317],true),
defineFieldMetadata($s[480],$s[77]),
defineFieldMetadata($s[574],"String[]",null,false,false,true),
defineFieldMetadata($s[433],"OutcomeType[]",$s[375],true,false,true),
defineFieldMetadata($s[106],$s[79],null,true),
defineFieldMetadata($s[481],$s[131],$s[176]),
defineFieldMetadata($s[621],$s[127]),
defineFieldMetadata($s[376],$s[131],$s[176]),
defineFieldMetadata($s[482],$s[127]),
defineFieldMetadata($s[528],$s[127]),
defineFieldMetadata($s[263],$s[11]),
defineFieldMetadata($s[323],$s[129]),
defineFieldMetadata($s[265],$s[77]),
defineFieldMetadata($s[575],$s[127],null,true),
defineFieldMetadata($s[531],$s[77]),
defineFieldMetadata($s[26],$s[129]),
defineFieldMetadata($s[118],$s[79]),
defineFieldMetadata($s[175],$s[79],null,true),
defineFieldMetadata($s[28],"String[]",null,true,false,true),
defineFieldMetadata($s[445],$s[79],null,true),
defineFieldMetadata($s[30],$s[79],null,false,true),
defineFieldMetadata($s[235],$s[129]),
defineFieldMetadata($s[179],$s[11]),
defineFieldMetadata($s[596],$s[277],$s[317],true),
defineFieldMetadata($s[180],$s[78],$s[108]),
defineFieldMetadata($s[67],"Person[]",$s[108],true,false,true),
defineFieldMetadata($s[31],$s[79]),
defineFieldMetadata($s[182],$s[129]),
defineFieldMetadata($s[10],$s[2],$s[10],true),
defineFieldMetadata($s[271],$s[129]),
defineFieldMetadata($s[335],$s[79],null,true),
defineFieldMetadata($s[664],$s[127])
];

/**
 * Add an entry to the type registry for
 * osapi.jive.corev3.contents.Photo
 * @type {Object}
 */
typeRegistry[$s[52]] = {
    name: $s[52],
    ctor: osapi.jive.corev3.contents.Photo
};
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.contents.Photo
 * to simplify use of the comments resource.
 * This method will execute a POST for comments resources
 */ /*

 osapi.jive.corev3.contents.Photo.prototype.createComment = function(data, params) { [generated code] }

 */ defineInstanceMethod({"signature":"data, params","queryParams":[$s[84],$s[94],$s[263],$s[179]],"methodName":$s[460],"className":$s[707],"resourceName":$s[192],"httpMethod":$s[12],"paramOverrides":{"parent":"@this.resources.self.ref","type":$s[136]}});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.contents.Photo
 * to simplify use of the extprops resource.
 * This method will execute a POST for extprops resources
 */ /*

 osapi.jive.corev3.contents.Photo.prototype.createExtProps = function(data, params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[506],"className":$s[707],"resourceName":$s[198],"httpMethod":$s[12],"signature":"data, params","queryParams":[$s[94]]});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.contents.Photo
 * to simplify use of the outcomes resource.
 * This method will execute a POST for outcomes resources
 */ /*

 osapi.jive.corev3.contents.Photo.prototype.createOutcome = function(data, params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[463],"className":$s[707],"resourceName":$s[218],"httpMethod":$s[12],"signature":"data, params","queryParams":[$s[94]]});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.contents.Photo
 * to simplify use of the extprops resource.
 * This method will execute a DELETE for extprops resources
 */ /*

 osapi.jive.corev3.contents.Photo.prototype.deleteExtProps = function() { [generated code] }

 */ defineInstanceMethod({"methodName":$s[507],"className":$s[707],"resourceName":$s[198],"httpMethod":$s[74],"signature":""});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.contents.Photo
 * to simplify use of the self resource.
 * This method will execute a DELETE for self resources
 */ /*

 osapi.jive.corev3.contents.Photo.prototype.destroy = function() { [generated code] }

 */ defineInstanceMethod({"methodName":$s[141],"className":$s[707],"resourceName":$s[25],"httpMethod":$s[74],"signature":""});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.contents.Photo
 * to simplify use of the self resource.
 * This method will execute a GET for self resources
 */ /*

 osapi.jive.corev3.contents.Photo.prototype.get = function(params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[5],"className":$s[707],"resourceName":$s[25],"httpMethod":$s[0],"signature":$s[105],"queryParams":[$s[185],$s[245],$s[94]]});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.contents.Photo
 * to simplify use of the childOutcomeTypes resource.
 * This method will execute a GET for childOutcomeTypes resources
 */ /*

 osapi.jive.corev3.contents.Photo.prototype.getChildOutcomeTypes = function(params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[619],"className":$s[707],"resourceName":$s[580],"httpMethod":$s[0],"signature":$s[105],"queryParams":[$s[38],$s[94],$s[209],$s[328]]});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.contents.Photo
 * to simplify use of the comments resource.
 * This method will execute a GET for comments resources
 */ /*

 osapi.jive.corev3.contents.Photo.prototype.getComments = function(params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[357],"className":$s[707],"resourceName":$s[192],"httpMethod":$s[0],"signature":$s[105],"queryParams":[$s[82],$s[84],$s[38],$s[511],$s[94],$s[95],$s[418],$s[99],$s[27],$s[328]]});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.contents.Photo
 * to simplify use of the extprops resource.
 * This method will execute a GET for extprops resources
 */ /*

 osapi.jive.corev3.contents.Photo.prototype.getExtProps = function(params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[359],"className":$s[707],"resourceName":$s[198],"httpMethod":$s[0],"signature":$s[105],"queryParams":[$s[94]]});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.contents.Photo
 * to simplify use of the followers resource.
 * This method will execute a GET for followers resources
 */ /*

 osapi.jive.corev3.contents.Photo.prototype.getFollowers = function(params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[415],"className":$s[707],"resourceName":$s[250],"httpMethod":$s[0],"signature":$s[105],"queryParams":[$s[38],$s[94],$s[95],$s[328]]});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.contents.Photo
 * to simplify use of the followingIn resource.
 * This method will execute a GET for followingIn resources
 */ /*

 osapi.jive.corev3.contents.Photo.prototype.getFollowingIn = function(params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[518],"className":$s[707],"resourceName":$s[354],"httpMethod":$s[0],"signature":$s[105],"queryParams":[$s[94]]});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.contents.Photo
 * to simplify use of the likes resource.
 * This method will execute a GET for likes resources
 */ /*

 osapi.jive.corev3.contents.Photo.prototype.getLikes = function(params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[203],"className":$s[707],"resourceName":$s[46],"httpMethod":$s[0],"signature":$s[105],"queryParams":[$s[38],$s[94],$s[328]]});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.contents.Photo
 * to simplify use of the outcomeTypes resource.
 * This method will execute a GET for outcomeTypes resources
 */ /*

 osapi.jive.corev3.contents.Photo.prototype.getOutcomeTypes = function(params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[544],"className":$s[707],"resourceName":$s[433],"httpMethod":$s[0],"signature":$s[105],"queryParams":[$s[38],$s[94],$s[328]]});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.contents.Photo
 * to simplify use of the outcomes resource.
 * This method will execute a GET for outcomes resources
 */ /*

 osapi.jive.corev3.contents.Photo.prototype.getOutcomes = function(params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[361],"className":$s[707],"resourceName":$s[218],"httpMethod":$s[0],"signature":$s[105],"queryParams":[$s[38],$s[94],$s[632],$s[328]]});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.contents.Photo
 * to simplify use of the versions resource.
 * This method will execute a GET for versions resources
 */ /*

 osapi.jive.corev3.contents.Photo.prototype.getVersions = function(params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[363],"className":$s[707],"resourceName":$s[236],"httpMethod":$s[0],"signature":$s[105],"queryParams":[$s[38],$s[94],$s[328]]});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.contents.Photo
 * to simplify use of the likes resource.
 * This method will execute a POST for likes resources
 */ /*

 osapi.jive.corev3.contents.Photo.prototype.like = function(params) { [generated code] }

 */ defineInstanceMethod({"signature":$s[105],"queryParams":[],"methodName":$s[20],"className":$s[707],"resourceName":$s[46],"httpMethod":$s[12],"hasBody":false});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.contents.Photo
 * to simplify use of the read resource.
 * This method will execute a POST for read resources
 */ /*

 osapi.jive.corev3.contents.Photo.prototype.markRead = function(params) { [generated code] }

 */ defineInstanceMethod({"signature":$s[105],"queryParams":[],"methodName":$s[216],"className":$s[707],"resourceName":$s[24],"httpMethod":$s[12],"hasBody":false});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.contents.Photo
 * to simplify use of the read resource.
 * This method will execute a DELETE for read resources
 */ /*

 osapi.jive.corev3.contents.Photo.prototype.markUnread = function() { [generated code] }

 */ defineInstanceMethod({"methodName":$s[313],"className":$s[707],"resourceName":$s[24],"httpMethod":$s[74],"signature":""});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.contents.Photo
 * to simplify use of the likes resource.
 * This method will execute a DELETE for likes resources
 */ /*

 osapi.jive.corev3.contents.Photo.prototype.unlike = function() { [generated code] }

 */ defineInstanceMethod({"methodName":$s[123],"className":$s[707],"resourceName":$s[46],"httpMethod":$s[74],"signature":""});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.contents.Photo
 * to simplify use of the self resource.
 * This method will execute a PUT for self resources
 */ /*

 osapi.jive.corev3.contents.Photo.prototype.update = function(params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[124],"className":$s[707],"resourceName":$s[25],"httpMethod":$s[1],"signature":$s[105],"queryParams":[$s[185],$s[94],$s[47],$s[179]]});
/**
 * define class osapi.jive.corev3.admin.PlaceTopic, to extend osapi.jive.corev3.AbstractObject
 */
defineClass($s[731], osapi.jive.corev3.AbstractObject, {"type":$s[321]}, []);

/**
 * Describe the fields of osapi.jive.corev3.admin.PlaceTopic
 * @type {Array}
 */
osapi.jive.corev3.admin.PlaceTopic.fields = [
defineFieldMetadata($s[405],$s[129]),
defineFieldMetadata($s[617],$s[79]),
defineFieldMetadata($s[97],$s[127],null,true,true),
defineFieldMetadata("id",$s[79]),
defineFieldMetadata($s[573],$s[129]),
defineFieldMetadata($s[21],$s[79],null,true,true),
defineFieldMetadata($s[265],$s[77])
];

/**
 * Add an entry to the type registry for
 * osapi.jive.corev3.admin.PlaceTopic
 * @type {Object}
 */
typeRegistry[$s[321]] = {
    name: $s[321],
    ctor: osapi.jive.corev3.admin.PlaceTopic
};
/**
 * define class osapi.jive.corev3.admin.Plugin, to extend osapi.jive.corev3.AbstractObject
 */
defineClass($s[665], osapi.jive.corev3.AbstractObject, {"type":$s[111]}, []);

/**
 * Describe the fields of osapi.jive.corev3.admin.Plugin
 * @type {Array}
 */
osapi.jive.corev3.admin.Plugin.fields = [
defineFieldMetadata($s[84],$s[79]),
defineFieldMetadata($s[88],$s[127]),
defineFieldMetadata($s[349],$s[79]),
defineFieldMetadata($s[292],$s[79]),
defineFieldMetadata($s[350],$s[79]),
defineFieldMetadata("id",$s[79]),
defineFieldMetadata($s[258],$s[127]),
defineFieldMetadata($s[572],$s[79]),
defineFieldMetadata($s[21],$s[79]),
defineFieldMetadata($s[322],$s[77]),
defineFieldMetadata($s[263],$s[11]),
defineFieldMetadata($s[265],$s[77]),
defineFieldMetadata($s[30],$s[79]),
defineFieldMetadata($s[387],$s[127]),
defineFieldMetadata($s[179],$s[11]),
defineFieldMetadata($s[182],$s[79])
];

/**
 * Add an entry to the type registry for
 * osapi.jive.corev3.admin.Plugin
 * @type {Object}
 */
typeRegistry[$s[111]] = {
    name: $s[111],
    ctor: osapi.jive.corev3.admin.Plugin
};
/**
 * define class osapi.jive.corev3.contents.Poll, to extend osapi.jive.corev3.AbstractObject
 */
defineClass($s[683], osapi.jive.corev3.AbstractObject, {"type":$s[22]}, [{"name":$s[66]}]);

/**
 * Describe the fields of osapi.jive.corev3.contents.Poll
 * @type {Array}
 */
osapi.jive.corev3.contents.Poll.fields = [
defineFieldMetadata($s[279],$s[129]),
defineFieldMetadata($s[84],$s[78],$s[108]),
defineFieldMetadata($s[133],"Person[]",$s[108],false,false,true),
defineFieldMetadata($s[283],$s[79]),
defineFieldMetadata($s[286],"String[]",null,true,false,true),
defineFieldMetadata($s[137],$s[337],$s[345],true,true),
defineFieldMetadata($s[244],$s[79]),
defineFieldMetadata($s[457],"Image[]",$s[44],false,false,true),
defineFieldMetadata($s[458],"ContentVideo[]",$s[400],false,false,true),
defineFieldMetadata($s[143],$s[11]),
defineFieldMetadata($s[512],$s[11]),
defineFieldMetadata($s[539],"Person[]",$s[108],true,false,true),
defineFieldMetadata($s[467],$s[129]),
defineFieldMetadata($s[201],$s[127]),
defineFieldMetadata($s[468],$s[129]),
defineFieldMetadata($s[471],$s[79]),
defineFieldMetadata($s[566],$s[79]),
defineFieldMetadata($s[472],$s[79]),
defineFieldMetadata($s[152],$s[79]),
defineFieldMetadata("id",$s[79]),
defineFieldMetadata($s[45],$s[79]),
defineFieldMetadata($s[425],$s[129]),
defineFieldMetadata($s[568],$s[11]),
defineFieldMetadata($s[259],$s[129]),
defineFieldMetadata($s[161],"String[]",null,true,true,true),
defineFieldMetadata($s[479],"PollOptionImage[]",$s[552],true,true,true),
defineFieldMetadata($s[480],$s[77]),
defineFieldMetadata($s[574],"String[]",null,false,false,true),
defineFieldMetadata($s[433],"OutcomeType[]",$s[375],true,false,true),
defineFieldMetadata($s[106],$s[79],null,true),
defineFieldMetadata($s[481],$s[131],$s[176]),
defineFieldMetadata($s[621],$s[127]),
defineFieldMetadata($s[376],$s[131],$s[176]),
defineFieldMetadata($s[482],$s[127]),
defineFieldMetadata($s[528],$s[127]),
defineFieldMetadata($s[263],$s[11]),
defineFieldMetadata($s[323],$s[129]),
defineFieldMetadata($s[265],$s[77]),
defineFieldMetadata($s[531],$s[77]),
defineFieldMetadata($s[268],$s[11]),
defineFieldMetadata($s[118],$s[79]),
defineFieldMetadata($s[175],$s[79],null,true,true),
defineFieldMetadata($s[28],"String[]",null,true,false,true),
defineFieldMetadata($s[30],$s[79],null,false,true),
defineFieldMetadata($s[235],$s[129]),
defineFieldMetadata($s[179],$s[11]),
defineFieldMetadata($s[67],"Person[]",$s[108],true,false,true),
defineFieldMetadata($s[31],$s[79]),
defineFieldMetadata($s[271],$s[129]),
defineFieldMetadata($s[335],$s[79],null,true),
defineFieldMetadata($s[664],$s[127]),
defineFieldMetadata($s[273],$s[129]),
defineFieldMetadata($s[274],"Date[]",null,false,false,true),
defineFieldMetadata($s[72],"String[]",null,false,false,true)
];

/**
 * Add an entry to the type registry for
 * osapi.jive.corev3.contents.Poll
 * @type {Object}
 */
typeRegistry[$s[22]] = {
    name: $s[22],
    ctor: osapi.jive.corev3.contents.Poll
};
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.contents.Poll
 * to simplify use of the comments resource.
 * This method will execute a POST for comments resources
 */ /*

 osapi.jive.corev3.contents.Poll.prototype.createComment = function(data, params) { [generated code] }

 */ defineInstanceMethod({"signature":"data, params","queryParams":[$s[84],$s[94],$s[263],$s[179]],"methodName":$s[460],"className":$s[683],"resourceName":$s[192],"httpMethod":$s[12],"paramOverrides":{"parent":"@this.resources.self.ref","type":$s[136]}});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.contents.Poll
 * to simplify use of the extprops resource.
 * This method will execute a POST for extprops resources
 */ /*

 osapi.jive.corev3.contents.Poll.prototype.createExtProps = function(data, params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[506],"className":$s[683],"resourceName":$s[198],"httpMethod":$s[12],"signature":"data, params","queryParams":[$s[94]]});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.contents.Poll
 * to simplify use of the outcomes resource.
 * This method will execute a POST for outcomes resources
 */ /*

 osapi.jive.corev3.contents.Poll.prototype.createOutcome = function(data, params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[463],"className":$s[683],"resourceName":$s[218],"httpMethod":$s[12],"signature":"data, params","queryParams":[$s[94]]});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.contents.Poll
 * to simplify use of the extprops resource.
 * This method will execute a DELETE for extprops resources
 */ /*

 osapi.jive.corev3.contents.Poll.prototype.deleteExtProps = function() { [generated code] }

 */ defineInstanceMethod({"methodName":$s[507],"className":$s[683],"resourceName":$s[198],"httpMethod":$s[74],"signature":""});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.contents.Poll
 * to simplify use of the self resource.
 * This method will execute a DELETE for self resources
 */ /*

 osapi.jive.corev3.contents.Poll.prototype.destroy = function() { [generated code] }

 */ defineInstanceMethod({"methodName":$s[141],"className":$s[683],"resourceName":$s[25],"httpMethod":$s[74],"signature":""});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.contents.Poll
 * to simplify use of the self resource.
 * This method will execute a GET for self resources
 */ /*

 osapi.jive.corev3.contents.Poll.prototype.get = function(params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[5],"className":$s[683],"resourceName":$s[25],"httpMethod":$s[0],"signature":$s[105],"queryParams":[$s[185],$s[245],$s[94]]});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.contents.Poll
 * to simplify use of the childOutcomeTypes resource.
 * This method will execute a GET for childOutcomeTypes resources
 */ /*

 osapi.jive.corev3.contents.Poll.prototype.getChildOutcomeTypes = function(params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[619],"className":$s[683],"resourceName":$s[580],"httpMethod":$s[0],"signature":$s[105],"queryParams":[$s[38],$s[94],$s[209],$s[328]]});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.contents.Poll
 * to simplify use of the comments resource.
 * This method will execute a GET for comments resources
 */ /*

 osapi.jive.corev3.contents.Poll.prototype.getComments = function(params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[357],"className":$s[683],"resourceName":$s[192],"httpMethod":$s[0],"signature":$s[105],"queryParams":[$s[82],$s[84],$s[38],$s[511],$s[94],$s[95],$s[418],$s[99],$s[27],$s[328]]});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.contents.Poll
 * to simplify use of the extprops resource.
 * This method will execute a GET for extprops resources
 */ /*

 osapi.jive.corev3.contents.Poll.prototype.getExtProps = function(params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[359],"className":$s[683],"resourceName":$s[198],"httpMethod":$s[0],"signature":$s[105],"queryParams":[$s[94]]});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.contents.Poll
 * to simplify use of the followers resource.
 * This method will execute a GET for followers resources
 */ /*

 osapi.jive.corev3.contents.Poll.prototype.getFollowers = function(params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[415],"className":$s[683],"resourceName":$s[250],"httpMethod":$s[0],"signature":$s[105],"queryParams":[$s[38],$s[94],$s[95],$s[328]]});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.contents.Poll
 * to simplify use of the followingIn resource.
 * This method will execute a GET for followingIn resources
 */ /*

 osapi.jive.corev3.contents.Poll.prototype.getFollowingIn = function(params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[518],"className":$s[683],"resourceName":$s[354],"httpMethod":$s[0],"signature":$s[105],"queryParams":[$s[94]]});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.contents.Poll
 * to simplify use of the likes resource.
 * This method will execute a GET for likes resources
 */ /*

 osapi.jive.corev3.contents.Poll.prototype.getLikes = function(params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[203],"className":$s[683],"resourceName":$s[46],"httpMethod":$s[0],"signature":$s[105],"queryParams":[$s[38],$s[94],$s[328]]});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.contents.Poll
 * to simplify use of the outcomeTypes resource.
 * This method will execute a GET for outcomeTypes resources
 */ /*

 osapi.jive.corev3.contents.Poll.prototype.getOutcomeTypes = function(params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[544],"className":$s[683],"resourceName":$s[433],"httpMethod":$s[0],"signature":$s[105],"queryParams":[$s[38],$s[94],$s[328]]});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.contents.Poll
 * to simplify use of the outcomes resource.
 * This method will execute a GET for outcomes resources
 */ /*

 osapi.jive.corev3.contents.Poll.prototype.getOutcomes = function(params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[361],"className":$s[683],"resourceName":$s[218],"httpMethod":$s[0],"signature":$s[105],"queryParams":[$s[38],$s[94],$s[632],$s[328]]});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.contents.Poll
 * to simplify use of the votes resource.
 * This method will execute a GET for votes resources
 */ /*

 osapi.jive.corev3.contents.Poll.prototype.getVotes = function(params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[205],"className":$s[683],"resourceName":$s[72],"httpMethod":$s[0],"signature":$s[105]});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.contents.Poll
 * to simplify use of the likes resource.
 * This method will execute a POST for likes resources
 */ /*

 osapi.jive.corev3.contents.Poll.prototype.like = function(params) { [generated code] }

 */ defineInstanceMethod({"signature":$s[105],"queryParams":[],"methodName":$s[20],"className":$s[683],"resourceName":$s[46],"httpMethod":$s[12],"hasBody":false});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.contents.Poll
 * to simplify use of the read resource.
 * This method will execute a POST for read resources
 */ /*

 osapi.jive.corev3.contents.Poll.prototype.markRead = function(params) { [generated code] }

 */ defineInstanceMethod({"signature":$s[105],"queryParams":[],"methodName":$s[216],"className":$s[683],"resourceName":$s[24],"httpMethod":$s[12],"hasBody":false});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.contents.Poll
 * to simplify use of the read resource.
 * This method will execute a DELETE for read resources
 */ /*

 osapi.jive.corev3.contents.Poll.prototype.markUnread = function() { [generated code] }

 */ defineInstanceMethod({"methodName":$s[313],"className":$s[683],"resourceName":$s[24],"httpMethod":$s[74],"signature":""});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.contents.Poll
 * to simplify use of the likes resource.
 * This method will execute a DELETE for likes resources
 */ /*

 osapi.jive.corev3.contents.Poll.prototype.unlike = function() { [generated code] }

 */ defineInstanceMethod({"methodName":$s[123],"className":$s[683],"resourceName":$s[46],"httpMethod":$s[74],"signature":""});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.contents.Poll
 * to simplify use of the self resource.
 * This method will execute a PUT for self resources
 */ /*

 osapi.jive.corev3.contents.Poll.prototype.update = function(params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[124],"className":$s[683],"resourceName":$s[25],"httpMethod":$s[1],"signature":$s[105],"queryParams":[$s[185],$s[94],$s[47],$s[179]]});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.contents.Poll
 * to simplify use of the votes resource.
 * This method will execute a POST for votes resources
 */ /*

 osapi.jive.corev3.contents.Poll.prototype.vote = function(data, params) { [generated code] }

 */ defineInstanceMethod({"methodName":"vote","className":$s[683],"resourceName":$s[72],"httpMethod":$s[12],"signature":"data, params"});
/**
 * define class osapi.jive.corev3.contents.Post, to extend osapi.jive.corev3.AbstractObject
 */
defineClass($s[684], osapi.jive.corev3.AbstractObject, {"type":$s[23]}, [{"name":$s[66]}]);

/**
 * Describe the fields of osapi.jive.corev3.contents.Post
 * @type {Array}
 */
osapi.jive.corev3.contents.Post.fields = [
defineFieldMetadata($s[279],$s[129]),
defineFieldMetadata($s[341],"Attachment[]",$s[281],true,false,true),
defineFieldMetadata($s[84],$s[78],$s[108]),
defineFieldMetadata($s[133],"Person[]",$s[108],true,false,true),
defineFieldMetadata($s[283],$s[79],null,true),
defineFieldMetadata($s[86],$s[449],$s[456],true),
defineFieldMetadata($s[286],"String[]",null,true,false,true),
defineFieldMetadata($s[137],$s[337],$s[345],true,true),
defineFieldMetadata($s[244],$s[79]),
defineFieldMetadata($s[457],"Image[]",$s[44],false,false,true),
defineFieldMetadata($s[458],"ContentVideo[]",$s[400],false,false,true),
defineFieldMetadata($s[539],"Person[]",$s[108],true,false,true),
defineFieldMetadata($s[467],$s[129]),
defineFieldMetadata($s[201],$s[127]),
defineFieldMetadata($s[468],$s[129]),
defineFieldMetadata($s[471],$s[79]),
defineFieldMetadata($s[566],$s[79]),
defineFieldMetadata($s[472],$s[79]),
defineFieldMetadata($s[152],$s[79]),
defineFieldMetadata("id",$s[79]),
defineFieldMetadata($s[45],$s[79]),
defineFieldMetadata($s[425],$s[129]),
defineFieldMetadata($s[568],$s[11]),
defineFieldMetadata($s[259],$s[129]),
defineFieldMetadata($s[480],$s[77]),
defineFieldMetadata($s[574],"String[]",null,false,false,true),
defineFieldMetadata($s[433],"OutcomeType[]",$s[375],true,false,true),
defineFieldMetadata($s[106],$s[79],null,true),
defineFieldMetadata($s[481],$s[131],$s[176]),
defineFieldMetadata($s[621],$s[127]),
defineFieldMetadata($s[376],$s[131],$s[176]),
defineFieldMetadata($s[482],$s[127]),
defineFieldMetadata($s[262],$s[79]),
defineFieldMetadata($s[528],$s[127]),
defineFieldMetadata($s[380],$s[11],null,true),
defineFieldMetadata($s[263],$s[11]),
defineFieldMetadata($s[323],$s[129]),
defineFieldMetadata($s[265],$s[77]),
defineFieldMetadata($s[575],$s[127],null,true),
defineFieldMetadata($s[531],$s[77]),
defineFieldMetadata($s[118],$s[79]),
defineFieldMetadata($s[175],$s[79],null,true,true),
defineFieldMetadata($s[28],"String[]",null,true,false,true),
defineFieldMetadata($s[30],$s[79],null,false,true),
defineFieldMetadata($s[235],$s[129]),
defineFieldMetadata($s[179],$s[11]),
defineFieldMetadata($s[67],"Person[]",$s[108],true,false,true),
defineFieldMetadata($s[31],$s[79]),
defineFieldMetadata($s[271],$s[129]),
defineFieldMetadata($s[335],$s[79],null,true),
defineFieldMetadata($s[664],$s[127])
];

/**
 * Add an entry to the type registry for
 * osapi.jive.corev3.contents.Post
 * @type {Object}
 */
typeRegistry[$s[23]] = {
    name: $s[23],
    ctor: osapi.jive.corev3.contents.Post
};
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.contents.Post
 * to simplify use of the comments resource.
 * This method will execute a POST for comments resources
 */ /*

 osapi.jive.corev3.contents.Post.prototype.createComment = function(data, params) { [generated code] }

 */ defineInstanceMethod({"signature":"data, params","queryParams":[$s[84],$s[94],$s[263],$s[179]],"methodName":$s[460],"className":$s[684],"resourceName":$s[192],"httpMethod":$s[12],"paramOverrides":{"parent":"@this.resources.self.ref","type":$s[136]}});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.contents.Post
 * to simplify use of the extprops resource.
 * This method will execute a POST for extprops resources
 */ /*

 osapi.jive.corev3.contents.Post.prototype.createExtProps = function(data, params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[506],"className":$s[684],"resourceName":$s[198],"httpMethod":$s[12],"signature":"data, params","queryParams":[$s[94]]});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.contents.Post
 * to simplify use of the outcomes resource.
 * This method will execute a POST for outcomes resources
 */ /*

 osapi.jive.corev3.contents.Post.prototype.createOutcome = function(data, params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[463],"className":$s[684],"resourceName":$s[218],"httpMethod":$s[12],"signature":"data, params","queryParams":[$s[94]]});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.contents.Post
 * to simplify use of the extprops resource.
 * This method will execute a DELETE for extprops resources
 */ /*

 osapi.jive.corev3.contents.Post.prototype.deleteExtProps = function() { [generated code] }

 */ defineInstanceMethod({"methodName":$s[507],"className":$s[684],"resourceName":$s[198],"httpMethod":$s[74],"signature":""});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.contents.Post
 * to simplify use of the self resource.
 * This method will execute a DELETE for self resources
 */ /*

 osapi.jive.corev3.contents.Post.prototype.destroy = function() { [generated code] }

 */ defineInstanceMethod({"methodName":$s[141],"className":$s[684],"resourceName":$s[25],"httpMethod":$s[74],"signature":""});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.contents.Post
 * to simplify use of the self resource.
 * This method will execute a GET for self resources
 */ /*

 osapi.jive.corev3.contents.Post.prototype.get = function(params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[5],"className":$s[684],"resourceName":$s[25],"httpMethod":$s[0],"signature":$s[105],"queryParams":[$s[185],$s[245],$s[94]]});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.contents.Post
 * to simplify use of the attachments resource.
 * This method will execute a GET for attachments resources
 */ /*

 osapi.jive.corev3.contents.Post.prototype.getAttachments = function(params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[516],"className":$s[684],"resourceName":$s[341],"httpMethod":$s[0],"signature":$s[105],"queryParams":[$s[94]]});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.contents.Post
 * to simplify use of the childOutcomeTypes resource.
 * This method will execute a GET for childOutcomeTypes resources
 */ /*

 osapi.jive.corev3.contents.Post.prototype.getChildOutcomeTypes = function(params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[619],"className":$s[684],"resourceName":$s[580],"httpMethod":$s[0],"signature":$s[105],"queryParams":[$s[38],$s[94],$s[209],$s[328]]});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.contents.Post
 * to simplify use of the comments resource.
 * This method will execute a GET for comments resources
 */ /*

 osapi.jive.corev3.contents.Post.prototype.getComments = function(params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[357],"className":$s[684],"resourceName":$s[192],"httpMethod":$s[0],"signature":$s[105],"queryParams":[$s[82],$s[84],$s[38],$s[511],$s[94],$s[95],$s[418],$s[99],$s[27],$s[328]]});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.contents.Post
 * to simplify use of the extprops resource.
 * This method will execute a GET for extprops resources
 */ /*

 osapi.jive.corev3.contents.Post.prototype.getExtProps = function(params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[359],"className":$s[684],"resourceName":$s[198],"httpMethod":$s[0],"signature":$s[105],"queryParams":[$s[94]]});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.contents.Post
 * to simplify use of the followers resource.
 * This method will execute a GET for followers resources
 */ /*

 osapi.jive.corev3.contents.Post.prototype.getFollowers = function(params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[415],"className":$s[684],"resourceName":$s[250],"httpMethod":$s[0],"signature":$s[105],"queryParams":[$s[38],$s[94],$s[95],$s[328]]});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.contents.Post
 * to simplify use of the followingIn resource.
 * This method will execute a GET for followingIn resources
 */ /*

 osapi.jive.corev3.contents.Post.prototype.getFollowingIn = function(params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[518],"className":$s[684],"resourceName":$s[354],"httpMethod":$s[0],"signature":$s[105],"queryParams":[$s[94]]});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.contents.Post
 * to simplify use of the likes resource.
 * This method will execute a GET for likes resources
 */ /*

 osapi.jive.corev3.contents.Post.prototype.getLikes = function(params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[203],"className":$s[684],"resourceName":$s[46],"httpMethod":$s[0],"signature":$s[105],"queryParams":[$s[38],$s[94],$s[328]]});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.contents.Post
 * to simplify use of the outcomeTypes resource.
 * This method will execute a GET for outcomeTypes resources
 */ /*

 osapi.jive.corev3.contents.Post.prototype.getOutcomeTypes = function(params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[544],"className":$s[684],"resourceName":$s[433],"httpMethod":$s[0],"signature":$s[105],"queryParams":[$s[38],$s[94],$s[328]]});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.contents.Post
 * to simplify use of the outcomes resource.
 * This method will execute a GET for outcomes resources
 */ /*

 osapi.jive.corev3.contents.Post.prototype.getOutcomes = function(params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[361],"className":$s[684],"resourceName":$s[218],"httpMethod":$s[0],"signature":$s[105],"queryParams":[$s[38],$s[94],$s[632],$s[328]]});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.contents.Post
 * to simplify use of the likes resource.
 * This method will execute a POST for likes resources
 */ /*

 osapi.jive.corev3.contents.Post.prototype.like = function(params) { [generated code] }

 */ defineInstanceMethod({"signature":$s[105],"queryParams":[],"methodName":$s[20],"className":$s[684],"resourceName":$s[46],"httpMethod":$s[12],"hasBody":false});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.contents.Post
 * to simplify use of the read resource.
 * This method will execute a POST for read resources
 */ /*

 osapi.jive.corev3.contents.Post.prototype.markRead = function(params) { [generated code] }

 */ defineInstanceMethod({"signature":$s[105],"queryParams":[],"methodName":$s[216],"className":$s[684],"resourceName":$s[24],"httpMethod":$s[12],"hasBody":false});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.contents.Post
 * to simplify use of the read resource.
 * This method will execute a DELETE for read resources
 */ /*

 osapi.jive.corev3.contents.Post.prototype.markUnread = function() { [generated code] }

 */ defineInstanceMethod({"methodName":$s[313],"className":$s[684],"resourceName":$s[24],"httpMethod":$s[74],"signature":""});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.contents.Post
 * to simplify use of the likes resource.
 * This method will execute a DELETE for likes resources
 */ /*

 osapi.jive.corev3.contents.Post.prototype.unlike = function() { [generated code] }

 */ defineInstanceMethod({"methodName":$s[123],"className":$s[684],"resourceName":$s[46],"httpMethod":$s[74],"signature":""});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.contents.Post
 * to simplify use of the self resource.
 * This method will execute a PUT for self resources
 */ /*

 osapi.jive.corev3.contents.Post.prototype.update = function(params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[124],"className":$s[684],"resourceName":$s[25],"httpMethod":$s[1],"signature":$s[105],"queryParams":[$s[185],$s[94],$s[47],$s[179]]});
/**
 * define class osapi.jive.corev3.privateprops.PrivateProps, to extend osapi.jive.corev3.AbstractObject
 */
defineClass($s[836], osapi.jive.corev3.AbstractObject, {"type":$s[378]}, []);

/**
 * Describe the fields of osapi.jive.corev3.privateprops.PrivateProps
 * @type {Array}
 */
osapi.jive.corev3.privateprops.PrivateProps.fields = [
defineFieldMetadata("id",$s[79]),
defineFieldMetadata($s[106],$s[79]),
defineFieldMetadata($s[54],$s[77]),
defineFieldMetadata($s[265],$s[77]),
defineFieldMetadata($s[30],$s[79])
];

/**
 * Add an entry to the type registry for
 * osapi.jive.corev3.privateprops.PrivateProps
 * @type {Object}
 */
typeRegistry[$s[378]] = {
    name: $s[378],
    ctor: osapi.jive.corev3.privateprops.PrivateProps
};
/**
 * define class osapi.jive.corev3.people.ProfileImage, to extend osapi.jive.corev3.AbstractObject
 */
defineClass($s[781], osapi.jive.corev3.AbstractObject, {"type":$s[438]}, [{"name":$s[66]}]);

/**
 * Describe the fields of osapi.jive.corev3.people.ProfileImage
 * @type {Array}
 */
osapi.jive.corev3.people.ProfileImage.fields = [
defineFieldMetadata($s[201],$s[127]),
defineFieldMetadata($s[468],$s[129]),
defineFieldMetadata("id",$s[79]),
defineFieldMetadata($s[259],$s[129]),
defineFieldMetadata($s[263],$s[11]),
defineFieldMetadata($s[7],"URI"),
defineFieldMetadata($s[265],$s[77]),
defineFieldMetadata($s[28],"String[]",null,true,false,true),
defineFieldMetadata($s[30],$s[79]),
defineFieldMetadata($s[235],$s[129]),
defineFieldMetadata($s[179],$s[11])
];

/**
 * Add an entry to the type registry for
 * osapi.jive.corev3.people.ProfileImage
 * @type {Object}
 */
typeRegistry[$s[438]] = {
    name: $s[438],
    ctor: osapi.jive.corev3.people.ProfileImage
};
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.people.ProfileImage
 * to simplify use of the self resource.
 * This method will execute a DELETE for self resources
 */ /*

 osapi.jive.corev3.people.ProfileImage.prototype.destroy = function() { [generated code] }

 */ defineInstanceMethod({"methodName":$s[141],"className":$s[781],"resourceName":$s[25],"httpMethod":$s[74],"signature":""});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.people.ProfileImage
 * to simplify use of the self resource.
 * This method will execute a GET for self resources
 */ /*

 osapi.jive.corev3.people.ProfileImage.prototype.get = function(params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[5],"className":$s[781],"resourceName":$s[25],"httpMethod":$s[0],"signature":$s[105],"queryParams":[$s[94]]});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.people.ProfileImage
 * to simplify use of the self resource.
 * This method will execute a PUT for self resources
 */ /*

 osapi.jive.corev3.people.ProfileImage.prototype.update = function(params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[124],"className":$s[781],"resourceName":$s[25],"httpMethod":$s[1],"signature":$s[105]});
/**
 * define class osapi.jive.corev3.places.Project, to extend osapi.jive.corev3.AbstractObject
 */
defineClass($s[714], osapi.jive.corev3.AbstractObject, {"type":$s[165]}, [{"name":$s[66]}]);

/**
 * Describe the fields of osapi.jive.corev3.places.Project
 * @type {Array}
 */
osapi.jive.corev3.places.Project.fields = [
defineFieldMetadata($s[636],$s[127]),
defineFieldMetadata($s[637],$s[129]),
defineFieldMetadata($s[399],"String[]",null,true,false,true),
defineFieldMetadata($s[139],$s[78],$s[108]),
defineFieldMetadata($s[350],$s[79],null,true),
defineFieldMetadata($s[351],$s[79]),
defineFieldMetadata($s[142],$s[11],null,true,true),
defineFieldMetadata($s[201],$s[127]),
defineFieldMetadata($s[468],$s[129]),
defineFieldMetadata($s[471],$s[79]),
defineFieldMetadata($s[566],$s[79]),
defineFieldMetadata($s[472],$s[79]),
defineFieldMetadata($s[152],$s[79]),
defineFieldMetadata("id",$s[79]),
defineFieldMetadata($s[45],$s[79]),
defineFieldMetadata($s[259],$s[129]),
defineFieldMetadata($s[101],$s[79]),
defineFieldMetadata($s[21],$s[79],null,true,true),
defineFieldMetadata($s[106],$s[79],null,true,true),
defineFieldMetadata($s[481],$s[131],$s[176]),
defineFieldMetadata($s[376],$s[131],$s[176]),
defineFieldMetadata($s[163],$s[79]),
defineFieldMetadata($s[377],"PlaceTopic[]",$s[321],true,false,true),
defineFieldMetadata($s[483],$s[79]),
defineFieldMetadata($s[528],$s[127]),
defineFieldMetadata($s[263],$s[11]),
defineFieldMetadata($s[265],$s[77]),
defineFieldMetadata($s[531],$s[77]),
defineFieldMetadata($s[268],$s[11],null,true,true),
defineFieldMetadata($s[118],$s[79]),
defineFieldMetadata($s[28],"String[]",null,true,false,true),
defineFieldMetadata($s[30],$s[79],null,false,true),
defineFieldMetadata($s[235],$s[129]),
defineFieldMetadata($s[179],$s[11]),
defineFieldMetadata($s[31],$s[79]),
defineFieldMetadata($s[271],$s[129]),
defineFieldMetadata($s[664],$s[127],null,true)
];

/**
 * Add an entry to the type registry for
 * osapi.jive.corev3.places.Project
 * @type {Object}
 */
typeRegistry[$s[165]] = {
    name: $s[165],
    ctor: osapi.jive.corev3.places.Project
};
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.places.Project
 * to simplify use of the announcements resource.
 * This method will execute a POST for announcements resources
 */ /*

 osapi.jive.corev3.places.Project.prototype.createAnnouncement = function(data, params) { [generated code] }

 */ defineInstanceMethod({"signature":"data, params","queryParams":[$s[94]],"methodName":$s[599],"className":$s[714],"resourceName":$s[452],"httpMethod":$s[12],"paramOverrides":{"type":$s[391]}});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.places.Project
 * to simplify use of the avatar resource.
 * This method will execute a POST for avatar resources
 */ /*

 osapi.jive.corev3.places.Project.prototype.createAvatar = function(params) { [generated code] }

 */ defineInstanceMethod({"signature":$s[105],"queryParams":[$s[8]],"methodName":$s[401],"className":$s[714],"resourceName":$s[85],"httpMethod":$s[12],"hasBody":false});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.places.Project
 * to simplify use of the categories resource.
 * This method will execute a POST for categories resources
 */ /*

 osapi.jive.corev3.places.Project.prototype.createCategory = function(data, params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[505],"className":$s[714],"resourceName":$s[286],"httpMethod":$s[12],"signature":"data, params","queryParams":[$s[501],$s[94]]});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.places.Project
 * to simplify use of the extprops resource.
 * This method will execute a POST for extprops resources
 */ /*

 osapi.jive.corev3.places.Project.prototype.createExtProps = function(data, params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[506],"className":$s[714],"resourceName":$s[198],"httpMethod":$s[12],"signature":"data, params","queryParams":[$s[94]]});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.places.Project
 * to simplify use of the statics resource.
 * This method will execute a POST for statics resources
 */ /*

 osapi.jive.corev3.places.Project.prototype.createStatic = function(data, params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[403],"className":$s[714],"resourceName":$s[173],"httpMethod":$s[12],"signature":"data, params","queryParams":[$s[94]]});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.places.Project
 * to simplify use of the tasks resource.
 * This method will execute a POST for tasks resources
 */ /*

 osapi.jive.corev3.places.Project.prototype.createTask = function(data, params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[290],"className":$s[714],"resourceName":$s[64],"httpMethod":$s[12],"signature":"data, params","queryParams":[$s[94]]});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.places.Project
 * to simplify use of the extprops resource.
 * This method will execute a DELETE for extprops resources
 */ /*

 osapi.jive.corev3.places.Project.prototype.deleteExtProps = function() { [generated code] }

 */ defineInstanceMethod({"methodName":$s[507],"className":$s[714],"resourceName":$s[198],"httpMethod":$s[74],"signature":""});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.places.Project
 * to simplify use of the self resource.
 * This method will execute a DELETE for self resources
 */ /*

 osapi.jive.corev3.places.Project.prototype.destroy = function() { [generated code] }

 */ defineInstanceMethod({"methodName":$s[141],"className":$s[714],"resourceName":$s[25],"httpMethod":$s[74],"signature":""});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.places.Project
 * to simplify use of the avatar resource.
 * This method will execute a DELETE for avatar resources
 */ /*

 osapi.jive.corev3.places.Project.prototype.destroyAvatar = function() { [generated code] }

 */ defineInstanceMethod({"methodName":$s[464],"className":$s[714],"resourceName":$s[85],"httpMethod":$s[74],"signature":""});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.places.Project
 * to simplify use of the self resource.
 * This method will execute a GET for self resources
 */ /*

 osapi.jive.corev3.places.Project.prototype.get = function(params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[5],"className":$s[714],"resourceName":$s[25],"httpMethod":$s[0],"signature":$s[105],"queryParams":[$s[94]]});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.places.Project
 * to simplify use of the activity resource.
 * This method will execute a GET for activity resources
 */ /*

 osapi.jive.corev3.places.Project.prototype.getActivity = function(params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[356],"className":$s[714],"resourceName":$s[186],"httpMethod":$s[0],"signature":$s[105],"queryParams":[$s[36],$s[87],$s[191],$s[397],$s[38],$s[94],$s[95],$s[432]]});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.places.Project
 * to simplify use of the announcements resource.
 * This method will execute a GET for announcements resources
 */ /*

 osapi.jive.corev3.places.Project.prototype.getAnnouncements = function(params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[562],"className":$s[714],"resourceName":$s[452],"httpMethod":$s[0],"signature":$s[105],"queryParams":[$s[280],$s[38],$s[413],$s[94],$s[328]]});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.places.Project
 * to simplify use of the blog resource.
 * This method will execute a GET for blog resources
 */ /*

 osapi.jive.corev3.places.Project.prototype.getBlog = function(params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[148],"className":$s[714],"resourceName":$s[13],"httpMethod":$s[0],"signature":$s[105],"queryParams":[$s[94]]});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.places.Project
 * to simplify use of the categories resource.
 * This method will execute a GET for categories resources
 */ /*

 osapi.jive.corev3.places.Project.prototype.getCategories = function(params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[469],"className":$s[714],"resourceName":$s[286],"httpMethod":$s[0],"signature":$s[105],"queryParams":[$s[94]]});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.places.Project
 * to simplify use of the getCheckpoints resource.
 * This method will execute a GET for getCheckpoints resources
 */ /*

 osapi.jive.corev3.places.Project.prototype.getCheckpoints = function(params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[517],"className":$s[714],"resourceName":$s[517],"httpMethod":$s[0],"signature":$s[105],"queryParams":[$s[38],$s[94],$s[328]]});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.places.Project
 * to simplify use of the contents resource.
 * This method will execute a GET for contents resources
 */ /*

 osapi.jive.corev3.places.Project.prototype.getContents = function(params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[358],"className":$s[714],"resourceName":$s[193],"httpMethod":$s[0],"signature":$s[105],"queryParams":[$s[185],$s[38],$s[94],$s[95],$s[420],$s[27],$s[328]]});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.places.Project
 * to simplify use of the extprops resource.
 * This method will execute a GET for extprops resources
 */ /*

 osapi.jive.corev3.places.Project.prototype.getExtProps = function(params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[359],"className":$s[714],"resourceName":$s[198],"httpMethod":$s[0],"signature":$s[105],"queryParams":[$s[94]]});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.places.Project
 * to simplify use of the featuredContent resource.
 * This method will execute a GET for featuredContent resources
 */ /*

 osapi.jive.corev3.places.Project.prototype.getFeaturedContent = function(params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[603],"className":$s[714],"resourceName":$s[540],"httpMethod":$s[0],"signature":$s[105],"queryParams":[$s[185],$s[94],$s[95]]});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.places.Project
 * to simplify use of the followers resource.
 * This method will execute a GET for followers resources
 */ /*

 osapi.jive.corev3.places.Project.prototype.getFollowers = function(params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[415],"className":$s[714],"resourceName":$s[250],"httpMethod":$s[0],"signature":$s[105],"queryParams":[$s[38],$s[94],$s[95],$s[328]]});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.places.Project
 * to simplify use of the followingIn resource.
 * This method will execute a GET for followingIn resources
 */ /*

 osapi.jive.corev3.places.Project.prototype.getFollowingIn = function(params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[518],"className":$s[714],"resourceName":$s[354],"httpMethod":$s[0],"signature":$s[105],"queryParams":[$s[94]]});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.places.Project
 * to simplify use of the places resource.
 * This method will execute a GET for places resources
 */ /*

 osapi.jive.corev3.places.Project.prototype.getPlaces = function(params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[256],"className":$s[714],"resourceName":$s[110],"httpMethod":$s[0],"signature":$s[105],"queryParams":[$s[38],$s[94],$s[95],$s[27],$s[328]]});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.places.Project
 * to simplify use of the statics resource.
 * This method will execute a GET for statics resources
 */ /*

 osapi.jive.corev3.places.Project.prototype.getStatics = function(params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[307],"className":$s[714],"resourceName":$s[173],"httpMethod":$s[0],"signature":$s[105],"queryParams":[$s[94],$s[329]]});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.places.Project
 * to simplify use of the tasks resource.
 * This method will execute a GET for tasks resources
 */ /*

 osapi.jive.corev3.places.Project.prototype.getTasks = function(params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[204],"className":$s[714],"resourceName":$s[64],"httpMethod":$s[0],"signature":$s[105],"queryParams":[$s[185],$s[38],$s[94],$s[27],$s[328]]});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.places.Project
 * to simplify use of the checkpoints resource.
 * This method will execute a POST for checkpoints resources
 */ /*

 osapi.jive.corev3.places.Project.prototype.setCheckpoints = function(data, params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[533],"className":$s[714],"resourceName":$s[343],"httpMethod":$s[12],"signature":"data, params","queryParams":[$s[94]]});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.places.Project
 * to simplify use of the self resource.
 * This method will execute a PUT for self resources
 */ /*

 osapi.jive.corev3.places.Project.prototype.update = function(params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[124],"className":$s[714],"resourceName":$s[25],"httpMethod":$s[1],"signature":$s[105],"queryParams":[$s[94],$s[179]]});
/**
 * define class osapi.jive.corev3.metadata.Property, to extend osapi.jive.corev3.AbstractObject
 */
defineClass($s[754], osapi.jive.corev3.AbstractObject, {"type":$s[225]}, []);

/**
 * Describe the fields of osapi.jive.corev3.metadata.Property
 * @type {Array}
 */
osapi.jive.corev3.metadata.Property.fields = [
defineFieldMetadata($s[394],$s[79]),
defineFieldMetadata($s[407],$s[79]),
defineFieldMetadata($s[350],$s[79]),
defineFieldMetadata("id",$s[79]),
defineFieldMetadata($s[21],$s[79]),
defineFieldMetadata($s[265],$s[77]),
defineFieldMetadata($s[59],$s[79]),
defineFieldMetadata($s[30],$s[79]),
defineFieldMetadata($s[68],$s[77])
];

/**
 * Add an entry to the type registry for
 * osapi.jive.corev3.metadata.Property
 * @type {Object}
 */
typeRegistry[$s[225]] = {
    name: $s[225],
    ctor: osapi.jive.corev3.metadata.Property
};
/**
 * define class osapi.jive.corev3.activities.Publication, to extend osapi.jive.corev3.AbstractObject
 */
defineClass($s[811], osapi.jive.corev3.AbstractObject, {"type":$s[379]}, [{"name":$s[66]}]);

/**
 * Describe the fields of osapi.jive.corev3.activities.Publication
 * @type {Array}
 */
osapi.jive.corev3.activities.Publication.fields = [
defineFieldMetadata($s[84],$s[78],$s[108]),
defineFieldMetadata($s[502],$s[127]),
defineFieldMetadata($s[408],$s[129],null,true),
defineFieldMetadata($s[201],$s[127]),
defineFieldMetadata($s[468],$s[129]),
defineFieldMetadata("id",$s[79]),
defineFieldMetadata($s[259],$s[129]),
defineFieldMetadata($s[21],$s[79],null,true,true),
defineFieldMetadata($s[263],$s[11]),
defineFieldMetadata($s[485],$s[127]),
defineFieldMetadata($s[265],$s[77]),
defineFieldMetadata($s[555],$s[79]),
defineFieldMetadata($s[490],"Subscription[]",$s[444],true,false,true),
defineFieldMetadata($s[28],"String[]",null,false,false,true),
defineFieldMetadata($s[30],$s[79]),
defineFieldMetadata($s[235],$s[129]),
defineFieldMetadata($s[179],$s[11])
];

/**
 * Add an entry to the type registry for
 * osapi.jive.corev3.activities.Publication
 * @type {Object}
 */
typeRegistry[$s[379]] = {
    name: $s[379],
    ctor: osapi.jive.corev3.activities.Publication
};
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.activities.Publication
 * to simplify use of the self resource.
 * This method will execute a DELETE for self resources
 */ /*

 osapi.jive.corev3.activities.Publication.prototype.destroy = function() { [generated code] }

 */ defineInstanceMethod({"methodName":$s[141],"className":$s[811],"resourceName":$s[25],"httpMethod":$s[74],"signature":""});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.activities.Publication
 * to simplify use of the self resource.
 * This method will execute a GET for self resources
 */ /*

 osapi.jive.corev3.activities.Publication.prototype.get = function(params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[5],"className":$s[811],"resourceName":$s[25],"httpMethod":$s[0],"signature":$s[105],"queryParams":[$s[94]]});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.activities.Publication
 * to simplify use of the self resource.
 * This method will execute a PUT for self resources
 */ /*

 osapi.jive.corev3.activities.Publication.prototype.update = function(params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[124],"className":$s[811],"resourceName":$s[25],"httpMethod":$s[1],"signature":$s[105],"queryParams":[$s[94]]});
/**
 * define class osapi.jive.corev3.metadata.Resource, to extend osapi.jive.corev3.AbstractObject
 */
defineClass($s[755], osapi.jive.corev3.AbstractObject, {"type":$s[230]}, []);

/**
 * Describe the fields of osapi.jive.corev3.metadata.Resource
 * @type {Array}
 */
osapi.jive.corev3.metadata.Resource.fields = [
defineFieldMetadata($s[394],$s[79]),
defineFieldMetadata($s[350],$s[79]),
defineFieldMetadata($s[144],$s[79]),
defineFieldMetadata($s[149],$s[127]),
defineFieldMetadata("id",$s[79]),
defineFieldMetadata($s[210],$s[79]),
defineFieldMetadata($s[21],$s[79]),
defineFieldMetadata("path",$s[79]),
defineFieldMetadata($s[265],$s[77]),
defineFieldMetadata($s[59],$s[79]),
defineFieldMetadata($s[388],$s[127]),
defineFieldMetadata($s[32],$s[79])
];

/**
 * Add an entry to the type registry for
 * osapi.jive.corev3.metadata.Resource
 * @type {Object}
 */
typeRegistry[$s[230]] = {
    name: $s[230],
    ctor: osapi.jive.corev3.metadata.Resource
};
/**
 * define class osapi.jive.corev3.sections.Section, to extend osapi.jive.corev3.AbstractObject
 */
defineClass($s[745], osapi.jive.corev3.AbstractObject, {"type":$s[171]}, [{"name":$s[66]}]);

/**
 * Describe the fields of osapi.jive.corev3.sections.Section
 * @type {Array}
 */
osapi.jive.corev3.sections.Section.fields = [
defineFieldMetadata($s[408],$s[129],null,true),
defineFieldMetadata($s[201],$s[127]),
defineFieldMetadata($s[468],$s[129]),
defineFieldMetadata("id",$s[79]),
defineFieldMetadata($s[259],$s[129]),
defineFieldMetadata($s[21],$s[79],null,true,true),
defineFieldMetadata($s[263],$s[11]),
defineFieldMetadata($s[265],$s[77]),
defineFieldMetadata($s[532],"SectionEntry[]",$s[441],true,false,true),
defineFieldMetadata($s[382],$s[79],null,true),
defineFieldMetadata($s[384],$s[79],null,false,true),
defineFieldMetadata($s[28],"String[]",null,false,false,true),
defineFieldMetadata($s[30],$s[79]),
defineFieldMetadata($s[235],$s[129]),
defineFieldMetadata($s[179],$s[11])
];

/**
 * Add an entry to the type registry for
 * osapi.jive.corev3.sections.Section
 * @type {Object}
 */
typeRegistry[$s[171]] = {
    name: $s[171],
    ctor: osapi.jive.corev3.sections.Section
};
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.sections.Section
 * to simplify use of the self resource.
 * This method will execute a DELETE for self resources
 */ /*

 osapi.jive.corev3.sections.Section.prototype.destroy = function() { [generated code] }

 */ defineInstanceMethod({"methodName":$s[141],"className":$s[745],"resourceName":$s[25],"httpMethod":$s[74],"signature":""});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.sections.Section
 * to simplify use of the self resource.
 * This method will execute a GET for self resources
 */ /*

 osapi.jive.corev3.sections.Section.prototype.get = function(params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[5],"className":$s[745],"resourceName":$s[25],"httpMethod":$s[0],"signature":$s[105],"queryParams":[$s[94]]});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.sections.Section
 * to simplify use of the self resource.
 * This method will execute a PUT for self resources
 */ /*

 osapi.jive.corev3.sections.Section.prototype.update = function(params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[124],"className":$s[745],"resourceName":$s[25],"httpMethod":$s[1],"signature":$s[105],"queryParams":[$s[94]]});
/**
 * define class osapi.jive.corev3.sections.SectionEntry, to extend osapi.jive.corev3.AbstractObject
 */
defineClass($s[804], osapi.jive.corev3.AbstractObject, {"type":$s[441]}, []);

/**
 * Describe the fields of osapi.jive.corev3.sections.SectionEntry
 * @type {Array}
 */
osapi.jive.corev3.sections.SectionEntry.fields = [
defineFieldMetadata($s[134],$s[79],null,true),
defineFieldMetadata($s[135],$s[79],null,true),
defineFieldMetadata($s[342],$s[79],null,true),
defineFieldMetadata($s[284],$s[79],null,true),
defineFieldMetadata($s[193],"Content[]",$s[3],false,false,true),
defineFieldMetadata($s[350],$s[79],null,true,true),
defineFieldMetadata($s[616],$s[79],null,true),
defineFieldMetadata($s[201],$s[127]),
defineFieldMetadata($s[468],$s[129]),
defineFieldMetadata($s[42],$s[79],null,true),
defineFieldMetadata($s[309],$s[79],null,true),
defineFieldMetadata("id",$s[79]),
defineFieldMetadata($s[259],$s[129]),
defineFieldMetadata($s[214],$s[79],null,true),
defineFieldMetadata($s[21],$s[79],null,true,true),
defineFieldMetadata($s[477],$s[79],null,true),
defineFieldMetadata($s[53],$s[34],$s[3],true),
defineFieldMetadata($s[263],$s[11]),
defineFieldMetadata($s[265],$s[77]),
defineFieldMetadata($s[576],$s[79],null,true),
defineFieldMetadata($s[28],"String[]",null,false,false,true),
defineFieldMetadata($s[30],$s[79]),
defineFieldMetadata($s[235],$s[129]),
defineFieldMetadata($s[179],$s[11]),
defineFieldMetadata($s[8],$s[79],null,true)
];

/**
 * Add an entry to the type registry for
 * osapi.jive.corev3.sections.SectionEntry
 * @type {Object}
 */
typeRegistry[$s[441]] = {
    name: $s[441],
    ctor: osapi.jive.corev3.sections.SectionEntry
};
/**
 * define class osapi.jive.corev3.admin.SecurityGroup, to extend osapi.jive.corev3.AbstractObject
 */
defineClass($s[777], osapi.jive.corev3.AbstractObject, {"type":$s[488]}, [{"name":$s[66]}]);

/**
 * Describe the fields of osapi.jive.corev3.admin.SecurityGroup
 * @type {Array}
 */
osapi.jive.corev3.admin.SecurityGroup.fields = [
defineFieldMetadata($s[597],$s[129]),
defineFieldMetadata($s[350],$s[79],null,true),
defineFieldMetadata($s[249],$s[127],null,true),
defineFieldMetadata($s[201],$s[127]),
defineFieldMetadata($s[468],$s[129]),
defineFieldMetadata("id",$s[79]),
defineFieldMetadata($s[259],$s[129]),
defineFieldMetadata($s[371],$s[129]),
defineFieldMetadata($s[21],$s[79],null,true,true),
defineFieldMetadata($s[322],$s[77],null,true),
defineFieldMetadata($s[263],$s[11]),
defineFieldMetadata($s[265],$s[77]),
defineFieldMetadata($s[28],"String[]",null,true,false,true),
defineFieldMetadata($s[30],$s[79]),
defineFieldMetadata($s[235],$s[129]),
defineFieldMetadata($s[179],$s[11])
];

/**
 * Add an entry to the type registry for
 * osapi.jive.corev3.admin.SecurityGroup
 * @type {Object}
 */
typeRegistry[$s[488]] = {
    name: $s[488],
    ctor: osapi.jive.corev3.admin.SecurityGroup
};
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.admin.SecurityGroup
 * to simplify use of the administrators resource.
 * This method will execute a POST for administrators resources
 */ /*

 osapi.jive.corev3.admin.SecurityGroup.prototype.createAdministrators = function(data, params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[615],"className":$s[777],"resourceName":$s[500],"httpMethod":$s[12],"signature":"data, params","queryParams":[]});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.admin.SecurityGroup
 * to simplify use of the members resource.
 * This method will execute a POST for members resources
 */ /*

 osapi.jive.corev3.admin.SecurityGroup.prototype.createMembers = function(data, params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[462],"className":$s[777],"resourceName":$s[158],"httpMethod":$s[12],"signature":"data, params","queryParams":[]});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.admin.SecurityGroup
 * to simplify use of the self resource.
 * This method will execute a DELETE for self resources
 */ /*

 osapi.jive.corev3.admin.SecurityGroup.prototype.destroy = function() { [generated code] }

 */ defineInstanceMethod({"methodName":$s[141],"className":$s[777],"resourceName":$s[25],"httpMethod":$s[74],"signature":""});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.admin.SecurityGroup
 * to simplify use of the self resource.
 * This method will execute a GET for self resources
 */ /*

 osapi.jive.corev3.admin.SecurityGroup.prototype.get = function(params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[5],"className":$s[777],"resourceName":$s[25],"httpMethod":$s[0],"signature":$s[105],"queryParams":[$s[94]]});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.admin.SecurityGroup
 * to simplify use of the administrators resource.
 * This method will execute a GET for administrators resources
 */ /*

 osapi.jive.corev3.admin.SecurityGroup.prototype.getAdministrators = function(params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[589],"className":$s[777],"resourceName":$s[500],"httpMethod":$s[0],"signature":$s[105],"queryParams":[$s[38],$s[94],$s[328]]});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.admin.SecurityGroup
 * to simplify use of the members resource.
 * This method will execute a GET for members resources
 */ /*

 osapi.jive.corev3.admin.SecurityGroup.prototype.getMembers = function(params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[304],"className":$s[777],"resourceName":$s[158],"httpMethod":$s[0],"signature":$s[105],"queryParams":[$s[38],$s[94],$s[328]]});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.admin.SecurityGroup
 * to simplify use of the self resource.
 * This method will execute a PUT for self resources
 */ /*

 osapi.jive.corev3.admin.SecurityGroup.prototype.update = function(params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[124],"className":$s[777],"resourceName":$s[25],"httpMethod":$s[1],"signature":$s[105],"queryParams":[]});
/**
 * define class osapi.jive.corev3.communications.Share, to extend osapi.jive.corev3.AbstractObject
 */
defineClass($s[789], osapi.jive.corev3.AbstractObject, {"type":$s[58]}, [{"name":$s[66]}]);

/**
 * Describe the fields of osapi.jive.corev3.communications.Share
 * @type {Array}
 */
osapi.jive.corev3.communications.Share.fields = [
defineFieldMetadata($s[279],$s[129]),
defineFieldMetadata($s[84],$s[78],$s[108]),
defineFieldMetadata($s[133],"Summary[]",$s[176],false,false,true),
defineFieldMetadata($s[137],$s[337],$s[345],true,true),
defineFieldMetadata($s[244],$s[79]),
defineFieldMetadata($s[457],"Image[]",$s[44],false,false,true),
defineFieldMetadata($s[458],"ContentVideo[]",$s[400],false,false,true),
defineFieldMetadata($s[467],$s[129]),
defineFieldMetadata($s[201],$s[127]),
defineFieldMetadata($s[468],$s[129]),
defineFieldMetadata($s[471],$s[79]),
defineFieldMetadata($s[566],$s[79]),
defineFieldMetadata($s[472],$s[79]),
defineFieldMetadata($s[152],$s[79]),
defineFieldMetadata("id",$s[79]),
defineFieldMetadata($s[45],$s[79]),
defineFieldMetadata($s[425],$s[129]),
defineFieldMetadata($s[568],$s[11]),
defineFieldMetadata($s[259],$s[129]),
defineFieldMetadata($s[106],$s[79],null,true,true),
defineFieldMetadata($s[481],$s[131],$s[176]),
defineFieldMetadata($s[621],$s[127]),
defineFieldMetadata($s[376],$s[131],$s[176]),
defineFieldMetadata($s[482],$s[127]),
defineFieldMetadata($s[434],"Person[]",$s[108],false,false,true),
defineFieldMetadata($s[110],"Place[]",$s[3],false,false,true),
defineFieldMetadata($s[528],$s[127]),
defineFieldMetadata($s[263],$s[11]),
defineFieldMetadata($s[323],$s[129]),
defineFieldMetadata($s[265],$s[77]),
defineFieldMetadata($s[531],$s[77]),
defineFieldMetadata($s[489],$s[75],$s[3]),
defineFieldMetadata($s[383],$s[34],$s[3]),
defineFieldMetadata($s[118],$s[79]),
defineFieldMetadata($s[175],$s[79]),
defineFieldMetadata($s[28],"String[]",null,true,false,true),
defineFieldMetadata($s[30],$s[79]),
defineFieldMetadata($s[235],$s[129]),
defineFieldMetadata($s[179],$s[11]),
defineFieldMetadata($s[31],$s[79]),
defineFieldMetadata($s[271],$s[129]),
defineFieldMetadata($s[183],"Summary[]",$s[176],false,false,true),
defineFieldMetadata($s[664],$s[127])
];

/**
 * Add an entry to the type registry for
 * osapi.jive.corev3.communications.Share
 * @type {Object}
 */
typeRegistry[$s[58]] = {
    name: $s[58],
    ctor: osapi.jive.corev3.communications.Share
};
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.communications.Share
 * to simplify use of the comments resource.
 * This method will execute a POST for comments resources
 */ /*

 osapi.jive.corev3.communications.Share.prototype.createComment = function(data, params) { [generated code] }

 */ defineInstanceMethod({"signature":"data, params","queryParams":[$s[94]],"methodName":$s[460],"className":$s[789],"resourceName":$s[192],"httpMethod":$s[12],"paramOverrides":{"parent":"@this.resources.self.ref","type":$s[136]}});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.communications.Share
 * to simplify use of the extprops resource.
 * This method will execute a POST for extprops resources
 */ /*

 osapi.jive.corev3.communications.Share.prototype.createExtProps = function(data, params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[506],"className":$s[789],"resourceName":$s[198],"httpMethod":$s[12],"signature":"data, params","queryParams":[$s[94]]});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.communications.Share
 * to simplify use of the outcomes resource.
 * This method will execute a POST for outcomes resources
 */ /*

 osapi.jive.corev3.communications.Share.prototype.createOutcome = function(data, params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[463],"className":$s[789],"resourceName":$s[218],"httpMethod":$s[12],"signature":"data, params","queryParams":[$s[94]]});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.communications.Share
 * to simplify use of the extprops resource.
 * This method will execute a DELETE for extprops resources
 */ /*

 osapi.jive.corev3.communications.Share.prototype.deleteExtProps = function() { [generated code] }

 */ defineInstanceMethod({"methodName":$s[507],"className":$s[789],"resourceName":$s[198],"httpMethod":$s[74],"signature":""});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.communications.Share
 * to simplify use of the self resource.
 * This method will execute a DELETE for self resources
 */ /*

 osapi.jive.corev3.communications.Share.prototype.destroy = function() { [generated code] }

 */ defineInstanceMethod({"methodName":$s[141],"className":$s[789],"resourceName":$s[25],"httpMethod":$s[74],"signature":""});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.communications.Share
 * to simplify use of the self resource.
 * This method will execute a GET for self resources
 */ /*

 osapi.jive.corev3.communications.Share.prototype.get = function(params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[5],"className":$s[789],"resourceName":$s[25],"httpMethod":$s[0],"signature":$s[105],"queryParams":[$s[94]]});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.communications.Share
 * to simplify use of the childOutcomeTypes resource.
 * This method will execute a GET for childOutcomeTypes resources
 */ /*

 osapi.jive.corev3.communications.Share.prototype.getChildOutcomeTypes = function(params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[619],"className":$s[789],"resourceName":$s[580],"httpMethod":$s[0],"signature":$s[105],"queryParams":[$s[38],$s[94],$s[209],$s[328]]});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.communications.Share
 * to simplify use of the comments resource.
 * This method will execute a GET for comments resources
 */ /*

 osapi.jive.corev3.communications.Share.prototype.getComments = function(params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[357],"className":$s[789],"resourceName":$s[192],"httpMethod":$s[0],"signature":$s[105],"queryParams":[$s[82],$s[38],$s[511],$s[94],$s[147],$s[418],$s[328]]});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.communications.Share
 * to simplify use of the extprops resource.
 * This method will execute a GET for extprops resources
 */ /*

 osapi.jive.corev3.communications.Share.prototype.getExtProps = function(params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[359],"className":$s[789],"resourceName":$s[198],"httpMethod":$s[0],"signature":$s[105],"queryParams":[$s[94]]});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.communications.Share
 * to simplify use of the outcomeTypes resource.
 * This method will execute a GET for outcomeTypes resources
 */ /*

 osapi.jive.corev3.communications.Share.prototype.getOutcomeTypes = function(params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[544],"className":$s[789],"resourceName":$s[433],"httpMethod":$s[0],"signature":$s[105],"queryParams":[$s[38],$s[94],$s[328]]});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.communications.Share
 * to simplify use of the outcomes resource.
 * This method will execute a GET for outcomes resources
 */ /*

 osapi.jive.corev3.communications.Share.prototype.getOutcomes = function(params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[361],"className":$s[789],"resourceName":$s[218],"httpMethod":$s[0],"signature":$s[105],"queryParams":[$s[38],$s[94],$s[632],$s[328]]});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.communications.Share
 * to simplify use of the read resource.
 * This method will execute a POST for read resources
 */ /*

 osapi.jive.corev3.communications.Share.prototype.markRead = function(params) { [generated code] }

 */ defineInstanceMethod({"signature":$s[105],"queryParams":[],"methodName":$s[216],"className":$s[789],"resourceName":$s[24],"httpMethod":$s[12],"hasBody":false});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.communications.Share
 * to simplify use of the read resource.
 * This method will execute a DELETE for read resources
 */ /*

 osapi.jive.corev3.communications.Share.prototype.markUnread = function() { [generated code] }

 */ defineInstanceMethod({"methodName":$s[313],"className":$s[789],"resourceName":$s[24],"httpMethod":$s[74],"signature":""});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.communications.Share
 * to simplify use of the self resource.
 * This method will execute a PUT for self resources
 */ /*

 osapi.jive.corev3.communications.Share.prototype.update = function(params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[124],"className":$s[789],"resourceName":$s[25],"httpMethod":$s[1],"signature":$s[105],"queryParams":[$s[185],$s[94],$s[47],$s[179]]});
/**
 * define class osapi.jive.corev3.contents.Slide, to extend osapi.jive.corev3.AbstractObject
 */
defineClass($s[708], osapi.jive.corev3.AbstractObject, {"type":$s[60]}, [{"name":$s[66]}]);

/**
 * Describe the fields of osapi.jive.corev3.contents.Slide
 * @type {Array}
 */
osapi.jive.corev3.contents.Slide.fields = [
defineFieldMetadata($s[279],$s[129]),
defineFieldMetadata($s[84],$s[78],$s[108]),
defineFieldMetadata($s[137],$s[337],$s[345],true,true),
defineFieldMetadata($s[244],$s[79]),
defineFieldMetadata($s[457],"Image[]",$s[44],false,false,true),
defineFieldMetadata($s[458],"ContentVideo[]",$s[400],false,false,true),
defineFieldMetadata($s[602],$s[79],null,true,true),
defineFieldMetadata($s[467],$s[129]),
defineFieldMetadata($s[201],$s[127]),
defineFieldMetadata($s[468],$s[129]),
defineFieldMetadata($s[471],$s[79]),
defineFieldMetadata($s[566],$s[79]),
defineFieldMetadata($s[472],$s[79]),
defineFieldMetadata($s[152],$s[79]),
defineFieldMetadata("id",$s[79]),
defineFieldMetadata($s[44],$s[79],null,true,true),
defineFieldMetadata($s[45],$s[79]),
defineFieldMetadata($s[425],$s[129]),
defineFieldMetadata($s[568],$s[11]),
defineFieldMetadata($s[259],$s[129]),
defineFieldMetadata($s[106],$s[79],null,true,true),
defineFieldMetadata($s[481],$s[131],$s[176]),
defineFieldMetadata($s[621],$s[127]),
defineFieldMetadata($s[376],$s[131],$s[176]),
defineFieldMetadata($s[482],$s[127]),
defineFieldMetadata($s[528],$s[127]),
defineFieldMetadata($s[380],$s[11],null,true),
defineFieldMetadata($s[263],$s[11]),
defineFieldMetadata($s[323],$s[129]),
defineFieldMetadata($s[265],$s[77]),
defineFieldMetadata($s[531],$s[77]),
defineFieldMetadata($s[172],$s[129],null,true),
defineFieldMetadata($s[118],$s[79]),
defineFieldMetadata($s[175],$s[79],null,true,true),
defineFieldMetadata($s[28],"String[]",null,false,false,true),
defineFieldMetadata($s[331],$s[79],null,true,true),
defineFieldMetadata($s[30],$s[79],null,false,true),
defineFieldMetadata($s[235],$s[129]),
defineFieldMetadata($s[179],$s[11]),
defineFieldMetadata($s[31],$s[79]),
defineFieldMetadata($s[271],$s[129]),
defineFieldMetadata($s[664],$s[127])
];

/**
 * Add an entry to the type registry for
 * osapi.jive.corev3.contents.Slide
 * @type {Object}
 */
typeRegistry[$s[60]] = {
    name: $s[60],
    ctor: osapi.jive.corev3.contents.Slide
};
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.contents.Slide
 * to simplify use of the comments resource.
 * This method will execute a POST for comments resources
 */ /*

 osapi.jive.corev3.contents.Slide.prototype.createComment = function(data, params) { [generated code] }

 */ defineInstanceMethod({"signature":"data, params","queryParams":[$s[84],$s[94],$s[263],$s[179]],"methodName":$s[460],"className":$s[708],"resourceName":$s[192],"httpMethod":$s[12],"paramOverrides":{"parent":"@this.resources.self.ref","type":$s[136]}});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.contents.Slide
 * to simplify use of the extprops resource.
 * This method will execute a POST for extprops resources
 */ /*

 osapi.jive.corev3.contents.Slide.prototype.createExtProps = function(data, params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[506],"className":$s[708],"resourceName":$s[198],"httpMethod":$s[12],"signature":"data, params","queryParams":[$s[94]]});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.contents.Slide
 * to simplify use of the outcomes resource.
 * This method will execute a POST for outcomes resources
 */ /*

 osapi.jive.corev3.contents.Slide.prototype.createOutcome = function(data, params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[463],"className":$s[708],"resourceName":$s[218],"httpMethod":$s[12],"signature":"data, params","queryParams":[$s[94]]});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.contents.Slide
 * to simplify use of the extprops resource.
 * This method will execute a DELETE for extprops resources
 */ /*

 osapi.jive.corev3.contents.Slide.prototype.deleteExtProps = function() { [generated code] }

 */ defineInstanceMethod({"methodName":$s[507],"className":$s[708],"resourceName":$s[198],"httpMethod":$s[74],"signature":""});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.contents.Slide
 * to simplify use of the self resource.
 * This method will execute a DELETE for self resources
 */ /*

 osapi.jive.corev3.contents.Slide.prototype.destroy = function() { [generated code] }

 */ defineInstanceMethod({"methodName":$s[141],"className":$s[708],"resourceName":$s[25],"httpMethod":$s[74],"signature":""});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.contents.Slide
 * to simplify use of the self resource.
 * This method will execute a GET for self resources
 */ /*

 osapi.jive.corev3.contents.Slide.prototype.get = function(params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[5],"className":$s[708],"resourceName":$s[25],"httpMethod":$s[0],"signature":$s[105],"queryParams":[$s[94]]});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.contents.Slide
 * to simplify use of the childOutcomeTypes resource.
 * This method will execute a GET for childOutcomeTypes resources
 */ /*

 osapi.jive.corev3.contents.Slide.prototype.getChildOutcomeTypes = function(params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[619],"className":$s[708],"resourceName":$s[580],"httpMethod":$s[0],"signature":$s[105],"queryParams":[$s[38],$s[94],$s[209],$s[328]]});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.contents.Slide
 * to simplify use of the comments resource.
 * This method will execute a GET for comments resources
 */ /*

 osapi.jive.corev3.contents.Slide.prototype.getComments = function(params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[357],"className":$s[708],"resourceName":$s[192],"httpMethod":$s[0],"signature":$s[105],"queryParams":[$s[82],$s[84],$s[38],$s[511],$s[94],$s[95],$s[418],$s[99],$s[27],$s[328]]});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.contents.Slide
 * to simplify use of the extprops resource.
 * This method will execute a GET for extprops resources
 */ /*

 osapi.jive.corev3.contents.Slide.prototype.getExtProps = function(params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[359],"className":$s[708],"resourceName":$s[198],"httpMethod":$s[0],"signature":$s[105],"queryParams":[$s[94]]});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.contents.Slide
 * to simplify use of the outcomeTypes resource.
 * This method will execute a GET for outcomeTypes resources
 */ /*

 osapi.jive.corev3.contents.Slide.prototype.getOutcomeTypes = function(params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[544],"className":$s[708],"resourceName":$s[433],"httpMethod":$s[0],"signature":$s[105],"queryParams":[$s[38],$s[94],$s[328]]});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.contents.Slide
 * to simplify use of the outcomes resource.
 * This method will execute a GET for outcomes resources
 */ /*

 osapi.jive.corev3.contents.Slide.prototype.getOutcomes = function(params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[361],"className":$s[708],"resourceName":$s[218],"httpMethod":$s[0],"signature":$s[105],"queryParams":[$s[38],$s[94],$s[632],$s[328]]});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.contents.Slide
 * to simplify use of the self resource.
 * This method will execute a PUT for self resources
 */ /*

 osapi.jive.corev3.contents.Slide.prototype.update = function(params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[124],"className":$s[708],"resourceName":$s[25],"httpMethod":$s[1],"signature":$s[105],"queryParams":[$s[94]]});
/**
 * define class osapi.jive.corev3.places.Space, to extend osapi.jive.corev3.AbstractObject
 */
defineClass($s[674], osapi.jive.corev3.AbstractObject, {"type":$s[61]}, [{"name":$s[66]}]);

/**
 * Describe the fields of osapi.jive.corev3.places.Space
 * @type {Array}
 */
osapi.jive.corev3.places.Space.fields = [
defineFieldMetadata($s[636],$s[127]),
defineFieldMetadata($s[288],$s[129]),
defineFieldMetadata($s[637],$s[129]),
defineFieldMetadata($s[399],"String[]",null,true,false,true),
defineFieldMetadata($s[350],$s[79],null,true),
defineFieldMetadata($s[351],$s[79],null,true,true),
defineFieldMetadata($s[201],$s[127]),
defineFieldMetadata($s[468],$s[129]),
defineFieldMetadata($s[471],$s[79]),
defineFieldMetadata($s[566],$s[79]),
defineFieldMetadata($s[472],$s[79]),
defineFieldMetadata($s[152],$s[79]),
defineFieldMetadata("id",$s[79]),
defineFieldMetadata($s[45],$s[79]),
defineFieldMetadata($s[639],$s[127]),
defineFieldMetadata($s[259],$s[129]),
defineFieldMetadata($s[101],$s[79],null,true),
defineFieldMetadata($s[21],$s[79],null,true,true),
defineFieldMetadata($s[106],$s[79],null,true),
defineFieldMetadata($s[481],$s[131],$s[176]),
defineFieldMetadata($s[376],$s[131],$s[176]),
defineFieldMetadata($s[163],$s[79]),
defineFieldMetadata($s[377],"PlaceTopic[]",$s[321],true,false,true),
defineFieldMetadata($s[528],$s[127]),
defineFieldMetadata($s[263],$s[11]),
defineFieldMetadata($s[265],$s[77]),
defineFieldMetadata($s[531],$s[77]),
defineFieldMetadata($s[118],$s[79]),
defineFieldMetadata($s[28],"String[]",null,true,false,true),
defineFieldMetadata($s[30],$s[79],null,false,true),
defineFieldMetadata($s[235],$s[129]),
defineFieldMetadata($s[179],$s[11]),
defineFieldMetadata($s[31],$s[79]),
defineFieldMetadata($s[271],$s[129]),
defineFieldMetadata($s[664],$s[127],null,true)
];

/**
 * Add an entry to the type registry for
 * osapi.jive.corev3.places.Space
 * @type {Object}
 */
typeRegistry[$s[61]] = {
    name: $s[61],
    ctor: osapi.jive.corev3.places.Space
};
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.places.Space
 * to simplify use of the announcements resource.
 * This method will execute a POST for announcements resources
 */ /*

 osapi.jive.corev3.places.Space.prototype.createAnnouncement = function(data, params) { [generated code] }

 */ defineInstanceMethod({"signature":"data, params","queryParams":[$s[94]],"methodName":$s[599],"className":$s[674],"resourceName":$s[452],"httpMethod":$s[12],"paramOverrides":{"type":$s[391]}});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.places.Space
 * to simplify use of the avatar resource.
 * This method will execute a POST for avatar resources
 */ /*

 osapi.jive.corev3.places.Space.prototype.createAvatar = function(params) { [generated code] }

 */ defineInstanceMethod({"signature":$s[105],"queryParams":[$s[8]],"methodName":$s[401],"className":$s[674],"resourceName":$s[85],"httpMethod":$s[12],"hasBody":false});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.places.Space
 * to simplify use of the categories resource.
 * This method will execute a POST for categories resources
 */ /*

 osapi.jive.corev3.places.Space.prototype.createCategory = function(data, params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[505],"className":$s[674],"resourceName":$s[286],"httpMethod":$s[12],"signature":"data, params","queryParams":[$s[501],$s[94]]});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.places.Space
 * to simplify use of the extprops resource.
 * This method will execute a POST for extprops resources
 */ /*

 osapi.jive.corev3.places.Space.prototype.createExtProps = function(data, params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[506],"className":$s[674],"resourceName":$s[198],"httpMethod":$s[12],"signature":"data, params","queryParams":[$s[94]]});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.places.Space
 * to simplify use of the statics resource.
 * This method will execute a POST for statics resources
 */ /*

 osapi.jive.corev3.places.Space.prototype.createStatic = function(data, params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[403],"className":$s[674],"resourceName":$s[173],"httpMethod":$s[12],"signature":"data, params","queryParams":[$s[94]]});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.places.Space
 * to simplify use of the extprops resource.
 * This method will execute a DELETE for extprops resources
 */ /*

 osapi.jive.corev3.places.Space.prototype.deleteExtProps = function() { [generated code] }

 */ defineInstanceMethod({"methodName":$s[507],"className":$s[674],"resourceName":$s[198],"httpMethod":$s[74],"signature":""});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.places.Space
 * to simplify use of the self resource.
 * This method will execute a DELETE for self resources
 */ /*

 osapi.jive.corev3.places.Space.prototype.destroy = function() { [generated code] }

 */ defineInstanceMethod({"methodName":$s[141],"className":$s[674],"resourceName":$s[25],"httpMethod":$s[74],"signature":""});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.places.Space
 * to simplify use of the avatar resource.
 * This method will execute a DELETE for avatar resources
 */ /*

 osapi.jive.corev3.places.Space.prototype.destroyAvatar = function() { [generated code] }

 */ defineInstanceMethod({"methodName":$s[464],"className":$s[674],"resourceName":$s[85],"httpMethod":$s[74],"signature":""});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.places.Space
 * to simplify use of the self resource.
 * This method will execute a GET for self resources
 */ /*

 osapi.jive.corev3.places.Space.prototype.get = function(params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[5],"className":$s[674],"resourceName":$s[25],"httpMethod":$s[0],"signature":$s[105],"queryParams":[$s[94]]});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.places.Space
 * to simplify use of the activity resource.
 * This method will execute a GET for activity resources
 */ /*

 osapi.jive.corev3.places.Space.prototype.getActivity = function(params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[356],"className":$s[674],"resourceName":$s[186],"httpMethod":$s[0],"signature":$s[105],"queryParams":[$s[36],$s[87],$s[191],$s[397],$s[38],$s[94],$s[95],$s[432]]});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.places.Space
 * to simplify use of the announcements resource.
 * This method will execute a GET for announcements resources
 */ /*

 osapi.jive.corev3.places.Space.prototype.getAnnouncements = function(params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[562],"className":$s[674],"resourceName":$s[452],"httpMethod":$s[0],"signature":$s[105],"queryParams":[$s[280],$s[38],$s[413],$s[94],$s[328]]});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.places.Space
 * to simplify use of the blog resource.
 * This method will execute a GET for blog resources
 */ /*

 osapi.jive.corev3.places.Space.prototype.getBlog = function(params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[148],"className":$s[674],"resourceName":$s[13],"httpMethod":$s[0],"signature":$s[105],"queryParams":[$s[94]]});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.places.Space
 * to simplify use of the categories resource.
 * This method will execute a GET for categories resources
 */ /*

 osapi.jive.corev3.places.Space.prototype.getCategories = function(params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[469],"className":$s[674],"resourceName":$s[286],"httpMethod":$s[0],"signature":$s[105],"queryParams":[$s[94]]});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.places.Space
 * to simplify use of the contents resource.
 * This method will execute a GET for contents resources
 */ /*

 osapi.jive.corev3.places.Space.prototype.getContents = function(params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[358],"className":$s[674],"resourceName":$s[193],"httpMethod":$s[0],"signature":$s[105],"queryParams":[$s[185],$s[38],$s[94],$s[95],$s[420],$s[27],$s[328]]});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.places.Space
 * to simplify use of the extprops resource.
 * This method will execute a GET for extprops resources
 */ /*

 osapi.jive.corev3.places.Space.prototype.getExtProps = function(params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[359],"className":$s[674],"resourceName":$s[198],"httpMethod":$s[0],"signature":$s[105],"queryParams":[$s[94]]});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.places.Space
 * to simplify use of the featuredContent resource.
 * This method will execute a GET for featuredContent resources
 */ /*

 osapi.jive.corev3.places.Space.prototype.getFeaturedContent = function(params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[603],"className":$s[674],"resourceName":$s[540],"httpMethod":$s[0],"signature":$s[105],"queryParams":[$s[185],$s[94],$s[95]]});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.places.Space
 * to simplify use of the followers resource.
 * This method will execute a GET for followers resources
 */ /*

 osapi.jive.corev3.places.Space.prototype.getFollowers = function(params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[415],"className":$s[674],"resourceName":$s[250],"httpMethod":$s[0],"signature":$s[105],"queryParams":[$s[38],$s[94],$s[95],$s[328]]});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.places.Space
 * to simplify use of the followingIn resource.
 * This method will execute a GET for followingIn resources
 */ /*

 osapi.jive.corev3.places.Space.prototype.getFollowingIn = function(params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[518],"className":$s[674],"resourceName":$s[354],"httpMethod":$s[0],"signature":$s[105],"queryParams":[$s[94]]});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.places.Space
 * to simplify use of the places resource.
 * This method will execute a GET for places resources
 */ /*

 osapi.jive.corev3.places.Space.prototype.getPlaces = function(params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[256],"className":$s[674],"resourceName":$s[110],"httpMethod":$s[0],"signature":$s[105],"queryParams":[$s[38],$s[94],$s[95],$s[27],$s[328]]});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.places.Space
 * to simplify use of the statics resource.
 * This method will execute a GET for statics resources
 */ /*

 osapi.jive.corev3.places.Space.prototype.getStatics = function(params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[307],"className":$s[674],"resourceName":$s[173],"httpMethod":$s[0],"signature":$s[105],"queryParams":[$s[94],$s[329]]});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.places.Space
 * to simplify use of the self resource.
 * This method will execute a PUT for self resources
 */ /*

 osapi.jive.corev3.places.Space.prototype.update = function(params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[124],"className":$s[674],"resourceName":$s[25],"httpMethod":$s[1],"signature":$s[105],"queryParams":[$s[94],$s[179]]});
/**
 * define class osapi.jive.corev3.contents.Stage, to extend osapi.jive.corev3.AbstractObject
 */
defineClass($s[709], osapi.jive.corev3.AbstractObject, {"type":$s[62]}, []);

/**
 * Describe the fields of osapi.jive.corev3.contents.Stage
 * @type {Array}
 */
osapi.jive.corev3.contents.Stage.fields = [
defineFieldMetadata($s[537],$s[79],null,true),
defineFieldMetadata($s[541],$s[79],null,true),
defineFieldMetadata("id",$s[79]),
defineFieldMetadata($s[310],$s[129]),
defineFieldMetadata($s[21],$s[79],null,true),
defineFieldMetadata($s[265],$s[77]),
defineFieldMetadata($s[442],$s[127],null,true),
defineFieldMetadata($s[443],$s[127],null,true),
defineFieldMetadata($s[30],$s[79]),
defineFieldMetadata($s[493],$s[127],null,true)
];

/**
 * Add an entry to the type registry for
 * osapi.jive.corev3.contents.Stage
 * @type {Object}
 */
typeRegistry[$s[62]] = {
    name: $s[62],
    ctor: osapi.jive.corev3.contents.Stage
};
/**
 * define class osapi.jive.corev3.places.Static, to extend osapi.jive.corev3.AbstractObject
 */
defineClass($s[697], osapi.jive.corev3.AbstractObject, {"type":$s[117]}, []);

/**
 * Describe the fields of osapi.jive.corev3.places.Static
 * @type {Array}
 */
osapi.jive.corev3.places.Static.fields = [
defineFieldMetadata($s[84],$s[78],$s[108]),
defineFieldMetadata($s[350],$s[79],null,true),
defineFieldMetadata($s[200],$s[79],null,false,true),
defineFieldMetadata($s[201],$s[127]),
defineFieldMetadata($s[468],$s[129]),
defineFieldMetadata("id",$s[79]),
defineFieldMetadata($s[259],$s[129]),
defineFieldMetadata($s[53],$s[34],$s[3]),
defineFieldMetadata($s[263],$s[11]),
defineFieldMetadata($s[265],$s[77]),
defineFieldMetadata($s[329],$s[129]),
defineFieldMetadata($s[118],$s[129]),
defineFieldMetadata($s[28],"String[]",null,false,false,true),
defineFieldMetadata($s[30],$s[79]),
defineFieldMetadata($s[235],$s[129]),
defineFieldMetadata($s[179],$s[11])
];

/**
 * Add an entry to the type registry for
 * osapi.jive.corev3.places.Static
 * @type {Object}
 */
typeRegistry[$s[117]] = {
    name: $s[117],
    ctor: osapi.jive.corev3.places.Static
};
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.places.Static
 * to simplify use of the self resource.
 * This method will execute a DELETE for self resources
 */ /*

 osapi.jive.corev3.places.Static.prototype.destroy = function() { [generated code] }

 */ defineInstanceMethod({"methodName":$s[141],"className":$s[697],"resourceName":$s[25],"httpMethod":$s[74],"signature":""});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.places.Static
 * to simplify use of the self resource.
 * This method will execute a GET for self resources
 */ /*

 osapi.jive.corev3.places.Static.prototype.get = function(params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[5],"className":$s[697],"resourceName":$s[25],"httpMethod":$s[0],"signature":$s[105],"queryParams":[$s[94]]});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.places.Static
 * to simplify use of the self resource.
 * This method will execute a PUT for self resources
 */ /*

 osapi.jive.corev3.places.Static.prototype.update = function(params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[124],"className":$s[697],"resourceName":$s[25],"httpMethod":$s[1],"signature":$s[105],"queryParams":[$s[94]]});
/**
 * define class osapi.jive.corev3.activities.Stream, to extend osapi.jive.corev3.AbstractObject
 */
defineClass($s[747], osapi.jive.corev3.AbstractObject, {"type":$s[119]}, []);

/**
 * Describe the fields of osapi.jive.corev3.activities.Stream
 * @type {Array}
 */
osapi.jive.corev3.activities.Stream.fields = [
defineFieldMetadata($s[38],$s[129]),
defineFieldMetadata("id",$s[79]),
defineFieldMetadata($s[21],$s[79],null,true,true),
defineFieldMetadata($s[314],$s[11]),
defineFieldMetadata($s[108],$s[78],$s[108]),
defineFieldMetadata($s[553],$s[11]),
defineFieldMetadata($s[263],$s[11]),
defineFieldMetadata($s[485],$s[127],null,true),
defineFieldMetadata($s[265],$s[77]),
defineFieldMetadata($s[116],$s[79],null,true),
defineFieldMetadata($s[30],$s[79]),
defineFieldMetadata($s[179],$s[11])
];

/**
 * Add an entry to the type registry for
 * osapi.jive.corev3.activities.Stream
 * @type {Object}
 */
typeRegistry[$s[119]] = {
    name: $s[119],
    ctor: osapi.jive.corev3.activities.Stream
};
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.activities.Stream
 * to simplify use of the associations resource.
 * This method will execute a POST for associations resources
 */ /*

 osapi.jive.corev3.activities.Stream.prototype.createAssociations = function(data, params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[600],"className":$s[747],"resourceName":$s[393],"httpMethod":$s[12],"signature":"data, params","queryParams":[]});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.activities.Stream
 * to simplify use of the self resource.
 * This method will execute a DELETE for self resources
 */ /*

 osapi.jive.corev3.activities.Stream.prototype.destroy = function() { [generated code] }

 */ defineInstanceMethod({"methodName":$s[141],"className":$s[747],"resourceName":$s[25],"httpMethod":$s[74],"signature":""});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.activities.Stream
 * to simplify use of the associations resource.
 * This method will execute a DELETE for associations resources
 */ /*

 osapi.jive.corev3.activities.Stream.prototype.destroyAssociations = function() { [generated code] }

 */ defineInstanceMethod({"methodName":$s[611],"className":$s[747],"resourceName":$s[393],"httpMethod":$s[74],"signature":""});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.activities.Stream
 * to simplify use of the self resource.
 * This method will execute a GET for self resources
 */ /*

 osapi.jive.corev3.activities.Stream.prototype.get = function(params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[5],"className":$s[747],"resourceName":$s[25],"httpMethod":$s[0],"signature":$s[105],"queryParams":[$s[94]]});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.activities.Stream
 * to simplify use of the activity resource.
 * This method will execute a GET for activity resources
 */ /*

 osapi.jive.corev3.activities.Stream.prototype.getActivity = function(params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[356],"className":$s[747],"resourceName":$s[186],"httpMethod":$s[0],"signature":$s[105],"queryParams":[$s[36],$s[87],$s[191],$s[397],$s[38],$s[94],$s[95],$s[432],$s[536]]});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.activities.Stream
 * to simplify use of the associations resource.
 * This method will execute a GET for associations resources
 */ /*

 osapi.jive.corev3.activities.Stream.prototype.getAssociations = function(params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[542],"className":$s[747],"resourceName":$s[393],"httpMethod":$s[0],"signature":$s[105],"queryParams":[$s[38],$s[94],$s[95],$s[328]]});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.activities.Stream
 * to simplify use of the self resource.
 * This method will execute a PUT for self resources
 */ /*

 osapi.jive.corev3.activities.Stream.prototype.update = function(params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[124],"className":$s[747],"resourceName":$s[25],"httpMethod":$s[1],"signature":$s[105],"queryParams":[$s[94]]});
/**
 * define class osapi.jive.corev3.activities.StreamEntry, to extend osapi.jive.corev3.AbstractObject
 */
defineClass($s[812], osapi.jive.corev3.AbstractObject, {"type":$s[385]}, [{"name":$s[66]}]);

/**
 * Describe the fields of osapi.jive.corev3.activities.StreamEntry
 * @type {Array}
 */
osapi.jive.corev3.activities.StreamEntry.fields = [
defineFieldMetadata($s[279],$s[129]),
defineFieldMetadata($s[84],$s[78],$s[108]),
defineFieldMetadata($s[137],$s[337],$s[345],true,true),
defineFieldMetadata($s[244],$s[79]),
defineFieldMetadata($s[457],"Image[]",$s[44],false,false,true),
defineFieldMetadata($s[458],"ContentVideo[]",$s[400],false,false,true),
defineFieldMetadata($s[467],$s[129]),
defineFieldMetadata($s[201],$s[127]),
defineFieldMetadata($s[468],$s[129]),
defineFieldMetadata($s[471],$s[79]),
defineFieldMetadata($s[566],$s[79]),
defineFieldMetadata($s[472],$s[79]),
defineFieldMetadata($s[152],$s[79]),
defineFieldMetadata("id",$s[79]),
defineFieldMetadata($s[45],$s[79]),
defineFieldMetadata($s[425],$s[129]),
defineFieldMetadata($s[568],$s[11]),
defineFieldMetadata($s[259],$s[129]),
defineFieldMetadata($s[106],$s[79],null,true,true),
defineFieldMetadata($s[481],$s[131],$s[176]),
defineFieldMetadata($s[621],$s[127]),
defineFieldMetadata($s[376],$s[131],$s[176]),
defineFieldMetadata($s[482],$s[127]),
defineFieldMetadata($s[528],$s[127]),
defineFieldMetadata($s[263],$s[11]),
defineFieldMetadata($s[323],$s[129]),
defineFieldMetadata($s[265],$s[77]),
defineFieldMetadata($s[531],$s[77]),
defineFieldMetadata($s[118],$s[79]),
defineFieldMetadata($s[175],$s[79]),
defineFieldMetadata($s[28],"String[]",null,true,false,true),
defineFieldMetadata($s[30],$s[79]),
defineFieldMetadata($s[235],$s[129]),
defineFieldMetadata($s[179],$s[11]),
defineFieldMetadata($s[31],$s[79]),
defineFieldMetadata($s[32],$s[79]),
defineFieldMetadata($s[271],$s[129]),
defineFieldMetadata($s[664],$s[127])
];

/**
 * Add an entry to the type registry for
 * osapi.jive.corev3.activities.StreamEntry
 * @type {Object}
 */
typeRegistry[$s[385]] = {
    name: $s[385],
    ctor: osapi.jive.corev3.activities.StreamEntry
};
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.activities.StreamEntry
 * to simplify use of the comments resource.
 * This method will execute a POST for comments resources
 */ /*

 osapi.jive.corev3.activities.StreamEntry.prototype.createComment = function(data, params) { [generated code] }

 */ defineInstanceMethod({"signature":"data, params","queryParams":[$s[94]],"methodName":$s[460],"className":$s[812],"resourceName":$s[192],"httpMethod":$s[12],"paramOverrides":{"parent":"@this.resources.self.ref","type":$s[136]}});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.activities.StreamEntry
 * to simplify use of the extprops resource.
 * This method will execute a POST for extprops resources
 */ /*

 osapi.jive.corev3.activities.StreamEntry.prototype.createExtProps = function(data, params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[506],"className":$s[812],"resourceName":$s[198],"httpMethod":$s[12],"signature":"data, params","queryParams":[$s[94]]});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.activities.StreamEntry
 * to simplify use of the outcomes resource.
 * This method will execute a POST for outcomes resources
 */ /*

 osapi.jive.corev3.activities.StreamEntry.prototype.createOutcome = function(data, params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[463],"className":$s[812],"resourceName":$s[218],"httpMethod":$s[12],"signature":"data, params","queryParams":[$s[94]]});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.activities.StreamEntry
 * to simplify use of the extprops resource.
 * This method will execute a DELETE for extprops resources
 */ /*

 osapi.jive.corev3.activities.StreamEntry.prototype.deleteExtProps = function() { [generated code] }

 */ defineInstanceMethod({"methodName":$s[507],"className":$s[812],"resourceName":$s[198],"httpMethod":$s[74],"signature":""});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.activities.StreamEntry
 * to simplify use of the childOutcomeTypes resource.
 * This method will execute a GET for childOutcomeTypes resources
 */ /*

 osapi.jive.corev3.activities.StreamEntry.prototype.getChildOutcomeTypes = function(params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[619],"className":$s[812],"resourceName":$s[580],"httpMethod":$s[0],"signature":$s[105],"queryParams":[$s[38],$s[94],$s[209],$s[328]]});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.activities.StreamEntry
 * to simplify use of the comments resource.
 * This method will execute a GET for comments resources
 */ /*

 osapi.jive.corev3.activities.StreamEntry.prototype.getComments = function(params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[357],"className":$s[812],"resourceName":$s[192],"httpMethod":$s[0],"signature":$s[105],"queryParams":[$s[82],$s[38],$s[511],$s[94],$s[95],$s[418],$s[328]]});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.activities.StreamEntry
 * to simplify use of the extprops resource.
 * This method will execute a GET for extprops resources
 */ /*

 osapi.jive.corev3.activities.StreamEntry.prototype.getExtProps = function(params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[359],"className":$s[812],"resourceName":$s[198],"httpMethod":$s[0],"signature":$s[105],"queryParams":[$s[94]]});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.activities.StreamEntry
 * to simplify use of the likes resource.
 * This method will execute a GET for likes resources
 */ /*

 osapi.jive.corev3.activities.StreamEntry.prototype.getLikes = function(params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[203],"className":$s[812],"resourceName":$s[46],"httpMethod":$s[0],"signature":$s[105],"queryParams":[$s[38],$s[94],$s[328]]});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.activities.StreamEntry
 * to simplify use of the outcomeTypes resource.
 * This method will execute a GET for outcomeTypes resources
 */ /*

 osapi.jive.corev3.activities.StreamEntry.prototype.getOutcomeTypes = function(params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[544],"className":$s[812],"resourceName":$s[433],"httpMethod":$s[0],"signature":$s[105],"queryParams":[$s[38],$s[94],$s[328]]});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.activities.StreamEntry
 * to simplify use of the outcomes resource.
 * This method will execute a GET for outcomes resources
 */ /*

 osapi.jive.corev3.activities.StreamEntry.prototype.getOutcomes = function(params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[361],"className":$s[812],"resourceName":$s[218],"httpMethod":$s[0],"signature":$s[105],"queryParams":[$s[38],$s[94],$s[632],$s[328]]});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.activities.StreamEntry
 * to simplify use of the likes resource.
 * This method will execute a POST for likes resources
 */ /*

 osapi.jive.corev3.activities.StreamEntry.prototype.like = function(params) { [generated code] }

 */ defineInstanceMethod({"signature":$s[105],"queryParams":[],"methodName":$s[20],"className":$s[812],"resourceName":$s[46],"httpMethod":$s[12],"hasBody":false});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.activities.StreamEntry
 * to simplify use of the likes resource.
 * This method will execute a DELETE for likes resources
 */ /*

 osapi.jive.corev3.activities.StreamEntry.prototype.unlike = function() { [generated code] }

 */ defineInstanceMethod({"methodName":$s[123],"className":$s[812],"resourceName":$s[46],"httpMethod":$s[74],"signature":""});
/**
 * define class osapi.jive.corev3.solutions.supportcenter.Section, to extend osapi.jive.corev3.AbstractObject
 */
defineClass($s[888], osapi.jive.corev3.AbstractObject, {"type":$s[623]}, [{"name":$s[66]}]);

/**
 * Describe the fields of osapi.jive.corev3.solutions.supportcenter.Section
 * @type {Array}
 */
osapi.jive.corev3.solutions.supportcenter.Section.fields = [
defineFieldMetadata($s[408],$s[129],null,true),
defineFieldMetadata($s[201],$s[127]),
defineFieldMetadata($s[468],$s[129]),
defineFieldMetadata("id",$s[79]),
defineFieldMetadata($s[259],$s[129]),
defineFieldMetadata($s[21],$s[79],null,true,true),
defineFieldMetadata($s[263],$s[11]),
defineFieldMetadata($s[265],$s[77]),
defineFieldMetadata($s[532],"SectionEntry[]",$s[441],true,false,true),
defineFieldMetadata($s[382],$s[79],null,true),
defineFieldMetadata($s[384],$s[79],null,false,true),
defineFieldMetadata($s[28],"String[]",null,false,false,true),
defineFieldMetadata($s[30],$s[79]),
defineFieldMetadata($s[235],$s[129]),
defineFieldMetadata($s[179],$s[11])
];

/**
 * Add an entry to the type registry for
 * osapi.jive.corev3.solutions.supportcenter.Section
 * @type {Object}
 */
typeRegistry[$s[623]] = {
    name: $s[623],
    ctor: osapi.jive.corev3.solutions.supportcenter.Section
};
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.solutions.supportcenter.Section
 * to simplify use of the self resource.
 * This method will execute a DELETE for self resources
 */ /*

 osapi.jive.corev3.solutions.supportcenter.Section.prototype.destroy = function() { [generated code] }

 */ defineInstanceMethod({"methodName":$s[141],"className":$s[888],"resourceName":$s[25],"httpMethod":$s[74],"signature":""});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.solutions.supportcenter.Section
 * to simplify use of the self resource.
 * This method will execute a GET for self resources
 */ /*

 osapi.jive.corev3.solutions.supportcenter.Section.prototype.get = function(params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[5],"className":$s[888],"resourceName":$s[25],"httpMethod":$s[0],"signature":$s[105],"queryParams":[$s[94]]});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.solutions.supportcenter.Section
 * to simplify use of the self resource.
 * This method will execute a PUT for self resources
 */ /*

 osapi.jive.corev3.solutions.supportcenter.Section.prototype.update = function(params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[124],"className":$s[888],"resourceName":$s[25],"httpMethod":$s[1],"signature":$s[105],"queryParams":[$s[94]]});
/**
 * define class osapi.jive.corev3.contents.Task, to extend osapi.jive.corev3.AbstractObject
 */
defineClass($s[685], osapi.jive.corev3.AbstractObject, {"type":$s[29]}, [{"name":$s[66]}]);

/**
 * Describe the fields of osapi.jive.corev3.contents.Task
 * @type {Array}
 */
osapi.jive.corev3.contents.Task.fields = [
defineFieldMetadata($s[279],$s[129]),
defineFieldMetadata($s[84],$s[78],$s[108]),
defineFieldMetadata($s[243],$s[127],null,true),
defineFieldMetadata($s[137],$s[337],$s[345],true),
defineFieldMetadata($s[244],$s[79]),
defineFieldMetadata($s[457],"Image[]",$s[44],false,false,true),
defineFieldMetadata($s[458],"ContentVideo[]",$s[400],false,false,true),
defineFieldMetadata($s[142],$s[11],null,true,true),
defineFieldMetadata($s[467],$s[129]),
defineFieldMetadata($s[201],$s[127]),
defineFieldMetadata($s[468],$s[129]),
defineFieldMetadata($s[471],$s[79]),
defineFieldMetadata($s[566],$s[79]),
defineFieldMetadata($s[472],$s[79]),
defineFieldMetadata($s[152],$s[79]),
defineFieldMetadata("id",$s[79]),
defineFieldMetadata($s[45],$s[79]),
defineFieldMetadata($s[425],$s[129]),
defineFieldMetadata($s[568],$s[11]),
defineFieldMetadata($s[259],$s[129]),
defineFieldMetadata($s[50],$s[79],null,true),
defineFieldMetadata($s[106],$s[79],null,true,true),
defineFieldMetadata($s[481],$s[131],$s[176]),
defineFieldMetadata($s[621],$s[127]),
defineFieldMetadata($s[376],$s[131],$s[176]),
defineFieldMetadata($s[320],$s[79],null,true),
defineFieldMetadata($s[482],$s[127]),
defineFieldMetadata($s[528],$s[127]),
defineFieldMetadata($s[263],$s[11]),
defineFieldMetadata($s[323],$s[129]),
defineFieldMetadata($s[265],$s[77]),
defineFieldMetadata($s[531],$s[77]),
defineFieldMetadata($s[118],$s[79]),
defineFieldMetadata($s[233],"String[]",null,false,false,true),
defineFieldMetadata($s[175],$s[79],null,true,true),
defineFieldMetadata($s[28],"String[]",null,true,false,true),
defineFieldMetadata($s[30],$s[79],null,false,true),
defineFieldMetadata($s[235],$s[129]),
defineFieldMetadata($s[179],$s[11]),
defineFieldMetadata($s[31],$s[79]),
defineFieldMetadata($s[271],$s[129]),
defineFieldMetadata($s[664],$s[127])
];

/**
 * Add an entry to the type registry for
 * osapi.jive.corev3.contents.Task
 * @type {Object}
 */
typeRegistry[$s[29]] = {
    name: $s[29],
    ctor: osapi.jive.corev3.contents.Task
};
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.contents.Task
 * to simplify use of the extprops resource.
 * This method will execute a POST for extprops resources
 */ /*

 osapi.jive.corev3.contents.Task.prototype.createExtProps = function(data, params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[506],"className":$s[685],"resourceName":$s[198],"httpMethod":$s[12],"signature":"data, params","queryParams":[$s[94]]});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.contents.Task
 * to simplify use of the outcomes resource.
 * This method will execute a POST for outcomes resources
 */ /*

 osapi.jive.corev3.contents.Task.prototype.createOutcome = function(data, params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[463],"className":$s[685],"resourceName":$s[218],"httpMethod":$s[12],"signature":"data, params","queryParams":[$s[94]]});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.contents.Task
 * to simplify use of the extprops resource.
 * This method will execute a DELETE for extprops resources
 */ /*

 osapi.jive.corev3.contents.Task.prototype.deleteExtProps = function() { [generated code] }

 */ defineInstanceMethod({"methodName":$s[507],"className":$s[685],"resourceName":$s[198],"httpMethod":$s[74],"signature":""});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.contents.Task
 * to simplify use of the self resource.
 * This method will execute a DELETE for self resources
 */ /*

 osapi.jive.corev3.contents.Task.prototype.destroy = function() { [generated code] }

 */ defineInstanceMethod({"methodName":$s[141],"className":$s[685],"resourceName":$s[25],"httpMethod":$s[74],"signature":""});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.contents.Task
 * to simplify use of the self resource.
 * This method will execute a GET for self resources
 */ /*

 osapi.jive.corev3.contents.Task.prototype.get = function(params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[5],"className":$s[685],"resourceName":$s[25],"httpMethod":$s[0],"signature":$s[105],"queryParams":[$s[185],$s[245],$s[94]]});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.contents.Task
 * to simplify use of the childOutcomeTypes resource.
 * This method will execute a GET for childOutcomeTypes resources
 */ /*

 osapi.jive.corev3.contents.Task.prototype.getChildOutcomeTypes = function(params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[619],"className":$s[685],"resourceName":$s[580],"httpMethod":$s[0],"signature":$s[105],"queryParams":[$s[38],$s[94],$s[209],$s[328]]});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.contents.Task
 * to simplify use of the extprops resource.
 * This method will execute a GET for extprops resources
 */ /*

 osapi.jive.corev3.contents.Task.prototype.getExtProps = function(params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[359],"className":$s[685],"resourceName":$s[198],"httpMethod":$s[0],"signature":$s[105],"queryParams":[$s[94]]});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.contents.Task
 * to simplify use of the followers resource.
 * This method will execute a GET for followers resources
 */ /*

 osapi.jive.corev3.contents.Task.prototype.getFollowers = function(params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[415],"className":$s[685],"resourceName":$s[250],"httpMethod":$s[0],"signature":$s[105],"queryParams":[$s[38],$s[94],$s[95],$s[328]]});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.contents.Task
 * to simplify use of the followingIn resource.
 * This method will execute a GET for followingIn resources
 */ /*

 osapi.jive.corev3.contents.Task.prototype.getFollowingIn = function(params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[518],"className":$s[685],"resourceName":$s[354],"httpMethod":$s[0],"signature":$s[105],"queryParams":[$s[94]]});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.contents.Task
 * to simplify use of the outcomeTypes resource.
 * This method will execute a GET for outcomeTypes resources
 */ /*

 osapi.jive.corev3.contents.Task.prototype.getOutcomeTypes = function(params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[544],"className":$s[685],"resourceName":$s[433],"httpMethod":$s[0],"signature":$s[105],"queryParams":[$s[38],$s[94],$s[328]]});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.contents.Task
 * to simplify use of the outcomes resource.
 * This method will execute a GET for outcomes resources
 */ /*

 osapi.jive.corev3.contents.Task.prototype.getOutcomes = function(params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[361],"className":$s[685],"resourceName":$s[218],"httpMethod":$s[0],"signature":$s[105],"queryParams":[$s[38],$s[94],$s[632],$s[328]]});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.contents.Task
 * to simplify use of the read resource.
 * This method will execute a POST for read resources
 */ /*

 osapi.jive.corev3.contents.Task.prototype.markRead = function(params) { [generated code] }

 */ defineInstanceMethod({"signature":$s[105],"queryParams":[],"methodName":$s[216],"className":$s[685],"resourceName":$s[24],"httpMethod":$s[12],"hasBody":false});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.contents.Task
 * to simplify use of the read resource.
 * This method will execute a DELETE for read resources
 */ /*

 osapi.jive.corev3.contents.Task.prototype.markUnread = function() { [generated code] }

 */ defineInstanceMethod({"methodName":$s[313],"className":$s[685],"resourceName":$s[24],"httpMethod":$s[74],"signature":""});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.contents.Task
 * to simplify use of the self resource.
 * This method will execute a PUT for self resources
 */ /*

 osapi.jive.corev3.contents.Task.prototype.update = function(params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[124],"className":$s[685],"resourceName":$s[25],"httpMethod":$s[1],"signature":$s[105],"queryParams":[$s[185],$s[94],$s[47],$s[179]]});
/**
 * define class osapi.jive.corev3.tiles.TileInstance, to extend osapi.jive.corev3.AbstractObject
 */
defineClass($s[774], osapi.jive.corev3.AbstractObject, {"type":$s[447]}, []);

/**
 * Describe the fields of osapi.jive.corev3.tiles.TileInstance
 * @type {Array}
 */
osapi.jive.corev3.tiles.TileInstance.fields = [
defineFieldMetadata($s[89],$s[129],null,true),
defineFieldMetadata($s[90],$s[276],null,true),
defineFieldMetadata("data",$s[276]),
defineFieldMetadata($s[291],$s[497],$s[534],false,true),
defineFieldMetadata($s[297],$s[79],null,true),
defineFieldMetadata($s[201],$s[127]),
defineFieldMetadata($s[468],$s[129]),
defineFieldMetadata("id",$s[79]),
defineFieldMetadata($s[426],$s[11]),
defineFieldMetadata($s[427],$s[11]),
defineFieldMetadata($s[259],$s[129]),
defineFieldMetadata($s[106],$s[79]),
defineFieldMetadata($s[439],$s[389],$s[439]),
defineFieldMetadata($s[263],$s[11]),
defineFieldMetadata($s[265],$s[77]),
defineFieldMetadata($s[63],$s[79],null,true),
defineFieldMetadata($s[118],$s[276]),
defineFieldMetadata($s[28],"String[]",null,true,false,true),
defineFieldMetadata($s[30],$s[79]),
defineFieldMetadata($s[235],$s[129]),
defineFieldMetadata($s[179],$s[11]),
defineFieldMetadata($s[272],$s[79])
];

/**
 * Add an entry to the type registry for
 * osapi.jive.corev3.tiles.TileInstance
 * @type {Object}
 */
typeRegistry[$s[447]] = {
    name: $s[447],
    ctor: osapi.jive.corev3.tiles.TileInstance
};
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.tiles.TileInstance
 * to simplify use of the privateprops resource.
 * This method will execute a GET for privateprops resources
 */ /*

 osapi.jive.corev3.tiles.TileInstance.prototype.getPrivateProps = function(params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[546],"className":$s[774],"resourceName":$s[437],"httpMethod":$s[0],"signature":$s[105],"queryParams":[]});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.tiles.TileInstance
 * to simplify use of the privateprops resource.
 * This method will execute a POST for privateprops resources
 */ /*

 osapi.jive.corev3.tiles.TileInstance.prototype.updatePrivateProps = function(data, params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[607],"className":$s[774],"resourceName":$s[437],"httpMethod":$s[12],"signature":"data, params","queryParams":[]});
/**
 * define class osapi.jive.corev3.metadata.TimeZone, to extend osapi.jive.corev3.AbstractObject
 */
defineClass($s[756], osapi.jive.corev3.AbstractObject, {"type":$s[234]}, []);

/**
 * Describe the fields of osapi.jive.corev3.metadata.TimeZone
 * @type {Array}
 */
osapi.jive.corev3.metadata.TimeZone.fields = [
defineFieldMetadata($s[390],$s[79]),
defineFieldMetadata($s[351],$s[79]),
defineFieldMetadata("id",$s[79]),
defineFieldMetadata($s[264],$s[129]),
defineFieldMetadata($s[265],$s[77])
];

/**
 * Add an entry to the type registry for
 * osapi.jive.corev3.metadata.TimeZone
 * @type {Object}
 */
typeRegistry[$s[234]] = {
    name: $s[234],
    ctor: osapi.jive.corev3.metadata.TimeZone
};
/**
 * define class osapi.jive.corev3.contents.Update, to extend osapi.jive.corev3.AbstractObject
 */
defineClass($s[717], osapi.jive.corev3.AbstractObject, {"type":$s[124]}, [{"name":$s[66]}]);

/**
 * Describe the fields of osapi.jive.corev3.contents.Update
 * @type {Array}
 */
osapi.jive.corev3.contents.Update.fields = [
defineFieldMetadata($s[279],$s[129]),
defineFieldMetadata($s[84],$s[78],$s[108]),
defineFieldMetadata($s[137],$s[337],$s[345],true,true),
defineFieldMetadata($s[244],$s[79]),
defineFieldMetadata($s[457],"Image[]",$s[44],false,false,true),
defineFieldMetadata($s[458],"ContentVideo[]",$s[400],false,false,true),
defineFieldMetadata($s[467],$s[129]),
defineFieldMetadata($s[201],$s[127]),
defineFieldMetadata($s[468],$s[129]),
defineFieldMetadata($s[471],$s[79]),
defineFieldMetadata($s[566],$s[79]),
defineFieldMetadata($s[472],$s[79]),
defineFieldMetadata($s[152],$s[79]),
defineFieldMetadata("id",$s[79]),
defineFieldMetadata($s[45],$s[79]),
defineFieldMetadata($s[425],$s[129]),
defineFieldMetadata($s[568],$s[11]),
defineFieldMetadata($s[212],$s[76]),
defineFieldMetadata($s[259],$s[129]),
defineFieldMetadata($s[260],$s[76]),
defineFieldMetadata($s[106],$s[79]),
defineFieldMetadata($s[481],$s[131],$s[176]),
defineFieldMetadata($s[621],$s[127]),
defineFieldMetadata($s[376],$s[131],$s[176]),
defineFieldMetadata($s[482],$s[127]),
defineFieldMetadata($s[528],$s[127]),
defineFieldMetadata($s[263],$s[11]),
defineFieldMetadata($s[323],$s[129]),
defineFieldMetadata($s[114],$s[80],$s[124]),
defineFieldMetadata($s[265],$s[77]),
defineFieldMetadata($s[531],$s[77]),
defineFieldMetadata($s[118],$s[79]),
defineFieldMetadata($s[175],$s[79]),
defineFieldMetadata($s[28],"String[]",null,true,false,true),
defineFieldMetadata($s[30],$s[79],null,false,true),
defineFieldMetadata($s[235],$s[129]),
defineFieldMetadata($s[179],$s[11]),
defineFieldMetadata($s[31],$s[79]),
defineFieldMetadata($s[271],$s[129]),
defineFieldMetadata($s[664],$s[127])
];

/**
 * Add an entry to the type registry for
 * osapi.jive.corev3.contents.Update
 * @type {Object}
 */
typeRegistry[$s[124]] = {
    name: $s[124],
    ctor: osapi.jive.corev3.contents.Update
};
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.contents.Update
 * to simplify use of the comments resource.
 * This method will execute a POST for comments resources
 */ /*

 osapi.jive.corev3.contents.Update.prototype.createComment = function(data, params) { [generated code] }

 */ defineInstanceMethod({"signature":"data, params","queryParams":[$s[84],$s[94],$s[263],$s[179]],"methodName":$s[460],"className":$s[717],"resourceName":$s[192],"httpMethod":$s[12],"paramOverrides":{"parent":"@this.resources.self.ref","type":$s[136]}});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.contents.Update
 * to simplify use of the extprops resource.
 * This method will execute a POST for extprops resources
 */ /*

 osapi.jive.corev3.contents.Update.prototype.createExtProps = function(data, params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[506],"className":$s[717],"resourceName":$s[198],"httpMethod":$s[12],"signature":"data, params","queryParams":[$s[94]]});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.contents.Update
 * to simplify use of the outcomes resource.
 * This method will execute a POST for outcomes resources
 */ /*

 osapi.jive.corev3.contents.Update.prototype.createOutcome = function(data, params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[463],"className":$s[717],"resourceName":$s[218],"httpMethod":$s[12],"signature":"data, params","queryParams":[$s[94]]});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.contents.Update
 * to simplify use of the extprops resource.
 * This method will execute a DELETE for extprops resources
 */ /*

 osapi.jive.corev3.contents.Update.prototype.deleteExtProps = function() { [generated code] }

 */ defineInstanceMethod({"methodName":$s[507],"className":$s[717],"resourceName":$s[198],"httpMethod":$s[74],"signature":""});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.contents.Update
 * to simplify use of the self resource.
 * This method will execute a DELETE for self resources
 */ /*

 osapi.jive.corev3.contents.Update.prototype.destroy = function() { [generated code] }

 */ defineInstanceMethod({"methodName":$s[141],"className":$s[717],"resourceName":$s[25],"httpMethod":$s[74],"signature":""});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.contents.Update
 * to simplify use of the self resource.
 * This method will execute a GET for self resources
 */ /*

 osapi.jive.corev3.contents.Update.prototype.get = function(params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[5],"className":$s[717],"resourceName":$s[25],"httpMethod":$s[0],"signature":$s[105],"queryParams":[$s[185],$s[245],$s[94]]});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.contents.Update
 * to simplify use of the childOutcomeTypes resource.
 * This method will execute a GET for childOutcomeTypes resources
 */ /*

 osapi.jive.corev3.contents.Update.prototype.getChildOutcomeTypes = function(params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[619],"className":$s[717],"resourceName":$s[580],"httpMethod":$s[0],"signature":$s[105],"queryParams":[$s[38],$s[94],$s[209],$s[328]]});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.contents.Update
 * to simplify use of the comments resource.
 * This method will execute a GET for comments resources
 */ /*

 osapi.jive.corev3.contents.Update.prototype.getComments = function(params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[357],"className":$s[717],"resourceName":$s[192],"httpMethod":$s[0],"signature":$s[105],"queryParams":[$s[82],$s[84],$s[38],$s[511],$s[94],$s[95],$s[418],$s[99],$s[27],$s[328]]});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.contents.Update
 * to simplify use of the externalURLs resource.
 * This method will execute a GET for externalURLs resources
 */ /*

 osapi.jive.corev3.contents.Update.prototype.getContentExternalURLs = function(params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[630],"className":$s[717],"resourceName":$s[414],"httpMethod":$s[0],"signature":$s[105],"queryParams":[$s[94]]});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.contents.Update
 * to simplify use of the images resource.
 * This method will execute a GET for images resources
 */ /*

 osapi.jive.corev3.contents.Update.prototype.getContentImages = function(params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[563],"className":$s[717],"resourceName":$s[98],"httpMethod":$s[0],"signature":$s[105],"queryParams":[$s[94]]});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.contents.Update
 * to simplify use of the extprops resource.
 * This method will execute a GET for extprops resources
 */ /*

 osapi.jive.corev3.contents.Update.prototype.getExtProps = function(params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[359],"className":$s[717],"resourceName":$s[198],"httpMethod":$s[0],"signature":$s[105],"queryParams":[$s[94]]});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.contents.Update
 * to simplify use of the followers resource.
 * This method will execute a GET for followers resources
 */ /*

 osapi.jive.corev3.contents.Update.prototype.getFollowers = function(params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[415],"className":$s[717],"resourceName":$s[250],"httpMethod":$s[0],"signature":$s[105],"queryParams":[$s[38],$s[94],$s[95],$s[328]]});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.contents.Update
 * to simplify use of the followingIn resource.
 * This method will execute a GET for followingIn resources
 */ /*

 osapi.jive.corev3.contents.Update.prototype.getFollowingIn = function(params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[518],"className":$s[717],"resourceName":$s[354],"httpMethod":$s[0],"signature":$s[105],"queryParams":[$s[94]]});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.contents.Update
 * to simplify use of the likes resource.
 * This method will execute a GET for likes resources
 */ /*

 osapi.jive.corev3.contents.Update.prototype.getLikes = function(params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[203],"className":$s[717],"resourceName":$s[46],"httpMethod":$s[0],"signature":$s[105],"queryParams":[$s[38],$s[94],$s[328]]});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.contents.Update
 * to simplify use of the outcomeTypes resource.
 * This method will execute a GET for outcomeTypes resources
 */ /*

 osapi.jive.corev3.contents.Update.prototype.getOutcomeTypes = function(params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[544],"className":$s[717],"resourceName":$s[433],"httpMethod":$s[0],"signature":$s[105],"queryParams":[$s[38],$s[94],$s[328]]});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.contents.Update
 * to simplify use of the outcomes resource.
 * This method will execute a GET for outcomes resources
 */ /*

 osapi.jive.corev3.contents.Update.prototype.getOutcomes = function(params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[361],"className":$s[717],"resourceName":$s[218],"httpMethod":$s[0],"signature":$s[105],"queryParams":[$s[38],$s[94],$s[632],$s[328]]});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.contents.Update
 * to simplify use of the likes resource.
 * This method will execute a POST for likes resources
 */ /*

 osapi.jive.corev3.contents.Update.prototype.like = function(params) { [generated code] }

 */ defineInstanceMethod({"signature":$s[105],"queryParams":[],"methodName":$s[20],"className":$s[717],"resourceName":$s[46],"httpMethod":$s[12],"hasBody":false});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.contents.Update
 * to simplify use of the read resource.
 * This method will execute a POST for read resources
 */ /*

 osapi.jive.corev3.contents.Update.prototype.markRead = function(params) { [generated code] }

 */ defineInstanceMethod({"signature":$s[105],"queryParams":[],"methodName":$s[216],"className":$s[717],"resourceName":$s[24],"httpMethod":$s[12],"hasBody":false});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.contents.Update
 * to simplify use of the read resource.
 * This method will execute a DELETE for read resources
 */ /*

 osapi.jive.corev3.contents.Update.prototype.markUnread = function() { [generated code] }

 */ defineInstanceMethod({"methodName":$s[313],"className":$s[717],"resourceName":$s[24],"httpMethod":$s[74],"signature":""});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.contents.Update
 * to simplify use of the likes resource.
 * This method will execute a DELETE for likes resources
 */ /*

 osapi.jive.corev3.contents.Update.prototype.unlike = function() { [generated code] }

 */ defineInstanceMethod({"methodName":$s[123],"className":$s[717],"resourceName":$s[46],"httpMethod":$s[74],"signature":""});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.contents.Update
 * to simplify use of the self resource.
 * This method will execute a PUT for self resources
 */ /*

 osapi.jive.corev3.contents.Update.prototype.update = function(params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[124],"className":$s[717],"resourceName":$s[25],"httpMethod":$s[1],"signature":$s[105],"queryParams":[$s[185],$s[94],$s[47],$s[179]]});
/**
 * define class osapi.jive.corev3.contents.ExternalURL, to extend osapi.jive.corev3.AbstractObject
 */
defineClass($s[790], osapi.jive.corev3.AbstractObject, {"type":$s[9]}, [{"name":$s[66]}]);

/**
 * Describe the fields of osapi.jive.corev3.contents.ExternalURL
 * @type {Array}
 */
osapi.jive.corev3.contents.ExternalURL.fields = [
defineFieldMetadata($s[84],$s[78],$s[108]),
defineFieldMetadata($s[137],$s[336]),
defineFieldMetadata($s[201],$s[127]),
defineFieldMetadata($s[468],$s[129]),
defineFieldMetadata("id",$s[79]),
defineFieldMetadata($s[259],$s[129]),
defineFieldMetadata($s[263],$s[11]),
defineFieldMetadata($s[265],$s[77]),
defineFieldMetadata($s[175],$s[79]),
defineFieldMetadata($s[28],"String[]",null,true,false,true),
defineFieldMetadata($s[30],$s[79]),
defineFieldMetadata($s[235],$s[129]),
defineFieldMetadata($s[179],$s[11]),
defineFieldMetadata($s[9],$s[79])
];

/**
 * Add an entry to the type registry for
 * osapi.jive.corev3.contents.ExternalURL
 * @type {Object}
 */
typeRegistry[$s[9]] = {
    name: $s[9],
    ctor: osapi.jive.corev3.contents.ExternalURL
};
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.contents.ExternalURL
 * to simplify use of the self resource.
 * This method will execute a GET for self resources
 */ /*

 osapi.jive.corev3.contents.ExternalURL.prototype.get = function(params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[5],"className":$s[790],"resourceName":$s[25],"httpMethod":$s[0],"signature":$s[105],"queryParams":[$s[94]]});
/**
 * define class osapi.jive.corev3.contents.Video, to extend osapi.jive.corev3.AbstractObject
 */
defineClass($s[710], osapi.jive.corev3.AbstractObject, {"type":$s[69]}, [{"name":$s[66]}]);

/**
 * Describe the fields of osapi.jive.corev3.contents.Video
 * @type {Array}
 */
osapi.jive.corev3.contents.Video.fields = [
defineFieldMetadata($s[279],$s[129]),
defineFieldMetadata($s[84],$s[78],$s[108]),
defineFieldMetadata($s[133],"Person[]",$s[108],false,false,true),
defineFieldMetadata($s[283],$s[79]),
defineFieldMetadata($s[286],"String[]",null,true,false,true),
defineFieldMetadata($s[137],$s[337],$s[345],true,true),
defineFieldMetadata($s[244],$s[79]),
defineFieldMetadata($s[457],"Image[]",$s[44],false,false,true),
defineFieldMetadata($s[458],"ContentVideo[]",$s[400],false,false,true),
defineFieldMetadata($s[539],"Person[]",$s[108],true,false,true),
defineFieldMetadata($s[467],$s[129]),
defineFieldMetadata($s[201],$s[127]),
defineFieldMetadata($s[468],$s[129]),
defineFieldMetadata($s[471],$s[79]),
defineFieldMetadata($s[566],$s[79]),
defineFieldMetadata($s[472],$s[79]),
defineFieldMetadata($s[152],$s[79]),
defineFieldMetadata("id",$s[79]),
defineFieldMetadata($s[45],$s[79]),
defineFieldMetadata($s[425],$s[129]),
defineFieldMetadata($s[568],$s[11]),
defineFieldMetadata($s[259],$s[129]),
defineFieldMetadata($s[480],$s[77]),
defineFieldMetadata($s[574],"String[]",null,false,false,true),
defineFieldMetadata($s[433],"OutcomeType[]",$s[375],true,false,true),
defineFieldMetadata($s[106],$s[79],null,true),
defineFieldMetadata($s[481],$s[131],$s[176]),
defineFieldMetadata($s[621],$s[127]),
defineFieldMetadata($s[376],$s[131],$s[176]),
defineFieldMetadata($s[482],$s[127]),
defineFieldMetadata($s[528],$s[127]),
defineFieldMetadata($s[263],$s[11]),
defineFieldMetadata($s[323],$s[129]),
defineFieldMetadata($s[265],$s[77]),
defineFieldMetadata($s[531],$s[77]),
defineFieldMetadata($s[118],$s[79]),
defineFieldMetadata($s[175],$s[79],null,true,true),
defineFieldMetadata($s[28],"String[]",null,true,false,true),
defineFieldMetadata($s[30],$s[79],null,false,true),
defineFieldMetadata($s[235],$s[129]),
defineFieldMetadata($s[179],$s[11]),
defineFieldMetadata($s[67],"Person[]",$s[108],true,false,true),
defineFieldMetadata($s[31],$s[79]),
defineFieldMetadata($s[271],$s[129]),
defineFieldMetadata($s[335],$s[79],null,true),
defineFieldMetadata($s[664],$s[127])
];

/**
 * Add an entry to the type registry for
 * osapi.jive.corev3.contents.Video
 * @type {Object}
 */
typeRegistry[$s[69]] = {
    name: $s[69],
    ctor: osapi.jive.corev3.contents.Video
};
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.contents.Video
 * to simplify use of the comments resource.
 * This method will execute a POST for comments resources
 */ /*

 osapi.jive.corev3.contents.Video.prototype.createComment = function(data, params) { [generated code] }

 */ defineInstanceMethod({"signature":"data, params","queryParams":[$s[84],$s[94],$s[263],$s[179]],"methodName":$s[460],"className":$s[710],"resourceName":$s[192],"httpMethod":$s[12],"paramOverrides":{"parent":"@this.resources.self.ref","type":$s[136]}});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.contents.Video
 * to simplify use of the extprops resource.
 * This method will execute a POST for extprops resources
 */ /*

 osapi.jive.corev3.contents.Video.prototype.createExtProps = function(data, params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[506],"className":$s[710],"resourceName":$s[198],"httpMethod":$s[12],"signature":"data, params","queryParams":[$s[94]]});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.contents.Video
 * to simplify use of the outcomes resource.
 * This method will execute a POST for outcomes resources
 */ /*

 osapi.jive.corev3.contents.Video.prototype.createOutcome = function(data, params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[463],"className":$s[710],"resourceName":$s[218],"httpMethod":$s[12],"signature":"data, params","queryParams":[$s[94]]});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.contents.Video
 * to simplify use of the extprops resource.
 * This method will execute a DELETE for extprops resources
 */ /*

 osapi.jive.corev3.contents.Video.prototype.deleteExtProps = function() { [generated code] }

 */ defineInstanceMethod({"methodName":$s[507],"className":$s[710],"resourceName":$s[198],"httpMethod":$s[74],"signature":""});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.contents.Video
 * to simplify use of the self resource.
 * This method will execute a DELETE for self resources
 */ /*

 osapi.jive.corev3.contents.Video.prototype.destroy = function() { [generated code] }

 */ defineInstanceMethod({"methodName":$s[141],"className":$s[710],"resourceName":$s[25],"httpMethod":$s[74],"signature":""});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.contents.Video
 * to simplify use of the self resource.
 * This method will execute a GET for self resources
 */ /*

 osapi.jive.corev3.contents.Video.prototype.get = function(params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[5],"className":$s[710],"resourceName":$s[25],"httpMethod":$s[0],"signature":$s[105],"queryParams":[$s[185],$s[245],$s[94]]});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.contents.Video
 * to simplify use of the childOutcomeTypes resource.
 * This method will execute a GET for childOutcomeTypes resources
 */ /*

 osapi.jive.corev3.contents.Video.prototype.getChildOutcomeTypes = function(params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[619],"className":$s[710],"resourceName":$s[580],"httpMethod":$s[0],"signature":$s[105],"queryParams":[$s[38],$s[94],$s[209],$s[328]]});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.contents.Video
 * to simplify use of the comments resource.
 * This method will execute a GET for comments resources
 */ /*

 osapi.jive.corev3.contents.Video.prototype.getComments = function(params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[357],"className":$s[710],"resourceName":$s[192],"httpMethod":$s[0],"signature":$s[105],"queryParams":[$s[82],$s[84],$s[38],$s[511],$s[94],$s[95],$s[418],$s[99],$s[27],$s[328]]});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.contents.Video
 * to simplify use of the extprops resource.
 * This method will execute a GET for extprops resources
 */ /*

 osapi.jive.corev3.contents.Video.prototype.getExtProps = function(params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[359],"className":$s[710],"resourceName":$s[198],"httpMethod":$s[0],"signature":$s[105],"queryParams":[$s[94]]});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.contents.Video
 * to simplify use of the outcomeTypes resource.
 * This method will execute a GET for outcomeTypes resources
 */ /*

 osapi.jive.corev3.contents.Video.prototype.getOutcomeTypes = function(params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[544],"className":$s[710],"resourceName":$s[433],"httpMethod":$s[0],"signature":$s[105],"queryParams":[$s[38],$s[94],$s[328]]});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.contents.Video
 * to simplify use of the outcomes resource.
 * This method will execute a GET for outcomes resources
 */ /*

 osapi.jive.corev3.contents.Video.prototype.getOutcomes = function(params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[361],"className":$s[710],"resourceName":$s[218],"httpMethod":$s[0],"signature":$s[105],"queryParams":[$s[38],$s[94],$s[632],$s[328]]});
/**
 * Adds a dynamic convenience method to osapi.jive.corev3.contents.Video
 * to simplify use of the self resource.
 * This method will execute a PUT for self resources
 */ /*

 osapi.jive.corev3.contents.Video.prototype.update = function(params) { [generated code] }

 */ defineInstanceMethod({"methodName":$s[124],"className":$s[710],"resourceName":$s[25],"httpMethod":$s[1],"signature":$s[105],"queryParams":[$s[185],$s[94],$s[47],$s[179]]});
defineStatic({
    "queryParams": [$s[94], $s[95]],
    "httpMethod": $s[0],
    "name": $s[862],
    "endpoint": "/places"
});

defineStatic({
    "queryParams": [$s[94], $s[95]],
    "httpMethod": $s[0],
    "name": $s[871],
    "endpoint": "/contents"
});

defineStatic({
    "queryParams": [$s[94], $s[95]],
    "httpMethod": $s[0],
    "name": $s[860],
    "endpoint": "/people"
});

/**
 * Triggers execution of all queued load handlers
 */
registerOnLoadHandler(registerOnLoadHandler);
})();